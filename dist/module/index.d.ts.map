{"version":3,"sources":["../src/module/index.tsx"],"names":[],"mappings":"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","file":"index.d.ts","sourcesContent":["import * as React from 'react';\nimport oh from 'output-helpers';\nimport translations from './translations';\n\nimport * as formGenerator from './formGenerator';\n\nimport PromptModal from './PromptModal';\nimport TextInput, { TextInputConfig } from './input_components/TextInput';\nimport BoolInput, { BoolInputConfig } from './input_components/BoolInput';\nimport GridInput, { GridInputConfig } from './input_components/GridInput';\nimport SelectInput, { SelectInputConfig } from './input_components/SelectInput';\nimport MultiSelectInput, { MultiSelectInputConfig } from './input_components/MultiSelectInput';\nimport TextareaInput, { TextareaInputConfig } from './input_components/TextareaInput';\nimport TriStateInput, { TriStateInputConfig } from './input_components/TriStateInput';\nimport Button, { ButtonConfig } from './input_components/Button';\n\n\nlet valid_types = [\"bool\", \"button\", \"confirm\", \"date\", \"grid\", \"number\", \"multi_select\", \"select\", \"text\", \"textarea\", \"tri_state\"];\n\n\n//Add translations of this repo to OH. Prefixed with \"user_input_hoc_\".\noh.addDictionary(translations);\n\n\nexport type ComponentLib = {\n    [key in InputType]: typeof React.Component;\n};\n\nexport interface HOCProps {\n    /** Opens a prompt using supplied config which has a single Confirm button. */\n    alert: (prompt_request: UserInputPromptConfig, confirmCB?: (values: LooseObject) => void) => void;\n    /** Closes any open prompt without triggering any Confirm or Cancel callbacks. */\n    cancel: () => void;\n    /** Opens a prompt using supplied config which has a Confirm and Cancel button. */\n    confirm: (prompt_request: UserInputPromptConfig, confirmCB?: (values: LooseObject) => void, cancelCB?: () => void) => void;\n    /** Returns current tag. If no tag has been set returns null. */\n    getTag: () => string | null;\n    /** Returns true if a prompt is currently showing to the user. Otherwise false. */\n    isOpen: () => boolean;\n    /** Modify the config a currently open prompt. */\n    setConfig: (input_config: AnyInputConfigWithValue) => void;\n    /** Set tag. */\n    setTag: (tag: string) => void;\n}\n\nexport type ValueInterface = {\n    value?: any;\n};\nexport type AnyInputConfig = ButtonConfig|TextInputConfig|BoolInputConfig|GridInputConfig|SelectInputConfig|MultiSelectInputConfig|TextareaInputConfig|TriStateInputConfig;\nexport type AnyInputConfigWithValue = AnyInputConfig & ValueInterface;\nexport type PromptInputConfigArray = Array<TextInputConfig|BoolInputConfig|GridInputConfig|SelectInputConfig|MultiSelectInputConfig|TextareaInputConfig|TriStateInputConfig>;\nexport type FormInputConfigArray = Array<ButtonConfig|TextInputConfig|BoolInputConfig|GridInputConfig|SelectInputConfig|MultiSelectInputConfig|TextareaInputConfig|TriStateInputConfig>;\n\ninterface PromptRequest {\n    inputs: PromptInputConfigArray;\n    props?: {\n        [key: string]: any\n    };\n}\n\nexport interface PromptState {\n    show: boolean;\n    modal_props: any;\n    values: {\n        [key: string]: any\n    };\n    inputs: PromptInputConfigArray;\n    prompt_request: PromptRequest | null;\n    tag: string | null;\n}\nexport interface FormState {\n    values: {\n        [key: string]: any\n    };\n    inputs: FormInputConfigArray;\n    tag: string | null;\n}\nexport interface UserInputPromptConfig {\n    /** Props sent to the PromptModal component. */\n    prompt_props: {\n        title: string;\n        message?: string;\n        classes?: string;\n        confirmCB?: () => void;\n        cancelCB?: () => void;\n    };\n    inputs: PromptInputConfigArray;\n}\n\nexport interface UserInputProps {\n    userInputs: HOCProps;\n}\n\nlet default_components: ComponentLib = {\n    text: TextInput,\n    bool: BoolInput,\n    grid: GridInput,\n    button: Button,\n    select: SelectInput,\n    multi_select: MultiSelectInput,\n    textarea: TextareaInput,\n    tri_state: TriStateInput,\n    confirm: Button,\n    number: TextInput,\n    date: TextInput\n};\nlet custom_components: Partial<ComponentLib> = {};\n\n\n\nexport function renderInputs(inputs: FormInputConfigArray, values: LooseObject, inputValueChangeCB: (key: string, value: any) => void, confirmClickCB?: (() => void)) {\n    return inputs.map((input_config) => {\n        const key = input_config.key;\n        const InputComp: typeof React.Component = custom_components[input_config.type] || default_components[input_config.type];\n\n        if (input_config.type === \"confirm\") {\n            let suppliedOnClickCB: (() => void) | undefined;\n            if (input_config.hasOwnProperty(\"onClick\")) {\n                suppliedOnClickCB = input_config.onClick;\n            }\n            return <InputComp\n                key={key}\n                config={input_config}\n                value={values[key]}\n                onClick={() => {\n                    if (confirmClickCB) {\n                        confirmClickCB();\n                    }\n                    if (suppliedOnClickCB) {\n                        suppliedOnClickCB();\n                    }\n                }}\n            />;\n        }\n        return <InputComp\n            key={key}\n            config={input_config}\n            value={values[key]}\n            onChange={(value: any) => {\n                inputValueChangeCB(key, value);\n            }}\n        />;\n    });\n}\n\nexport function renderPrompt(show: boolean, inputs: PromptInputConfigArray, values: LooseObject, modal_props: LooseObject, valueChangeCB: (key: string, value: any) => void, userConfirmedCB: (values: LooseObject) => void, userCancelledCB: () => void) {\n    if (show !== true) {\n        return null;\n    }\n    let Modal: typeof React.Component = PromptModal;\n\n    return (\n        <Modal\n            confirmCB={(values: LooseObject) => { userConfirmedCB(values); }}\n            cancelCB={() => { userCancelledCB(); }}\n            renderInputs={() => { return renderInputs(inputs, values, valueChangeCB); }}\n            {...modal_props}\n        />\n    );\n}\n\n\n\nexport function InputHOC<P extends UserInputProps>(WrappedComponent: React.ComponentType<P>): React.ComponentClass<Omit<P, keyof UserInputProps>> {\n    class Prompt extends React.Component<P, PromptState> {\n        exports: HOCProps = {\n            confirm: (prompt_request, confirmCB, cancelCB) => {\n                if (prompt_request.hasOwnProperty(\"inputs\") === false) {\n                    prompt_request.inputs = [];\n                }\n                if (prompt_request.hasOwnProperty(\"prompt_props\") === false) {\n                    throw new Error(\"prompt_props are required in config for alert.\");\n                }\n                if (!prompt_request.prompt_props.title) {\n                    throw new Error(\"prompt_props requires 'title' property.\");\n                }\n                let default_props = {\n                    show_cancel_btn: true,\n                    show_confirm_btn: true\n                };\n                prompt_request.prompt_props = Object.assign(\n                    {},\n                    default_props,\n                    prompt_request.prompt_props\n                );\n                this.initPrompt(prompt_request, confirmCB, cancelCB);\n            },\n            alert: (prompt_request, confirmCB) => {\n                if (prompt_request.hasOwnProperty(\"inputs\") === false) {\n                    prompt_request.inputs = [];\n                }\n                if (prompt_request.hasOwnProperty(\"prompt_props\") === false) {\n                    throw new Error(\"prompt_props are required in config for alert.\");\n                }\n                if (!prompt_request.prompt_props.title) {\n                    throw new Error(\"prompt_props requires 'title' property.\");\n                }\n                let default_props = {\n                    show_cancel_btn: false,\n                    show_confirm_btn: true\n                };\n                prompt_request.prompt_props = Object.assign(\n                    {},\n                    default_props,\n                    prompt_request.prompt_props\n                );\n                this.initPrompt(prompt_request, confirmCB);\n            },\n            cancel: () => {\n                this.resetPrompt();\n            },\n            isOpen: () => {\n                return this.state.show;\n            },\n            setTag: (tag) => {\n                this.setState({\n                    tag: tag\n                });\n            },\n            getTag: () => {\n                return this.state.tag;\n            },\n            setConfig: (input_config: AnyInputConfigWithValue) => {\n                if (input_config.hasOwnProperty(\"key\") === false) {\n                    throw new Error(\"UserInput: input_config must contain 'key' property.\");\n                }\n                let inputs = this.state.inputs;\n                let input_index = inputs.findIndex(input => input.key === input_config.key);\n                if (input_index < 0) {\n                    throw new Error(\"UserInput: Key not found in existing inputs. Key must match an input created with 'promp()'.\");\n                }\n                let values = this.state.values;\n                if (input_config.hasOwnProperty(\"value\")) {\n                    if (input_config.type === \"multi_select\") {\n                        let selected_options = input_config.options.filter(option => input_config.value.includes(option.value));\n                        if (selected_options.length !== input_config.value.length) {\n                            throw new Error(\"UserInput: Values for multiselect not present in options.\");\n                        }\n                        values[input_config.key] = selected_options;\n                    } else if (input_config.type === \"select\") {\n                        let selected_option = input_config.options.find(option => input_config.value === option.value);\n                        if (!selected_option) {\n                            throw new Error(\"UserInput: Value for select not present in options.\");\n                        }\n                        values[input_config.key] = selected_option;\n                    } else {\n                        values[input_config.key] = input_config.value;\n                    }\n                }\n                inputs[input_index] = Object.assign({}, inputs[input_index], input_config);\n                this.setState({\n                    inputs: inputs,\n                    values: values\n                });\n            }\n        };\n\n        confirmCB: any = null;\n        cancelCB: any = null;\n        input_components: ComponentObject = {\n            text: TextInput,\n            grid: GridInput,\n            bool: BoolInput,\n            select: SelectInput,\n            multi_select: MultiSelectInput,\n            textarea: TextareaInput,\n            tri_state: TriStateInput,\n            button: Button,\n            confirm: Button\n        };\n\n        constructor(props: any) {\n            super(props);\n\n            this.state = {\n                show: false,\n                modal_props: {},\n                values: {},\n                prompt_request: null,\n                tag: null,\n                inputs: []\n            };\n        }\n\n        initPrompt(prompt_request: UserInputPromptConfig, confirmCB?: (value: any) => void, cancelCB?: () => void) {\n            let inputs = prompt_request.inputs;\n            let props = prompt_request.prompt_props;\n            let invalid_inputs = inputs.some(input => input.hasOwnProperty(\"default_value\") === false);\n            if (invalid_inputs) {\n                throw new Error(\"UserInput: Inputs must be configured with a 'default_value'.\");\n            }\n            invalid_inputs = inputs.some(input => !this.input_components[input.type]);\n            if (invalid_inputs) {\n                throw new Error(\"UserInput: Inputs must be configured with a valid 'type'. \" + valid_types.join(','));\n            }\n            this.confirmCB = confirmCB || null;\n            this.cancelCB = cancelCB || null;\n            let values: { [key: string]: any; } = {};\n            inputs.forEach((input) => {\n                if (input.type === \"multi_select\") {\n                    let selected_options = input.options.filter(option => input.default_value.includes(option.value));\n                    if (selected_options.length !== input.default_value.length) {\n                        throw new Error(\"UserInput: Default values for multiselect not present in options.\");\n                    }\n                    values[input.key] = selected_options;\n                } else if (input.type === \"select\") {\n                    let selected_option = input.options.find(option => input.default_value === option.value);\n                    if (!selected_option) {\n                        throw new Error(\"UserInput: Default value for select not present in options.\");\n                    }\n                    values[input.key] = selected_option;\n                } else {\n                    values[input.key] = input.default_value;\n                }\n            });\n            this.setState({\n                show: true,\n                modal_props: props,\n                inputs: inputs,\n                values: values,\n                prompt_request: prompt_request\n            });\n        }\n\n        resetPrompt() {\n            this.confirmCB = null;\n            this.cancelCB = null;\n            this.setState({\n                show: false,\n                inputs: [],\n                values: [],\n                prompt_request: null,\n                tag: null\n            });\n        }\n\n        userConfirmedCB(values: LooseObject) {\n            //User clicked the confirm button.\n            if (this.confirmCB) {\n                this.confirmCB(values);\n            }\n            this.resetPrompt();\n        }\n        userCancelledCB() {\n            //User clicked the cancel button.\n            if (this.cancelCB) {\n                //Exec the cancelCB if one was supplied.\n                this.cancelCB();\n            }\n            this.resetPrompt();\n        }\n\n        inputValueChangeCB(key: string, value: any) {\n            let values = Object.assign({}, this.state.values);\n            values[key] = value;\n            this.setState({\n                values: values\n            });\n        }\n\n        render() {\n            return (<div>\n                <WrappedComponent userInputs={this.exports} {...this.props} />\n                {\n                    renderPrompt(\n                        this.state.show,\n                        this.state.inputs,\n                        this.state.values,\n                        this.state.modal_props,\n                        (key: string, value: any) => { this.inputValueChangeCB(key, value); },\n                        (values: LooseObject) => { this.userConfirmedCB(values); },\n                        () => { this.userCancelledCB(); }\n                    )\n                }\n            </div>);\n        }\n    }\n\n    return Prompt;\n}\n\n\nexport namespace InputHOC {\n    export function setCustomComponents(object_with_components: ComponentObject) {\n        custom_components = object_with_components;\n    }\n    export function generateForm(input_configs: FormInputConfigArray, confirmCB?: (value: any) => void): formGenerator.GeneratedForm {\n        if (input_configs.length < 1) {\n            throw new Error(\"UserInput: GenerateInputs requires at least one input.\");\n        }\n        if (!confirmCB) {\n            let inputs_missing_cb = input_configs.filter(input => !input.onChange);\n            if (inputs_missing_cb.length > 0) {\n                throw new Error(\"UserInput: GenerateInputs without a confirmCB requires every input to specify a onChange callback.\");\n            }\n        } else {\n            let confirm_buttons = input_configs.some(input => input.type === \"confirm\");\n            if (!confirm_buttons) {\n                throw new Error(\"UserInput: GenerateInputs with a confirmCB is required to have at least one input of type 'confirm'.\");\n            }\n        }\n        let invalid_inputs = input_configs.some((input) => {\n            return (input.type !== \"confirm\" && input.type !== \"button\") && input.hasOwnProperty(\"default_value\") === false;\n        });\n        if (invalid_inputs) {\n            throw new Error(\"UserInput: Every input that is not a 'button' or 'confirm' must be configured with a 'default_value'.\");\n        }\n        invalid_inputs = input_configs.some(input => !valid_types.includes(input.type));\n        if (invalid_inputs) {\n            throw new Error(\"UserInput: Inputs must be configured with a valid 'type'. \" + valid_types.join(','));\n        }\n        invalid_inputs = input_configs.some(input => (input.type !== 'button' && input.type !== 'confirm') && !input.hasOwnProperty('key'));\n        if (invalid_inputs) {\n            throw new Error(\"UserInput: Inputs that are not type 'button' or 'confirm' must be configured with a 'key' property. \");\n        }\n        return formGenerator.getInputForm(default_components, custom_components, input_configs, confirmCB);\n    }\n}\n\nexport default InputHOC;\n"]}