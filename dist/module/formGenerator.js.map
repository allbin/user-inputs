{"version":3,"sources":["../src/module/formGenerator.tsx"],"names":[],"mappings":"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","file":"formGenerator.js","sourcesContent":["import * as React from 'react';\n\nimport { FormState, FormInputConfigArray, AnyInputConfig, AnyInputConfigWithValue } from '.';\n\nexport interface GeneratedForm {\n    component: typeof React.Component;\n    reset: () => void;\n    getForms: () => void;\n    getValues: () => any[];\n    setInputConfig: (updated_config: Partial<AnyInputConfig>) => void;\n}\n\nexport function getInputForm(default_components: ComponentObject, custom_components: ComponentObject, input_configs: FormInputConfigArray, cb?: (values: any) => void): GeneratedForm {\n    let mounted_forms: InputWrapper[] = [];\n\n    class InputWrapper extends React.Component<any, FormState> {\n        confirmCB: ((values: any) => void) | null;\n        input_components: ComponentObject;\n\n        constructor(props: any) {\n            super(props);\n\n            let values: { [key: string]: any; } = {};\n            input_configs.forEach((input) => {\n                if (input.type === \"multi_select\") {\n                    let selected_options = input.options.filter(option => input.default_value.includes(option.value));\n                    if (selected_options.length !== input.default_value.length) {\n                        throw new Error(\"UserInput: Default values for multiselect not present in options.\");\n                    }\n                    values[input.key] = selected_options;\n                } else if (input.type === \"select\") {\n                    let selected_option = input.options.find(option => input.default_value === option.value);\n                    if (!selected_option) {\n                        throw new Error(\"UserInput: Default value for select not present in options.\");\n                    }\n                    values[input.key] = selected_option;\n                } else {\n                    values[input.key] = input.default_value;\n                }\n            });\n\n            this.state = {\n                values: values,\n                inputs: input_configs,\n                tag: null,\n            };\n            this.confirmCB = cb || null;\n\n            this.input_components = {\n                text: default_components.text,\n                textarea: default_components.textarea,\n                grid: default_components.grid,\n                bool: default_components.bool,\n                multi_select: default_components.multi_select,\n                select: default_components.select,\n                button: default_components.button,\n                confirm: default_components.button,\n                tri_state: default_components.tri_state\n            };\n        }\n\n        componentDidMount() {\n            mounted_forms.push(this);\n        }\n\n        componentWillUnmount() {\n            let mount_index = mounted_forms.findIndex(form => form === this);\n            mounted_forms.splice(mount_index, 1);\n        }\n\n        setConfig(input_config: AnyInputConfigWithValue) {\n            let inputs = this.state.inputs;\n            let input_index = inputs.findIndex(input => input.key === input_config.key);\n            if (input_index < 0) {\n                throw new Error(\"UserInput: Key not found in existing inputs. Key must match an input created with 'generateForm()'.\");\n            }\n            let values = this.state.values;\n            if (input_config.hasOwnProperty(\"value\")) {\n                if (input_config.type === \"multi_select\") {\n                    let selected_options = input_config.options.filter(option => input_config.value.includes(option.value));\n                    if (selected_options.length !== input_config.value.length) {\n                        throw new Error(\"UserInput: Values for multiselect not present in options.\");\n                    }\n                    values[input_config.key] = selected_options;\n                } else if (input_config.type === \"select\") {\n                    let selected_option = input_config.options.find(option => input_config.value === option.value);\n                    if (!selected_option) {\n                        throw new Error(\"UserInput: Value for select not present in options.\");\n                    }\n                    values[input_config.key] = selected_option;\n                } else {\n                    values[input_config.key] = input_config.value;\n                }\n            }\n            inputs[input_index] = Object.assign({}, inputs[input_index], input_config);\n            this.setState({\n                inputs: inputs,\n                values: values\n            });\n        }\n\n        getValues() {\n            let values = Object.assign({}, this.state.values);\n            this.state.inputs.forEach((input) => {\n                if ((input.type === \"text\" || input.type === \"textarea\") && (!input.hasOwnProperty(\"trim\") || input.trim === true)) {\n                    if (typeof values[input.key] === \"string\") {\n                        values[input.key] = values[input.key].trim();\n                    }\n                }\n                if (input.type === \"select\") {\n                    values[input.key] = values[input.key].value;\n                }\n                if (input.type === \"multi_select\") {\n                    values[input.key] = values[input.key].map((option: MultiSelectOption) => option.value);\n                }\n            });\n            return values;\n        }\n\n        resetValues() {\n            let default_values = input_configs.map(input => input.default_value);\n            this.setState({ values: default_values });\n        }\n\n        userConfirmedCB() {\n            let values = Object.assign({}, this.state.values);\n            this.state.inputs.forEach((input) => {\n                if ((input.type === \"text\" || input.type === \"textarea\") && (!input.hasOwnProperty(\"trim\") || input.trim === true)) {\n                    if (typeof values[input.key] === \"string\") {\n                        values[input.key] = values[input.key].trim();\n                    }\n                }\n                if (input.type === \"select\") {\n                    values[input.key] = values[input.key].value;\n                }\n                if (input.type === \"multi_select\") {\n                    values[input.key] = values[input.key].map((option: MultiSelectOption) => option.value);\n                }\n            });\n            if (this.confirmCB) {\n                this.confirmCB(values);\n                this.confirmCB = null;\n            }\n        }\n\n        inputValueChangeCB(key: string, value: any) {\n            let values = Object.assign({}, this.state.values);\n            values[key] = value;\n            this.setState({\n                values: values\n            });\n        }\n\n        renderInputs() {\n            return this.state.inputs.map((input_request, index) => {\n                let InputComponent = this.input_components[input_request.type] as typeof React.Component;\n                if (custom_components && custom_components.hasOwnProperty(input_request.type)) {\n                    InputComponent = custom_components[input_request.type] as typeof React.Component;\n                }\n                let key = input_request.key || \"input_\" + index;\n                if (input_request.type === \"confirm\" || input_request.type === \"button\") {\n                    return <InputComponent\n                        key={key}\n                        config={input_request}\n                        value={this.state.values[key]}\n                        onClick={() => {\n                            this.userConfirmedCB();\n                        }}\n                    />;\n                }\n                return <InputComponent\n                    key={key}\n                    config={input_request}\n                    value={this.state.values[key]}\n                    onChange={(value: any) => {\n                        this.inputValueChangeCB(key, value);\n                    }}\n                />;\n            });\n        }\n\n        render() {\n            return (\n                <div>\n                    { this.renderInputs() }\n                </div>\n            );\n        }\n    }\n\n    return {\n        component: InputWrapper,\n        reset: () => {\n            mounted_forms.forEach((form) => {\n                form.resetValues();\n            });\n        },\n        getForms: () => {\n            return mounted_forms;\n        },\n        getValues: () => {\n            return mounted_forms.map((form) => {\n                return {\n                    values: form.getValues(),\n                    ref: form\n                };\n            });\n        },\n        setInputConfig: (updated_config: Partial<AnyInputConfigWithValue>) => {\n            if (updated_config.hasOwnProperty(\"key\") === false) {\n                throw new Error(\"UserInput: input_config must contain 'key' property.\");\n            }\n            let inputs = input_configs;\n            let input_index = inputs.findIndex(input => input.key === updated_config.key);\n            if (input_index < 0) {\n                throw new Error(\"UserInput: Key not found in existing inputs. Key must match an input created with 'generateForm()'.\");\n            }\n            inputs[input_index] = Object.assign({}, inputs[input_index], updated_config);\n\n            mounted_forms.forEach((form) => {\n                form.setConfig(inputs[input_index]);\n            });\n        }\n    };\n}"]}