{"version":3,"sources":["../src/module/formGenerator.tsx"],"names":[],"mappings":"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","file":"formGenerator.js","sourcesContent":["import * as React from 'react';\nimport { LooseObject } from '.';\n\nimport { valid_types, input_imports, FormInputConfigArray, AnyInputConfig, AnyInputConfigWithValue } from '.';\n\ninterface FormState {\n    values: {\n        [key: string]: any\n    };\n    inputs: FormInputConfigArray;\n    tag: string | null;\n    confirm_clicked: boolean;\n}\n\nexport interface GeneratedForm {\n    component: typeof React.Component;\n    reset: () => void;\n    resetConfirmClick: () => void;\n    getValues: () => LooseObject;\n    setInputConfig: (updated_config: Partial<AnyInputConfig>) => void;\n}\n\nexport default function getInputForm(input_configs: FormInputConfigArray, cb?: (values: any) => void): GeneratedForm {\n    let mounted_form: InputWrapper | null;\n\n    class InputWrapper extends React.Component<any, FormState> {\n        confirmCB: ((values: any) => void) | null;\n\n        constructor(props: any) {\n            super(props);\n\n            let values: LooseObject = {};\n            input_configs.forEach((input_config) => {\n                values[input_config.key] = input_imports[input_config.type].convertExternalToInternalValue(input_config, input_config.default_value);\n            });\n            this.state = {\n                values: values,\n                inputs: input_configs,\n                tag: null,\n                confirm_clicked: (cb) ? false : true\n            };\n            this.confirmCB = cb || null;\n        }\n\n        componentDidMount() {\n            mounted_form = this;\n        }\n\n        componentWillUnmount() {\n            if (mounted_form === this) {\n                //If another instance of this form has already been mounted\n                //the mounted_form will have changed. Check before resetting it.\n                mounted_form = null;\n            }\n        }\n\n        setConfig(input_config: AnyInputConfigWithValue) {\n            let inputs = this.state.inputs;\n            let input_index = inputs.findIndex(input => input.key === input_config.key);\n            if (input_index < 0) {\n                throw new Error(\"UserInput: Key not found in existing inputs.\");\n            }\n            let values = this.state.values;\n            if (input_config.hasOwnProperty(\"value\")) {\n                values[input_config.key] = input_imports[input_config.type].convertExternalToInternalValue(input_config, input_config.default_value);\n            }\n            inputs[input_index] = Object.assign({}, inputs[input_index], input_config);\n            this.setState({\n                inputs: inputs,\n                values: values\n            });\n        }\n\n        getValues() {\n            let values: LooseObject = {};\n            this.state.inputs.forEach((input) => {\n                if (input.type === \"button\" || input.type === \"confirm\") {\n                    return;\n                } else {\n                    return values[input.key] = input_imports[input.type].convertInternalToExternalValue(input, this.state.values[input.key]);\n                }\n            });\n            return values;\n        }\n\n        resetValues() {\n            let values: LooseObject = {};\n            input_configs.forEach((input_config) => {\n                values[input_config.key] = input_imports[input_config.type].convertExternalToInternalValue(input_config, input_config.default_value);\n            });\n            this.setState({\n                values: values,\n                confirm_clicked: false\n            });\n        }\n\n        resetConfirmClick() {\n            this.setState({\n                confirm_clicked: false\n            });\n        }\n\n        userConfirmedCB() {\n            this.setState({ confirm_clicked: true });\n            if (this.confirmCB && this.isValid()) {\n                this.confirmCB(this.getValues());\n            }\n        }\n\n        inputValueChangeCB(key: string, value: any, cb?: () => void) {\n            let values = Object.assign({}, this.state.values);\n            values[key] = value;\n            this.setState({\n                values: values\n            }, cb);\n        }\n\n        isValid() {\n            return !this.state.inputs.some((input_config) => {\n                let valid_error = input_imports[input_config.type].validate(input_config, this.state.values[input_config.key]);\n                return valid_error !== null;\n            });\n        }\n\n        renderInputs() {\n            return this.state.inputs.map((input_request, index) => {\n                let InputComponent = input_imports[input_request.type].Input as typeof React.Component;\n                let key = input_request.key || \"input_\" + index;\n                if (input_request.type === \"confirm\") {\n                    return <InputComponent\n                        key={key}\n                        config={input_request}\n                        value={this.state.values[key]}\n                        onClick={() => { this.userConfirmedCB(); }}\n                    />;\n                } else if (input_request.type === \"button\") {\n                    return <InputComponent\n                        key={key}\n                        config={input_request}\n                        value={this.state.values[key]}\n                        onClick={() => {\n                            if (input_request.onClick) {\n                                input_request.onClick();\n                            }\n                        }}\n                    />;\n                }\n                return <InputComponent\n                    key={key}\n                    config={input_request}\n                    value={this.state.values[key]}\n                    display_error_message={this.state.confirm_clicked}\n                    onChange={(value: any, cb: () => void) => {\n                        this.inputValueChangeCB(key, value, cb);\n                    }}\n                />;\n            });\n        }\n\n        render() {\n            return (\n                <div>\n                    { this.renderInputs() }\n                </div>\n            );\n        }\n    }\n\n    return {\n        component: InputWrapper,\n        reset: () => {\n            if (mounted_form) {\n                mounted_form.resetValues();\n            }\n        },\n        resetConfirmClick: () => {\n            if (mounted_form) {\n                mounted_form.resetConfirmClick();\n            }\n        },\n        getValues: (): LooseObject => {\n            if (!mounted_form) {\n                return {};\n            }\n            return mounted_form.getValues();\n        },\n        setInputConfig: (updated_config: Partial<AnyInputConfigWithValue>) => {\n            if (updated_config.hasOwnProperty(\"key\") === false) {\n                throw new Error(\"UserInput: input_config must contain 'key' property.\");\n            }\n            let inputs = input_configs;\n            let input_index = input_configs.findIndex(input => input.key === updated_config.key);\n            if (input_index < 0) {\n                throw new Error(\"UserInput: Key not found in existing inputs.\");\n            }\n            input_configs[input_index] = Object.assign({}, input_configs[input_index], updated_config);\n            if (mounted_form) {\n                mounted_form.setConfig(inputs[input_index]);\n            }\n        }\n    };\n}\n\nexport function validateFormGeneratorInputs(input_configs: FormInputConfigArray, confirmCB?: (value: any) => void): void {\n    if (input_configs.length < 1) {\n        throw new Error(\"UserInput: GenerateForm requires at least one input.\");\n    }\n    if (!confirmCB) {\n        let inputs_missing_cb = input_configs.filter(input => !input.onValueChange);\n        if (inputs_missing_cb.length > 0) {\n            throw new Error(\"UserInput: GenerateForm without a confirmCB requires every input to specify a onValueChange callback.\");\n        }\n    } else {\n        let confirm_buttons = input_configs.some(input => input.type === \"confirm\");\n        if (!confirm_buttons) {\n            throw new Error(\"UserInput: GenerateForm with a confirmCB is required to have at least one input of type 'confirm'.\");\n        }\n    }\n\n\n    //Check that default_value is set.\n    let invalid_inputs = input_configs.some((input) => {\n        return (input.type !== \"confirm\" && input.type !== \"button\") && input.hasOwnProperty(\"default_value\") === false;\n    });\n    if (invalid_inputs) {\n        throw new Error(\"UserInput: Every input that is not a 'button' or 'confirm' must be configured with a 'default_value'.\");\n    }\n\n\n    //Check that each input has a valid type.\n    invalid_inputs = input_configs.some(input => !valid_types.includes(input.type));\n    if (invalid_inputs) {\n        throw new Error(\"UserInput: Inputs must be configured with a valid 'type'. \" + valid_types.join(','));\n    }\n\n\n    //Check that each input has a key property.\n    invalid_inputs = input_configs.some(input => (input.type !== 'button' && input.type !== 'confirm') && !input.hasOwnProperty('key'));\n    if (invalid_inputs) {\n        throw new Error(\"UserInput: Inputs that are not type 'button' or 'confirm' must be configured with a 'key' property. \");\n    }\n\n\n    //Duplicate key check.\n    let duplicate_keys: Set<string> = new Set();\n    invalid_inputs = input_configs.some((input) => {\n        if (input.type === 'button' || input.type === 'confirm') {\n            return false;\n        }\n        return duplicate_keys.size === duplicate_keys.add(input.key).size;\n    });\n\n\n    //Run each input type's own validation function.\n    let errors: string[] = [];\n    input_configs.forEach((input) => {\n        let valid = input_imports[input.type].validateConfig(input);\n        if (valid) { errors.push(valid); }\n    });\n    if (errors.length > 0) {\n        throw new Error(errors.join('\\n'));\n    }\n}"]}