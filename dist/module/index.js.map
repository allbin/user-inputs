{"version":3,"sources":["../src/module/index.tsx"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as React from 'react';\nimport oh from 'output-helpers';\nimport translations from './translations';\n\nimport * as formGenerator from './formGenerator';\n\nimport PromptModal from './PromptModal';\nimport TextInput, { TextInputConfig } from './input_components/TextInput';\nimport BoolInput, { BoolInputConfig } from './input_components/BoolInput';\nimport GridInput, { GridInputConfig } from './input_components/GridInput';\nimport SelectInput, { SelectInputConfig } from './input_components/SelectInput';\nimport MultiSelectInput, { MultiSelectInputConfig } from './input_components/MultiSelectInput';\nimport TextareaInput, { TextareaInputConfig } from './input_components/TextareaInput';\nimport TriStateInput, { TriStateInputConfig } from './input_components/TriStateInput';\nimport Button, { ButtonConfig } from './input_components/Button';\n\n\nlet valid_types = [\"bool\", \"button\", \"confirm\", \"date\", \"grid\", \"number\", \"multi_select\", \"select\", \"text\", \"textarea\", \"tri_state\"];\n\n\n//Add translations of this repo to OH. Prefixed with \"user_input_hoc_\".\noh.addDictionary(translations);\n\n\nexport type ComponentLib = {\n    [key in InputType]: typeof React.Component;\n};\n\nexport interface HOCProps {\n    /** Opens a prompt using supplied config which has a single Confirm button. */\n    alert: (prompt_request: UserInputPromptConfig, confirmCB?: (values: LooseObject) => void) => void;\n    /** Closes any open prompt without triggering any Confirm or Cancel callbacks. */\n    cancel: () => void;\n    /** Opens a prompt using supplied config which has a Confirm and Cancel button. */\n    confirm: (prompt_request: UserInputPromptConfig, confirmCB?: (values: LooseObject) => void, cancelCB?: () => void) => void;\n    /** Returns current tag. If no tag has been set returns null. */\n    getTag: () => string | null;\n    /** Returns true if a prompt is currently showing to the user. Otherwise false. */\n    isOpen: () => boolean;\n    /** Modify the config a currently open prompt. */\n    setConfig: (input_config: AnyInputConfigWithValue) => void;\n    /** Set tag. */\n    setTag: (tag: string) => void;\n}\n\nexport type ValueInterface = {\n    value?: any;\n};\nexport type AnyInputConfig = ButtonConfig|TextInputConfig|BoolInputConfig|GridInputConfig|SelectInputConfig|MultiSelectInputConfig|TextareaInputConfig|TriStateInputConfig;\nexport type AnyInputConfigWithValue = AnyInputConfig & ValueInterface;\nexport type PromptInputConfigArray = Array<TextInputConfig|BoolInputConfig|GridInputConfig|SelectInputConfig|MultiSelectInputConfig|TextareaInputConfig|TriStateInputConfig>;\nexport type FormInputConfigArray = Array<ButtonConfig|TextInputConfig|BoolInputConfig|GridInputConfig|SelectInputConfig|MultiSelectInputConfig|TextareaInputConfig|TriStateInputConfig>;\n\ninterface PromptRequest {\n    inputs: PromptInputConfigArray;\n    props?: {\n        [key: string]: any\n    };\n}\n\nexport interface PromptState {\n    show: boolean;\n    modal_props: any;\n    values: {\n        [key: string]: any\n    };\n    inputs: PromptInputConfigArray;\n    prompt_request: PromptRequest | null;\n    tag: string | null;\n}\nexport interface FormState {\n    values: {\n        [key: string]: any\n    };\n    inputs: FormInputConfigArray;\n    tag: string | null;\n}\nexport interface UserInputPromptConfig {\n    /** Props sent to the PromptModal component. */\n    prompt_props: {\n        title: string;\n        message?: string;\n        classes?: string;\n        confirmCB?: () => void;\n        cancelCB?: () => void;\n    };\n    inputs: PromptInputConfigArray;\n}\n\nexport interface UserInputProps {\n    userInputs: HOCProps;\n}\n\nlet default_components: ComponentLib = {\n    text: TextInput,\n    bool: BoolInput,\n    grid: GridInput,\n    button: Button,\n    select: SelectInput,\n    multi_select: MultiSelectInput,\n    textarea: TextareaInput,\n    tri_state: TriStateInput,\n    confirm: Button,\n    number: TextInput,\n    date: TextInput\n};\nlet custom_components: Partial<ComponentLib> = {};\n\n\n\nexport function renderInputs(inputs: FormInputConfigArray, values: LooseObject, inputValueChangeCB: (key: string, value: any) => void, confirmClickCB?: (() => void)) {\n    return inputs.map((input_config) => {\n        const key = input_config.key;\n        const InputComp: typeof React.Component = custom_components[input_config.type] || default_components[input_config.type];\n\n        if (input_config.type === \"confirm\") {\n            let suppliedOnClickCB: (() => void) | undefined;\n            if (input_config.hasOwnProperty(\"onClick\")) {\n                suppliedOnClickCB = input_config.onClick;\n            }\n            return <InputComp\n                key={key}\n                config={input_config}\n                value={values[key]}\n                onClick={() => {\n                    if (confirmClickCB) {\n                        confirmClickCB();\n                    }\n                    if (suppliedOnClickCB) {\n                        suppliedOnClickCB();\n                    }\n                }}\n            />;\n        }\n        return <InputComp\n            key={key}\n            config={input_config}\n            value={values[key]}\n            onChange={(value: any) => {\n                inputValueChangeCB(key, value);\n            }}\n        />;\n    });\n}\n\nexport function renderPrompt(show: boolean, inputs: PromptInputConfigArray, values: LooseObject, modal_props: LooseObject, valueChangeCB: (key: string, value: any) => void, userConfirmedCB: (values: LooseObject) => void, userCancelledCB: () => void) {\n    if (show !== true) {\n        return null;\n    }\n    let Modal: typeof React.Component = PromptModal;\n\n    return (\n        <Modal\n            confirmCB={(values: LooseObject) => { userConfirmedCB(values); }}\n            cancelCB={() => { userCancelledCB(); }}\n            renderInputs={() => { return renderInputs(inputs, values, valueChangeCB); }}\n            {...modal_props}\n        />\n    );\n}\n\n\n\nexport function InputHOC<P extends UserInputProps>(WrappedComponent: React.ComponentType<P>): React.ComponentClass<Omit<P, keyof UserInputProps>> {\n    class Prompt extends React.Component<P, PromptState> {\n        exports: HOCProps = {\n            confirm: (prompt_request, confirmCB, cancelCB) => {\n                if (prompt_request.hasOwnProperty(\"inputs\") === false) {\n                    prompt_request.inputs = [];\n                }\n                if (prompt_request.hasOwnProperty(\"prompt_props\") === false) {\n                    throw new Error(\"prompt_props are required in config for alert.\");\n                }\n                if (!prompt_request.prompt_props.title) {\n                    throw new Error(\"prompt_props requires 'title' property.\");\n                }\n                let default_props = {\n                    show_cancel_btn: true,\n                    show_confirm_btn: true\n                };\n                prompt_request.prompt_props = Object.assign(\n                    {},\n                    default_props,\n                    prompt_request.prompt_props\n                );\n                this.initPrompt(prompt_request, confirmCB, cancelCB);\n            },\n            alert: (prompt_request, confirmCB) => {\n                if (prompt_request.hasOwnProperty(\"inputs\") === false) {\n                    prompt_request.inputs = [];\n                }\n                if (prompt_request.hasOwnProperty(\"prompt_props\") === false) {\n                    throw new Error(\"prompt_props are required in config for alert.\");\n                }\n                if (!prompt_request.prompt_props.title) {\n                    throw new Error(\"prompt_props requires 'title' property.\");\n                }\n                let default_props = {\n                    show_cancel_btn: false,\n                    show_confirm_btn: true\n                };\n                prompt_request.prompt_props = Object.assign(\n                    {},\n                    default_props,\n                    prompt_request.prompt_props\n                );\n                this.initPrompt(prompt_request, confirmCB);\n            },\n            cancel: () => {\n                this.resetPrompt();\n            },\n            isOpen: () => {\n                return this.state.show;\n            },\n            setTag: (tag) => {\n                this.setState({\n                    tag: tag\n                });\n            },\n            getTag: () => {\n                return this.state.tag;\n            },\n            setConfig: (input_config: AnyInputConfigWithValue) => {\n                if (input_config.hasOwnProperty(\"key\") === false) {\n                    throw new Error(\"UserInput: input_config must contain 'key' property.\");\n                }\n                let inputs = this.state.inputs;\n                let input_index = inputs.findIndex(input => input.key === input_config.key);\n                if (input_index < 0) {\n                    throw new Error(\"UserInput: Key not found in existing inputs. Key must match an input created with 'promp()'.\");\n                }\n                let values = this.state.values;\n                if (input_config.hasOwnProperty(\"value\")) {\n                    if (input_config.type === \"multi_select\") {\n                        let selected_options = input_config.options.filter(option => input_config.value.includes(option.value));\n                        if (selected_options.length !== input_config.value.length) {\n                            throw new Error(\"UserInput: Values for multiselect not present in options.\");\n                        }\n                        values[input_config.key] = selected_options;\n                    } else if (input_config.type === \"select\") {\n                        let selected_option = input_config.options.find(option => input_config.value === option.value);\n                        if (!selected_option) {\n                            throw new Error(\"UserInput: Value for select not present in options.\");\n                        }\n                        values[input_config.key] = selected_option;\n                    } else {\n                        values[input_config.key] = input_config.value;\n                    }\n                }\n                inputs[input_index] = Object.assign({}, inputs[input_index], input_config);\n                this.setState({\n                    inputs: inputs,\n                    values: values\n                });\n            }\n        };\n\n        confirmCB: any = null;\n        cancelCB: any = null;\n        input_components: ComponentObject = {\n            text: TextInput,\n            grid: GridInput,\n            bool: BoolInput,\n            select: SelectInput,\n            multi_select: MultiSelectInput,\n            textarea: TextareaInput,\n            tri_state: TriStateInput,\n            button: Button,\n            confirm: Button\n        };\n\n        constructor(props: any) {\n            super(props);\n\n            this.state = {\n                show: false,\n                modal_props: {},\n                values: {},\n                prompt_request: null,\n                tag: null,\n                inputs: []\n            };\n        }\n\n        initPrompt(prompt_request: UserInputPromptConfig, confirmCB?: (value: any) => void, cancelCB?: () => void) {\n            let inputs = prompt_request.inputs;\n            let props = prompt_request.prompt_props;\n            let invalid_inputs = inputs.some(input => input.hasOwnProperty(\"default_value\") === false);\n            if (invalid_inputs) {\n                throw new Error(\"UserInput: Inputs must be configured with a 'default_value'.\");\n            }\n            invalid_inputs = inputs.some(input => !this.input_components[input.type]);\n            if (invalid_inputs) {\n                throw new Error(\"UserInput: Inputs must be configured with a valid 'type'. \" + valid_types.join(','));\n            }\n            this.confirmCB = confirmCB || null;\n            this.cancelCB = cancelCB || null;\n            let values: { [key: string]: any; } = {};\n            inputs.forEach((input) => {\n                if (input.type === \"multi_select\") {\n                    let selected_options = input.options.filter(option => input.default_value.includes(option.value));\n                    if (selected_options.length !== input.default_value.length) {\n                        throw new Error(\"UserInput: Default values for multiselect not present in options.\");\n                    }\n                    values[input.key] = selected_options;\n                } else if (input.type === \"select\") {\n                    let selected_option = input.options.find(option => input.default_value === option.value);\n                    if (!selected_option) {\n                        throw new Error(\"UserInput: Default value for select not present in options.\");\n                    }\n                    values[input.key] = selected_option;\n                } else {\n                    values[input.key] = input.default_value;\n                }\n            });\n            this.setState({\n                show: true,\n                modal_props: props,\n                inputs: inputs,\n                values: values,\n                prompt_request: prompt_request\n            });\n        }\n\n        resetPrompt() {\n            this.confirmCB = null;\n            this.cancelCB = null;\n            this.setState({\n                show: false,\n                inputs: [],\n                values: [],\n                prompt_request: null,\n                tag: null\n            });\n        }\n\n        userConfirmedCB(values: LooseObject) {\n            //User clicked the confirm button.\n            if (this.confirmCB) {\n                this.confirmCB(values);\n            }\n            this.resetPrompt();\n        }\n        userCancelledCB() {\n            //User clicked the cancel button.\n            if (this.cancelCB) {\n                //Exec the cancelCB if one was supplied.\n                this.cancelCB();\n            }\n            this.resetPrompt();\n        }\n\n        inputValueChangeCB(key: string, value: any) {\n            let values = Object.assign({}, this.state.values);\n            values[key] = value;\n            this.setState({\n                values: values\n            });\n        }\n\n        render() {\n            return (<div>\n                <WrappedComponent userInputs={this.exports} {...this.props} />\n                {\n                    renderPrompt(\n                        this.state.show,\n                        this.state.inputs,\n                        this.state.values,\n                        this.state.modal_props,\n                        (key: string, value: any) => { this.inputValueChangeCB(key, value); },\n                        (values: LooseObject) => { this.userConfirmedCB(values); },\n                        () => { this.userCancelledCB(); }\n                    )\n                }\n            </div>);\n        }\n    }\n\n    return Prompt;\n}\n\n\nexport namespace InputHOC {\n    export function setCustomComponents(object_with_components: ComponentObject) {\n        custom_components = object_with_components;\n    }\n    export function generateForm(input_configs: FormInputConfigArray, confirmCB?: (value: any) => void): formGenerator.GeneratedForm {\n        if (input_configs.length < 1) {\n            throw new Error(\"UserInput: GenerateInputs requires at least one input.\");\n        }\n        if (!confirmCB) {\n            let inputs_missing_cb = input_configs.filter(input => !input.onChange);\n            if (inputs_missing_cb.length > 0) {\n                throw new Error(\"UserInput: GenerateInputs without a confirmCB requires every input to specify a onChange callback.\");\n            }\n        } else {\n            let confirm_buttons = input_configs.some(input => input.type === \"confirm\");\n            if (!confirm_buttons) {\n                throw new Error(\"UserInput: GenerateInputs with a confirmCB is required to have at least one input of type 'confirm'.\");\n            }\n        }\n        let invalid_inputs = input_configs.some((input) => {\n            return (input.type !== \"confirm\" && input.type !== \"button\") && input.hasOwnProperty(\"default_value\") === false;\n        });\n        if (invalid_inputs) {\n            throw new Error(\"UserInput: Every input that is not a 'button' or 'confirm' must be configured with a 'default_value'.\");\n        }\n        invalid_inputs = input_configs.some(input => !valid_types.includes(input.type));\n        if (invalid_inputs) {\n            throw new Error(\"UserInput: Inputs must be configured with a valid 'type'. \" + valid_types.join(','));\n        }\n        invalid_inputs = input_configs.some(input => (input.type !== 'button' && input.type !== 'confirm') && !input.hasOwnProperty('key'));\n        if (invalid_inputs) {\n            throw new Error(\"UserInput: Inputs that are not type 'button' or 'confirm' must be configured with a 'key' property. \");\n        }\n        return formGenerator.getInputForm(default_components, custom_components, input_configs, confirmCB);\n    }\n}\n\nexport default InputHOC;\n"]}