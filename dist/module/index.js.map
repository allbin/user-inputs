{"version":3,"sources":["../src/module/index.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAChC,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAE1C,OAAO,aAAa,EAAE,EAAE,2BAA2B,EAAE,MAAM,iBAAiB,CAAC;AAE7E,OAAO,WAAW,MAAM,eAAe,CAAC;AACxC,OAAO,KAAK,UAAU,MAAM,8BAA8B,CAAC;AAC3D,OAAO,KAAK,UAAU,MAAM,8BAA8B,CAAC;AAC3D,OAAO,KAAK,UAAU,MAAM,8BAA8B,CAAC;AAC3D,OAAO,KAAK,YAAY,MAAM,gCAAgC,CAAC;AAC/D,OAAO,KAAK,iBAAiB,MAAM,qCAAqC,CAAC;AACzE,OAAO,KAAK,cAAc,MAAM,kCAAkC,CAAC;AACnE,OAAO,KAAK,cAAc,MAAM,kCAAkC,CAAC;AACnE,OAAO,KAAK,aAAa,MAAM,iCAAiC,CAAC;AACjE,OAAO,KAAK,YAAY,MAAM,2BAA2B,CAAC;AAG1D,MAAM,CAAC,IAAI,WAAW,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;AAG7I,mEAAmE;AACnE,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;AAoH/B,MAAM,CAAC,MAAM,aAAa,GAAoB;IAC1C,IAAI,EAAE,UAAU;IAChB,IAAI,EAAE,UAAU;IAChB,IAAI,EAAE,UAAU;IAChB,MAAM,EAAE,YAAY;IACpB,MAAM,EAAE,YAAY;IACpB,YAAY,EAAE,iBAAiB;IAC/B,QAAQ,EAAE,cAAc;IACxB,SAAS,EAAE,cAAc;IACzB,OAAO,EAAE,YAAY;IACrB,OAAO,EAAE,aAAa;IACtB,IAAI,EAAE,UAAU;CACnB,CAAC;AAKF,MAAM,UAAU,YAAY,CAAC,IAA0B,EAAE,aAAkC,EAAE,eAA2B;IACpH,IAAI,CAAC,IAAI,IAAI,CAAC,aAAa,EAAE;QACzB,OAAO,IAAI,CAAC;KACf;IAED,OAAO,CACH,oBAAC,WAAW,IACR,QAAQ,EAAE,GAAG,EAAE,GAAG,eAAe,EAAE,CAAC,CAAC,CAAC,EACtC,MAAM,EAAE,aAAa,EACrB,IAAI,EAAE,IAAI,GACZ,CACL,CAAC;AACN,CAAC;AAID,MAAM,UAAU,QAAQ,CAA2B,gBAAwC;IACvF,MAAM,MAAO,SAAQ,KAAK,CAAC,SAAyB;QAgEhD,YAAY,KAAU;YAClB,KAAK,CAAC,KAAK,CAAC,CAAC;YAhEjB,YAAO,GAAa;gBAChB,OAAO,EAAE,CAAC,mBAAmB,EAAE,SAAS,EAAE,QAAQ,EAAE,EAAE;oBAClD,IAAI,mBAAmB,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,KAAK,EAAE;wBACxD,mBAAmB,CAAC,MAAM,GAAG,EAAE,CAAC;qBACnC;oBACD,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE;wBAC5B,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;qBAC9D;oBACD,IAAI,gBAAgB,GAAG;wBACnB,eAAe,EAAE,IAAI;wBACrB,gBAAgB,EAAE,IAAI;qBACzB,CAAC;oBACF,IAAI,cAAc,GAAiB,MAAM,CAAC,MAAM,CAC5C,EAAE,EACF,mBAAmB,EACnB,gBAAgB,CACnB,CAAC;oBACF,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;gBACzD,CAAC;gBACD,KAAK,EAAE,CAAC,mBAAmB,EAAE,SAAS,EAAE,EAAE;oBACtC,IAAI,mBAAmB,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,KAAK,EAAE;wBACxD,mBAAmB,CAAC,MAAM,GAAG,EAAE,CAAC;qBACnC;oBACD,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE;wBAC5B,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;qBAC9D;oBACD,IAAI,gBAAgB,GAAG;wBACnB,eAAe,EAAE,KAAK;wBACtB,gBAAgB,EAAE,IAAI;qBACzB,CAAC;oBACF,IAAI,cAAc,GAAiB,MAAM,CAAC,MAAM,CAC5C,EAAE,EACF,mBAAmB,EACnB,gBAAgB,CACnB,CAAC;oBACF,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;gBAC/C,CAAC;gBACD,MAAM,EAAE,GAAG,EAAE;oBACT,IAAI,CAAC,WAAW,EAAE,CAAC;gBACvB,CAAC;gBACD,MAAM,EAAE,GAAG,EAAE;oBACT,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,KAAK,IAAI,CAAC;gBAC7C,CAAC;gBACD,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE;oBACZ,IAAI,CAAC,QAAQ,CAAC;wBACV,GAAG,EAAE,GAAG;qBACX,CAAC,CAAC;gBACP,CAAC;gBACD,MAAM,EAAE,GAAG,EAAE;oBACT,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;gBAC1B,CAAC;gBACD,SAAS,EAAE,CAAC,YAAqC,EAAE,EAAE;oBACjD,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;wBACjB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;qBAChD;yBAAM;wBACH,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;qBAC1E;gBACL,CAAC;aACJ,CAAC;YAEF,cAAS,GAAQ,IAAI,CAAC;YACtB,aAAQ,GAAQ,IAAI,CAAC;YAKjB,IAAI,CAAC,KAAK,GAAG;gBACT,aAAa,EAAE,IAAI;gBACnB,IAAI,EAAE,IAAI;gBACV,GAAG,EAAE,IAAI;aACZ,CAAC;QACN,CAAC;QAED,UAAU,CAAC,aAA2B,EAAE,SAAgC,EAAE,QAAqB;YAC3F,IAAI,MAAM,GAAG,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;YACvC,IAAI,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,cAAc,CAAC,eAAe,CAAC,KAAK,KAAK,CAAC,CAAC;YAC3F,IAAI,cAAc,EAAE;gBAChB,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;aACnF;YACD,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YAClE,IAAI,cAAc,EAAE;gBAChB,MAAM,IAAI,KAAK,CAAC,4DAA4D,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;aACzG;YACD,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,IAAI,CAAC;YACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,IAAI,CAAC;YAEjC,IAAI,aAAa,CAAC,gBAAgB,EAAE;gBAChC,IAAI,cAAc,GAA8B;oBAC5C,KAAK,EAAE,aAAa,CAAC,oBAAoB,IAAI,EAAE,CAAC,SAAS,CAAC,oBAAoB,CAAC;oBAC/E,GAAG,EAAE,SAAS;oBACd,IAAI,EAAE,SAAS;oBACf,aAAa,EAAE,EAAE;oBACjB,MAAM,EAAE,IAAI;oBACZ,GAAG,EAAE,IAAI;iBACZ,CAAC;gBACF,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;aAC/B;YAED,IAAI,aAAa,CAAC,eAAe,EAAE;gBAC/B,IAAI,aAAa,GAA8B;oBAC3C,KAAK,EAAE,aAAa,CAAC,oBAAoB,IAAI,EAAE,CAAC,SAAS,CAAC,mBAAmB,CAAC;oBAC9E,GAAG,EAAE,QAAQ;oBACb,IAAI,EAAE,QAAQ;oBACd,aAAa,EAAE,EAAE;oBACjB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE;oBACrC,MAAM,EAAE,IAAI;oBACZ,GAAG,EAAE,IAAI;iBACZ,CAAC;gBACF,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC9B;YAED,IAAI,CAAC,QAAQ,CAAC;gBACV,IAAI,EAAE,aAAa,CAAC,MAAM,EAAE,CAAC,MAAmB,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;gBAClF,aAAa,EAAE,aAAa;aAC/B,CAAC,CAAC;QACP,CAAC;QAED,WAAW;YACP,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,QAAQ,CAAC;gBACV,IAAI,EAAE,IAAI;gBACV,aAAa,EAAE,IAAI;gBACnB,GAAG,EAAE,IAAI;aACZ,CAAC,CAAC;QACP,CAAC;QAED,eAAe,CAAC,MAAmB;YAC/B,kCAAkC;YAClC,IAAI,IAAI,CAAC,SAAS,EAAE;gBAChB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;aAC1B;YACD,IAAI,CAAC,WAAW,EAAE,CAAC;QACvB,CAAC;QACD,eAAe;YACX,iCAAiC;YACjC,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACf,wCAAwC;gBACxC,IAAI,CAAC,QAAQ,EAAE,CAAC;aACnB;YACD,IAAI,CAAC,WAAW,EAAE,CAAC;QACvB,CAAC;QAED,MAAM;YACF,OAAO,CAAC;gBACJ,oBAAC,gBAAgB,kBAAC,UAAU,EAAE,IAAI,CAAC,OAAO,IAAM,IAAI,CAAC,KAAK,EAAI;gBAE1D,YAAY,CACR,IAAI,CAAC,KAAK,CAAC,IAAI,EACf,IAAI,CAAC,KAAK,CAAC,aAAa,EACxB,GAAG,EAAE,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,CACpC,CAEH,CAAC,CAAC;QACZ,CAAC;KACJ;IAED,OAAO,MAAM,CAAC;AAClB,CAAC;AAGD,WAAiB,QAAQ;IACrB,SAAgB,YAAY,CAAC,aAAmC,EAAE,SAAgC;QAC9F,2BAA2B,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;QACtD,OAAO,aAAa,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;IACnD,CAAC;IAHe,qBAAY,eAG3B,CAAA;AACL,CAAC,EALgB,QAAQ,KAAR,QAAQ,QAKxB;AAED,eAAe,QAAQ,CAAC","file":"index.js","sourcesContent":["import * as React from 'react';\nimport oh from 'output-helpers';\nimport translations from './translations';\n\nimport formGenerator, { validateFormGeneratorInputs } from './formGenerator';\n\nimport PromptModal from './PromptModal';\nimport * as TextImport from './input_components/TextInput';\nimport * as BoolImport from './input_components/BoolInput';\nimport * as GridImport from './input_components/GridInput';\nimport * as SelectImport from './input_components/SelectInput';\nimport * as MultiSelectImport from './input_components/MultiSelectInput';\nimport * as TextareaImport from './input_components/TextareaInput';\nimport * as TriStateImport from './input_components/TriStateInput';\nimport * as NumericImport from './input_components/NumericInput';\nimport * as ButtonImport from './input_components/Button';\n\n\nexport let valid_types = [\"bool\", \"button\", \"confirm\", \"date\", \"grid\", \"numeric\", \"multi_select\", \"select\", \"text\", \"textarea\", \"tri_state\"];\n\n\n//Add translations of this repo to OH. Prefixed with \"user_input_\".\noh.addDictionary(translations);\n\n\n\n\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\nexport interface LooseObject {\n    [key: string]: any;\n}\nexport interface SelectOption {\n    value: string | number;\n    label: string;\n}\nexport interface TriStateInputOption {\n    value: string | number;\n    label: string;\n}\nexport interface MultiSelectOption {\n    value: string | number;\n    label: string;\n}\nexport interface GridSelectOption {\n    value: string | number;\n    label: string;\n    color?: string;\n}\n\nexport interface GeneratedForm {\n    component: typeof React.Component;\n    reset: () => void;\n    resetConfirmClick: () => void;\n    getValues: () => LooseObject;\n    setInputConfig: (updated_config: AnyInputConfigWithValue) => void;\n}\n\nexport interface HOCProps {\n    /** Opens a prompt using supplied config which has a single Confirm button. */\n    alert: (prompt_request: UserInputPromptConfig, confirmCB?: (values: LooseObject) => void) => void;\n    /** Closes any open prompt without triggering any Confirm or Cancel callbacks. */\n    cancel: () => void;\n    /** Opens a prompt using supplied config which has a Confirm and Cancel button. */\n    confirm: (prompt_request: UserInputPromptConfig, confirmCB?: (values: LooseObject) => void, cancelCB?: () => void) => void;\n    /** Returns current tag. If no tag has been set returns null. */\n    getTag: () => string | null;\n    /** Returns true if a prompt is currently showing to the user. Otherwise false. */\n    isOpen: () => boolean;\n    /** Modify the config a currently open prompt. */\n    setConfig: (input_config: AnyInputConfigWithValue) => void;\n    /** Set tag. */\n    setTag: (tag: string) => void;\n}\n\nexport type UpdateConfig = {\n    key: string;\n    value?: any;\n};\nexport type AnyInputConfig = ButtonImport.ButtonConfig | TextImport.TextInputConfig | BoolImport.BoolInputConfig | GridImport.GridInputConfig | SelectImport.SelectInputConfig | MultiSelectImport.MultiSelectInputConfig | NumericImport.NumericInputConfig | TextareaImport.TextareaInputConfig | TriStateImport.TriStateInputConfig;\nexport type AnyInputConfigWithValue = Partial<AnyInputConfig> & UpdateConfig & Pick<AnyInputConfig, \"type\">;\nexport type PromptInputConfigArray = Array<ButtonImport.ButtonConfig | TextImport.TextInputConfig | BoolImport.BoolInputConfig | GridImport.GridInputConfig | SelectImport.SelectInputConfig | MultiSelectImport.MultiSelectInputConfig | NumericImport.NumericInputConfig | TextareaImport.TextareaInputConfig | TriStateImport.TriStateInputConfig>;\nexport type FormInputConfigArray = Array<ButtonImport.ButtonConfig | TextImport.TextInputConfig | BoolImport.BoolInputConfig | GridImport.GridInputConfig | SelectImport.SelectInputConfig | MultiSelectImport.MultiSelectInputConfig | NumericImport.NumericInputConfig | TextareaImport.TextareaInputConfig | TriStateImport.TriStateInputConfig>;\n\n\nexport interface PromptState {\n    prompt_config: PromptConfig | null;\n    tag: string | null;\n    form: GeneratedForm | null;\n}\n\nexport interface UserInputPromptConfig {\n    title: string;\n    inputs: PromptInputConfigArray;\n    message?: string;\n    classes?: string;\n    confirmCB?: () => void;\n    cancelCB?: () => void;\n    confirm_button_label?: string;\n    cancel_button_label?: string;\n}\n\nexport interface UserInputProps {\n    userInputs: HOCProps;\n}\n\nexport interface PromptConfig extends UserInputPromptConfig {\n    show_cancel_btn: boolean;\n    show_confirm_btn: boolean;\n}\n\ninterface InputComponentExports {\n    Input: React.ComponentClass<any>;\n    convertInternalToExternalValue: (cfg: any, value: any) => any;\n    validateConfig: (cfg: any) => null | string;\n    validate: (cfg: any, value: any) => null | string;\n    convertExternalToInternalValue: (cfg: any, value: any) => any;\n}\n\nexport interface ComponentObject {\n    [key: string]: InputComponentExports;\n    bool: InputComponentExports;\n    button: InputComponentExports;\n    date: InputComponentExports;\n    grid: InputComponentExports;\n    numeric: InputComponentExports;\n    select: InputComponentExports;\n    text: InputComponentExports;\n    textarea: InputComponentExports;\n    multi_select: InputComponentExports;\n    confirm: InputComponentExports;\n    tri_state: InputComponentExports;\n}\n\n\n\n\nexport const input_imports: ComponentObject = {\n    text: TextImport,\n    bool: BoolImport,\n    grid: GridImport,\n    button: ButtonImport,\n    select: SelectImport,\n    multi_select: MultiSelectImport,\n    textarea: TextareaImport,\n    tri_state: TriStateImport,\n    confirm: ButtonImport,\n    numeric: NumericImport,\n    date: TextImport\n};\n\n\n\n\nexport function renderPrompt(form: GeneratedForm | null, prompt_config: PromptConfig | null, userCancelledCB: () => void) {\n    if (!form || !prompt_config) {\n        return null;\n    }\n\n    return (\n        <PromptModal\n            cancelCB={() => { userCancelledCB(); }}\n            config={prompt_config}\n            form={form}\n        />\n    );\n}\n\n\n\nexport function InputHOC<P extends UserInputProps>(WrappedComponent: React.ComponentType<P>): React.ComponentClass<Omit<P, keyof UserInputProps>> {\n    class Prompt extends React.Component<P, PromptState> {\n        exports: HOCProps = {\n            confirm: (user_prompt_request, confirmCB, cancelCB) => {\n                if (user_prompt_request.hasOwnProperty(\"inputs\") === false) {\n                    user_prompt_request.inputs = [];\n                }\n                if (!user_prompt_request.title) {\n                    throw new Error(\"prompt_props requires 'title' property.\");\n                }\n                let default_settings = {\n                    show_cancel_btn: true,\n                    show_confirm_btn: true\n                };\n                let prompt_request: PromptConfig = Object.assign(\n                    {},\n                    user_prompt_request,\n                    default_settings\n                );\n                this.initPrompt(prompt_request, confirmCB, cancelCB);\n            },\n            alert: (user_prompt_request, confirmCB) => {\n                if (user_prompt_request.hasOwnProperty(\"inputs\") === false) {\n                    user_prompt_request.inputs = [];\n                }\n                if (!user_prompt_request.title) {\n                    throw new Error(\"prompt_props requires 'title' property.\");\n                }\n                let default_settings = {\n                    show_cancel_btn: false,\n                    show_confirm_btn: true\n                };\n                let prompt_request: PromptConfig = Object.assign(\n                    {},\n                    user_prompt_request,\n                    default_settings\n                );\n                this.initPrompt(prompt_request, confirmCB);\n            },\n            cancel: () => {\n                this.resetPrompt();\n            },\n            isOpen: () => {\n                return this.state.prompt_config !== null;\n            },\n            setTag: (tag) => {\n                this.setState({\n                    tag: tag\n                });\n            },\n            getTag: () => {\n                return this.state.tag;\n            },\n            setConfig: (input_config: AnyInputConfigWithValue) => {\n                if (this.state.form) {\n                    this.state.form.setInputConfig(input_config);\n                } else {\n                    throw new Error(\"UserInput: Cannot setConfig without an open prompt.\");\n                }\n            }\n        };\n\n        confirmCB: any = null;\n        cancelCB: any = null;\n\n        constructor(props: any) {\n            super(props);\n\n            this.state = {\n                prompt_config: null,\n                form: null,\n                tag: null\n            };\n        }\n\n        initPrompt(prompt_config: PromptConfig, confirmCB?: (value: any) => void, cancelCB?: () => void) {\n            let inputs = [...prompt_config.inputs];\n            let invalid_inputs = inputs.some(input => input.hasOwnProperty(\"default_value\") === false);\n            if (invalid_inputs) {\n                throw new Error(\"UserInput: Inputs must be configured with a 'default_value'.\");\n            }\n            invalid_inputs = inputs.some(input => !input_imports[input.type]);\n            if (invalid_inputs) {\n                throw new Error(\"UserInput: Inputs must be configured with a valid 'type'. \" + valid_types.join(','));\n            }\n            this.confirmCB = confirmCB || null;\n            this.cancelCB = cancelCB || null;\n\n            if (prompt_config.show_confirm_btn) {\n                let confirm_config: ButtonImport.ButtonConfig = {\n                    label: prompt_config.confirm_button_label || oh.translate('user_input_confirm'),\n                    key: \"confirm\",\n                    type: \"confirm\",\n                    default_value: \"\",\n                    filled: true,\n                    big: true\n                };\n                inputs.push(confirm_config);\n            }\n\n            if (prompt_config.show_cancel_btn) {\n                let cancel_config: ButtonImport.ButtonConfig = {\n                    label: prompt_config.confirm_button_label || oh.translate('user_input_cancel'),\n                    key: \"cancel\",\n                    type: \"button\",\n                    default_value: \"\",\n                    onClick: () => this.userCancelledCB(),\n                    filled: true,\n                    big: true\n                };\n                inputs.push(cancel_config);\n            }\n\n            this.setState({\n                form: formGenerator(inputs, (values: LooseObject) => this.userConfirmedCB(values)),\n                prompt_config: prompt_config\n            });\n        }\n\n        resetPrompt() {\n            this.confirmCB = null;\n            this.cancelCB = null;\n            this.setState({\n                form: null,\n                prompt_config: null,\n                tag: null\n            });\n        }\n\n        userConfirmedCB(values: LooseObject) {\n            //User clicked the confirm button.\n            if (this.confirmCB) {\n                this.confirmCB(values);\n            }\n            this.resetPrompt();\n        }\n        userCancelledCB() {\n            //User clicked the cancel button.\n            if (this.cancelCB) {\n                //Exec the cancelCB if one was supplied.\n                this.cancelCB();\n            }\n            this.resetPrompt();\n        }\n\n        render() {\n            return (<div>\n                <WrappedComponent userInputs={this.exports} {...this.props} />\n                {\n                    renderPrompt(\n                        this.state.form,\n                        this.state.prompt_config,\n                        () => { this.userCancelledCB(); }\n                    )\n                }\n            </div>);\n        }\n    }\n\n    return Prompt;\n}\n\n\nexport namespace InputHOC {\n    export function generateForm(input_configs: FormInputConfigArray, confirmCB?: (value: any) => void): GeneratedForm {\n        validateFormGeneratorInputs(input_configs, confirmCB);\n        return formGenerator(input_configs, confirmCB);\n    }\n}\n\nexport default InputHOC;\n"]}