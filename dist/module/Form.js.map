{"version":3,"sources":["../src/module/Form.tsx"],"names":[],"mappings":"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","file":"Form.js","sourcesContent":["import * as React from 'react';\n\nimport { renderInputs, FormInputConfigArray } from '.';\n\ninterface FormProps {\n    confirmCB?: (values: LooseObject) => void;\n    input_configs: FormInputConfigArray;\n    refCB?: (form: Form) => void;\n}\ninterface FormState {\n    values: LooseObject;\n}\n\nexport default class Form extends React.Component<FormProps, FormState> {\n    constructor(props: FormProps) {\n        super(props);\n\n        let values: { [key: string]: any; } = {};\n        props.input_configs.forEach((input) => {\n            if (input.type === \"multi_select\") {\n                let multi_select = input;\n                let selected_options = multi_select.options.filter(option => input.default_value.includes(option.value));\n                if (selected_options.length !== input.default_value.length) {\n                    throw new Error(\"UserInput: Default values for multiselect not present in options.\");\n                }\n                values[input.key] = selected_options;\n            } else if (input.type === \"select\") {\n                let select = input;\n                let selected_option = select.options.find(option => input.default_value === option.value);\n                if (!selected_option) {\n                    throw new Error(\"UserInput: Default value for select not present in options.\");\n                }\n                values[input.key] = selected_option;\n            } else {\n                values[input.key] = input.default_value;\n            }\n        });\n\n        this.state = {\n            values: {}\n        };\n\n        if (props.refCB) {\n            props.refCB(this);\n        }\n    }\n\n    userConfirmedCB() {\n        let values = Object.assign({}, this.state.values);\n        this.props.input_configs.forEach((input) => {\n            if (input.type === \"text\" || input.type === \"textarea\") {\n                let text_input = input;\n                if ((!input.hasOwnProperty(\"trim\") || text_input.trim === true) && typeof values[input.key] === \"string\") {\n                    values[input.key] = values[input.key].trim();\n                }\n            } else if (input.type === \"select\") {\n                values[input.key] = values[input.key].value;\n            } else if (input.type === \"multi_select\") {\n                values[input.key] = (values[input.key] as SelectOption[]).map(option => option.value);\n            }\n        });\n        if (this.props.confirmCB) {\n            this.props.confirmCB(values);\n        }\n    }\n\n    inputValueChangeCB(key: string, value: any) {\n        let values = Object.assign({}, this.state.values);\n        values[key] = value;\n        this.setState({\n            values: values\n        });\n    }\n\n    getValues(): LooseObject {\n        let values = Object.assign({}, this.state.values);\n        this.props.input_configs.forEach((input) => {\n            if (input.type === \"text\" || input.type === \"textarea\") {\n                let text_input = input;\n                if ((!input.hasOwnProperty(\"trim\") || text_input.trim === true) && typeof values[input.key] === \"string\") {\n                    values[input.key] = values[input.key].trim();\n                }\n            }\n            if (input.type === \"select\") {\n                values[input.key] = values[input.key].value;\n            }\n            if (input.type === \"multi_select\") {\n                values[input.key] = values[input.key].map((option: SelectOption) => option.value);\n            }\n        });\n        return values;\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    renderInputs(\n                        this.props.input_configs,\n                        this.state.values,\n                        (key: string, value: any) => { this.inputValueChangeCB(key, value); },\n                        () => { this.userConfirmedCB(); },\n                    )\n                }\n            </div>\n        );\n    }\n}\n"]}