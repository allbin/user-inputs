{"version":3,"sources":["../src/module/input_components/SelectInput.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,OAAO,EAAE,YAAY,EAAE,MAAM,MAAM,CAAC;AAEpC,MAAM,WAAW,iBAAiB;IAC9B,IAAI,EAAE,QAAQ,CAAC;IACf,GAAG,EAAE,MAAM,CAAC;IACZ,aAAa,EAAE,MAAM,GAAC,MAAM,CAAC;IAC7B,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,OAAO,EAAE,YAAY,EAAE,CAAC;IACxB,WAAW,CAAC,EAAE,MAAM,CAAC;IACrB,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,kBAAkB,CAAC,EAAE,MAAM,CAAC;IAC5B,UAAU,CAAC,EAAE,OAAO,CAAC;IACrB,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,8BAA8B;IAC9B,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,GAAC,MAAM,KAAK,IAAI,CAAC;IAC/C,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,GAAC,MAAM,KAAK,IAAI,GAAC,MAAM,CAAC;CACxD;AACD,MAAM,WAAW,gBAAgB;IAC7B,KAAK,EAAE,YAAY,CAAC;IACpB,MAAM,EAAE,iBAAiB,CAAC;IAC1B,QAAQ,EAAE,CAAC,KAAK,EAAE,YAAY,EAAE,EAAE,EAAE,MAAM,IAAI,KAAM,IAAI,CAAC;IACzD,qBAAqB,EAAE,OAAO,CAAC;CAClC;AA+BD,qBAAa,KAAM,SAAQ,KAAK,CAAC,SAAS,CAAC,gBAAgB,CAAC;IAExD,QAAQ,CAAC,KAAK,EAAE,YAAY;IAS5B,MAAM;CA+BT;AAED,wBAAgB,QAAQ,CAAC,GAAG,EAAE,iBAAiB,EAAE,KAAK,EAAE,MAAM,GAAC,MAAM,GAAG,MAAM,GAAC,IAAI,CAKlF;AAED,wBAAgB,cAAc,CAAC,GAAG,EAAE,iBAAiB,GAAG,IAAI,GAAC,MAAM,CAMlE;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,iBAAiB,EAAE,KAAK,EAAE,YAAY,GAAG,MAAM,GAAC,MAAM,CAEzG;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,iBAAiB,EAAE,KAAK,EAAE,MAAM,GAAC,MAAM,GAAG,YAAY,CAMzG","file":"SelectInput.d.ts","sourcesContent":["import * as React from 'react';\r\nimport styled from '../styling';\r\nimport Select from 'react-select';\r\nimport { SelectOption } from '../.';\r\n\r\nexport interface SelectInputConfig {\r\n    type: \"select\";\r\n    key: string;\r\n    default_value: string|number;\r\n    label?: string;\r\n    options: SelectOption[];\r\n    placeholder?: string;\r\n    class_name?: string;\r\n    no_options_message?: string;\r\n    searchable?: boolean;\r\n    disabled?: boolean;\r\n    message?: string;\r\n    /** TODO: Implement tooltip */\r\n    tooltip?: string;\r\n    onValueChange?: (value: string|number) => void;\r\n    validationCB?: (value: string|number) => null|string;\r\n}\r\nexport interface SelectInputProps {\r\n    value: SelectOption;\r\n    config: SelectInputConfig;\r\n    onChange: (value: SelectOption, cb: () => void ) => void;\r\n    display_error_message: boolean;\r\n}\r\n\r\ninterface ContainerStyleProps {\r\n    valid: boolean;\r\n}\r\n\r\nconst SelectInputContainer = styled(\"div\")<ContainerStyleProps> `\r\n    text-align: left;\r\n    margin-bottom: ${props => props.theme.components.form.user_input.margin_bottom}px;\r\n    p.message{\r\n        color: ${props => props.theme.colors.dark[2]};\r\n        font-size: 12px;\r\n        margin-bottom: 6px;\r\n        font-weight: normal;\r\n        font-style: italic;\r\n    }\r\n    p.validation_error{\r\n        color: ${props => props.theme.colors.red[0]};\r\n        font-size: 14px;\r\n        margin-bottom: 4px;\r\n        font-weight: bold;\r\n        font-style: italic;\r\n    }\r\n    p.select_label {\r\n        color: ${props => props.theme.colors.dark[1]};\r\n        font-size: 14px;\r\n        margin-bottom: 12px;\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nexport class Input extends React.Component<SelectInputProps> {\r\n\r\n    onChange(value: SelectOption) {\r\n        const cfg = this.props.config;\r\n        this.props.onChange(value, () => {\r\n            let ext_value = convertInternalToExternalValue(cfg, value);\r\n            if (cfg.onValueChange && !validate(cfg, ext_value)) {\r\n                cfg.onValueChange(ext_value);\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        let cfg = this.props.config;\r\n        let class_names = \"user_input select_input\";\r\n        if (cfg.class_name) {\r\n            class_names += \" \" + cfg.class_name;\r\n        }\r\n\r\n        const validation_error = validate(cfg, this.props.value.value);\r\n\r\n        return (\r\n            <SelectInputContainer\r\n                className={class_names}\r\n                valid={!validation_error || !this.props.display_error_message}\r\n            >\r\n                { cfg.label ? <p className=\"select_label\">{ cfg.label }</p> : null }\r\n                { cfg.message ? <p className=\"message\">{ cfg.message }</p> : null }\r\n                { validation_error && this.props.display_error_message && validation_error.length > 0 ? <p className=\"validation_error\">{ validation_error }</p> : null }\r\n                <Select\r\n                    placeholder={cfg.placeholder ? cfg.placeholder : cfg.label ? cfg.label : '' }\r\n                    value={this.props.value}\r\n                    onChange={(e) => {\r\n                        this.onChange(e as SelectOption);\r\n                    }}\r\n                    isDisabled={cfg.disabled || false}\r\n                    isSearchable={cfg.searchable || false}\r\n                    noOptionsMessage={() => cfg.no_options_message || null}\r\n                    options={cfg.options}\r\n                />\r\n            </SelectInputContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport function validate(cfg: SelectInputConfig, value: string|number): string|null {\r\n    if (cfg.validationCB) {\r\n        return cfg.validationCB(value);\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function validateConfig(cfg: SelectInputConfig): null|string {\r\n    if (validate(cfg, cfg.default_value)) {\r\n        return \"UserInput: Invalid default_value for Select.\";\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function convertInternalToExternalValue(cfg: SelectInputConfig, value: SelectOption): string|number {\r\n    return value.value;\r\n}\r\n\r\nexport function convertExternalToInternalValue(cfg: SelectInputConfig, value: string|number): SelectOption {\r\n    let selected_option = cfg.options.find(option => value === option.value);\r\n    if (!selected_option) {\r\n        throw new Error(\"UserInput: Default value for select not present in options.\");\r\n    }\r\n    return selected_option;\r\n}\r\n"]}