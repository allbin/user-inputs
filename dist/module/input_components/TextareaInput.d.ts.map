{"version":3,"sources":["../src/module/input_components/TextareaInput.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,MAAM,WAAW,mBAAmB;IAChC,IAAI,EAAE,UAAU,CAAC;IACjB,GAAG,EAAE,MAAM,CAAC;IACZ,aAAa,EAAE,MAAM,CAAC;IACtB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,WAAW,CAAC,EAAE,MAAM,CAAC;IACrB,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,IAAI,CAAC,EAAE,OAAO,CAAC;IACf,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,8BAA8B;IAC9B,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC;IACxC,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,GAAC,MAAM,CAAC;CACjD;AACD,MAAM,WAAW,kBAAkB;IAC/B,KAAK,EAAE,MAAM,CAAC;IACd,MAAM,EAAE,mBAAmB,CAAC;IAC5B,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,IAAI,KAAK,IAAI,CAAC;IAClD,qBAAqB,EAAE,OAAO,CAAC;IAC/B,SAAS,CAAC,EAAE,OAAO,CAAC;CACvB;AA8CD,qBAAa,KAAM,SAAQ,KAAK,CAAC,SAAS,CAAC,kBAAkB,EAAE,mBAAmB,CAAC;IAE/E,QAAQ,CAAC,KAAK,EAAE,MAAM;IAUtB,MAAM;CA2BT;AAED,wBAAgB,QAAQ,CAAC,GAAG,EAAE,mBAAmB,EAAE,KAAK,EAAE,MAAM,GAAG,IAAI,GAAC,MAAM,CAK7E;AAED,wBAAgB,cAAc,CAAC,GAAG,EAAE,mBAAmB,GAAG,IAAI,GAAC,MAAM,CAGpE;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,mBAAmB,EAAE,KAAK,EAAE,MAAM,GAAG,MAAM,CAK9F;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,mBAAmB,EAAE,KAAK,EAAE,MAAM,GAAC,MAAM,GAAG,MAAM,CAErG","file":"TextareaInput.d.ts","sourcesContent":["import * as React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface TextareaInputConfig {\r\n    type: \"textarea\";\r\n    key: string;\r\n    default_value: string;\r\n    label?: string;\r\n    rows?: number;\r\n    placeholder?: string;\r\n    class_name?: string;\r\n    trim?: boolean;\r\n    message?: string;\r\n    /** TODO: Implement tooltip */\r\n    tooltip?: string;\r\n    onValueChange?: (value: string) => void;\r\n    validationCB?: (value: string) => null|string;\r\n}\r\nexport interface TextareaInputProps {\r\n    value: string;\r\n    config: TextareaInputConfig;\r\n    onChange: (value: string, cb: () => void) => void;\r\n    display_error_message: boolean;\r\n    autofocus?: boolean;\r\n}\r\n\r\nlet default_config = {\r\n    rows: 3\r\n};\r\n\r\ninterface ContainerStyleProps {\r\n    valid: boolean;\r\n}\r\n\r\nconst TextareaInputContainer = styled(\"div\")<ContainerStyleProps> `\r\n    text-align: left;\r\n    margin-bottom: ${props => props.theme.components.form.user_input.margin_bottom}px;\r\n    p {\r\n        color: ${props => props.theme.colors.dark[1]};\r\n        font-size: 14px;\r\n        margin-bottom: 12px;\r\n        font-weight: bold;\r\n    }\r\n    p.message{\r\n        color: ${props => props.theme.colors.dark[2]};\r\n        font-size: 12px;\r\n        margin-bottom: 6px;\r\n        font-weight: normal;\r\n        font-style: italic;\r\n    }\r\n    p.validation_error{\r\n        color: ${props => props.theme.colors.red[0]};\r\n        font-size: 14px;\r\n        margin-bottom: 4px;\r\n        font-weight: bold;\r\n        font-style: italic;\r\n    }\r\n    textarea {\r\n        background-color: ${props => !props.valid ? \"rgba(255,0,0,0.1)\" : \"\" };\r\n        border: 1px solid ${props => !props.valid ? props.theme.colors.error : props.theme.colors.border};\r\n        border-radius: 4px;\r\n        font-size: 16px;\r\n        padding: 8px 12px;\r\n        width: 100%;\r\n        &:HOVER, &:FOCUS {\r\n            border-color: ${props => !props.valid ? props.theme.colors.error : props.theme.colors.brand[2]};\r\n        }\r\n    }\r\n`;\r\n\r\nexport class Input extends React.Component<TextareaInputProps, TextareaInputConfig> {\r\n\r\n    onChange(value: string) {\r\n        const cfg = this.props.config;\r\n        this.props.onChange(value, () => {\r\n            let ext_value = convertInternalToExternalValue(cfg, value);\r\n            if (cfg.onValueChange && !validate(cfg, ext_value)) {\r\n                cfg.onValueChange(ext_value);\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let cfg = Object.assign({}, default_config, this.props.config);\r\n        let class_names = \"user_input textarea_input\";\r\n        if (cfg.class_name) {\r\n            class_names += \" \" + cfg.class_name;\r\n        }\r\n\r\n        const validation_error = validate(cfg, this.props.value);\r\n\r\n        return (\r\n            <TextareaInputContainer\r\n                className={class_names}\r\n                valid={!validation_error || !this.props.display_error_message}\r\n            >\r\n                { cfg.label ? <p>{ cfg.label }</p> : null }\r\n                { cfg.message ? <p className=\"message\">{ cfg.message }</p> : null }\r\n                { validation_error && this.props.display_error_message && validation_error.length > 0 ? <p className=\"validation_error\">{ validation_error }</p> : null }\r\n                <textarea\r\n                    rows={cfg.rows}\r\n                    autoFocus={this.props.autofocus || false}\r\n                    placeholder={cfg.placeholder ? cfg.placeholder : ''}\r\n                    value={this.props.value}\r\n                    onChange={e => this.onChange(e.target.value)}\r\n                />\r\n            </TextareaInputContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport function validate(cfg: TextareaInputConfig, value: string): null|string {\r\n    if (cfg.validationCB) {\r\n        return cfg.validationCB(value);\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function validateConfig(cfg: TextareaInputConfig): null|string {\r\n\r\n    return null;\r\n}\r\n\r\nexport function convertInternalToExternalValue(cfg: TextareaInputConfig, value: string): string {\r\n    if (cfg.trim) {\r\n        return value.trim();\r\n    }\r\n    return value;\r\n}\r\n\r\nexport function convertExternalToInternalValue(cfg: TextareaInputConfig, value: string|number): string {\r\n    return value.toString();\r\n}\r\n"]}