{"version":3,"sources":["../src/module/input_components/MultiSelectInput.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AACzC,OAAO,EAAE,YAAY,EAAE,MAAM,yBAAyB,CAAC;AAEvD,MAAM,WAAW,sBAAsB;IACnC,IAAI,EAAE,cAAc,CAAC;IACrB,GAAG,EAAE,MAAM,CAAC;IACZ,aAAa,EAAE,CAAC,MAAM,GAAC,MAAM,CAAC,EAAE,CAAC;IACjC,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,WAAW,CAAC,EAAE,MAAM,CAAC;IACrB,OAAO,EAAE,iBAAiB,EAAE,CAAC;IAC7B,MAAM,CAAC,EAAE,YAAY,CAAC;IACtB,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,kBAAkB,CAAC,EAAE,MAAM,CAAC;IAC5B,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,mDAAmD;IACnD,UAAU,CAAC,EAAE,OAAO,CAAC;IACrB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,8BAA8B;IAC9B,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,GAAC,MAAM,CAAC,EAAE,KAAK,IAAI,CAAC;IACnD,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,GAAC,MAAM,CAAC,EAAE,KAAK,IAAI,GAAC,MAAM,CAAC;CAC5D;AACD,MAAM,WAAW,qBAAqB;IAClC,KAAK,EAAE,iBAAiB,EAAE,CAAC;IAC3B,MAAM,EAAE,sBAAsB,CAAC;IAC/B,QAAQ,EAAE,CAAC,OAAO,EAAE,iBAAiB,EAAE,EAAE,EAAE,EAAE,MAAM,IAAI,KAAK,IAAI,CAAC;IACjE,qBAAqB,EAAE,OAAO,CAAC;CAClC;AA+BD,qBAAa,KAAM,SAAQ,KAAK,CAAC,SAAS,CAAC,qBAAqB,CAAC;IAE7D,QAAQ,CAAC,MAAM,EAAE,iBAAiB,EAAE;IAUpC,MAAM;CAiCT;AAED,wBAAgB,QAAQ,CAAC,GAAG,EAAE,sBAAsB,EAAE,KAAK,EAAE,CAAC,MAAM,GAAC,MAAM,CAAC,EAAE,GAAG,IAAI,GAAC,MAAM,CAK3F;AAED,wBAAgB,cAAc,CAAC,GAAG,EAAE,sBAAsB,GAAG,IAAI,GAAC,MAAM,CAEvE;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,sBAAsB,EAAE,MAAM,EAAE,iBAAiB,EAAE,GAAG,CAAC,MAAM,GAAC,MAAM,CAAC,EAAE,CAE1H;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,sBAAsB,EAAE,MAAM,EAAE,CAAC,MAAM,GAAC,MAAM,CAAC,EAAE,GAAG,iBAAiB,EAAE,CAM1H","file":"MultiSelectInput.d.ts","sourcesContent":["import * as React from 'react';\r\nimport styled from '../styling';\r\nimport Select from 'react-select';\r\nimport { MultiSelectOption } from '../.';\r\nimport { StylesConfig } from 'react-select/lib/styles';\r\n\r\nexport interface MultiSelectInputConfig {\r\n    type: \"multi_select\";\r\n    key: string;\r\n    default_value: (string|number)[];\r\n    label?: string;\r\n    placeholder?: string;\r\n    options: MultiSelectOption[];\r\n    styles?: StylesConfig;\r\n    class_name?: string;\r\n    no_options_message?: string;\r\n    disabled?: boolean;\r\n    /** Is the multi_select searchable? Default true */\r\n    searchable?: boolean;\r\n    message?: string;\r\n    /** TODO: Implement tooltip */\r\n    tooltip?: string;\r\n    onValueChange?: (value: (string|number)[]) => void;\r\n    validationCB?: (value: (string|number)[]) => null|string;\r\n}\r\nexport interface MultiSelectInputProps {\r\n    value: MultiSelectOption[];\r\n    config: MultiSelectInputConfig;\r\n    onChange: (options: MultiSelectOption[], cb: () => void) => void;\r\n    display_error_message: boolean;\r\n}\r\n\r\ninterface ContainerStyleProps {\r\n    valid: boolean;\r\n}\r\n\r\nconst MultiSelectInputContainer = styled(\"div\")<ContainerStyleProps> `\r\n    text-align: left;\r\n    margin-bottom: ${props => props.theme.components.form.user_input.margin_bottom}px;\r\n    p.message{\r\n        color: ${props => props.theme.colors.dark[2]};\r\n        font-size: 12px;\r\n        margin-bottom: 6px;\r\n        font-weight: normal;\r\n        font-style: italic;\r\n    }\r\n    p.validation_error{\r\n        color: ${props => props.theme.colors.red[0]};\r\n        font-size: 14px;\r\n        margin-bottom: 4px;\r\n        font-weight: bold;\r\n        font-style: italic;\r\n    }\r\n    p.multi_select_label {\r\n        color: ${props => props.theme.colors.dark[1]};\r\n        font-size: 14px;\r\n        margin-bottom: 12px;\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nexport class Input extends React.Component<MultiSelectInputProps> {\r\n\r\n    onChange(values: MultiSelectOption[]) {\r\n        const cfg = this.props.config;\r\n        this.props.onChange(values, () => {\r\n            let ext_value = convertInternalToExternalValue(cfg, values);\r\n            if (cfg.onValueChange && !validate(cfg, ext_value)) {\r\n                cfg.onValueChange(ext_value);\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let cfg = this.props.config;\r\n        let class_names = \"user_input multi_select_input\";\r\n        if (cfg.class_name) {\r\n            class_names += \" \" + cfg.class_name;\r\n        }\r\n\r\n        const validation_error = validate(cfg, this.props.value.map(option => option.value));\r\n\r\n        return (\r\n            <MultiSelectInputContainer\r\n                className={class_names}\r\n                valid={!validation_error || !this.props.display_error_message}\r\n            >\r\n                { cfg.label ? <p className=\"multi_select_label\">{ cfg.label }</p> : null }\r\n                { cfg.message ? <p className=\"message\">{ cfg.message }</p> : null }\r\n                { validation_error && this.props.display_error_message && validation_error.length > 0 ? <p className=\"validation_error\">{ validation_error }</p> : null }\r\n                <Select\r\n                    placeholder={cfg.placeholder ? cfg.placeholder : ''}\r\n                    isMulti={true}\r\n                    value={this.props.value}\r\n                    onChange={(e) => {\r\n                        this.onChange(e as MultiSelectOption[]);\r\n                    }}\r\n                    isSearchable={cfg.searchable || false}\r\n                    isDisabled={cfg.disabled || false}\r\n                    noOptionsMessage={() => cfg.no_options_message || null}\r\n                    options={cfg.options}\r\n                    styles={cfg.styles}\r\n                />\r\n            </MultiSelectInputContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport function validate(cfg: MultiSelectInputConfig, value: (number|string)[]): null|string {\r\n    if (cfg.validationCB) {\r\n        return cfg.validationCB(value);\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function validateConfig(cfg: MultiSelectInputConfig): null|string {\r\n    return null;\r\n}\r\n\r\nexport function convertInternalToExternalValue(cfg: MultiSelectInputConfig, values: MultiSelectOption[]): (string|number)[] {\r\n    return values.map(x => x.value);\r\n}\r\n\r\nexport function convertExternalToInternalValue(cfg: MultiSelectInputConfig, values: (number|string)[]): MultiSelectOption[] {\r\n    let selected_options = cfg.options.filter(option => values.includes(option.value));\r\n    if (selected_options.length !== values.length) {\r\n        throw new Error(\"UserInput: Default value for multiselect not present in options.\");\r\n    }\r\n    return selected_options;\r\n}\r\n"]}