{"version":3,"sources":["../src/module/input_components/MultiSelectInput.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAEzC,MAAM,WAAW,sBAAsB;IACnC,IAAI,EAAE,cAAc,CAAC;IACrB,GAAG,EAAE,MAAM,CAAC;IACZ,aAAa,EAAE,CAAC,MAAM,GAAC,MAAM,CAAC,EAAE,CAAC;IACjC,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,WAAW,CAAC,EAAE,MAAM,CAAC;IACrB,OAAO,EAAE,iBAAiB,EAAE,CAAC;IAC7B,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,kBAAkB,CAAC,EAAE,MAAM,CAAC;IAC5B,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,mDAAmD;IACnD,UAAU,CAAC,EAAE,OAAO,CAAC;IACrB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,8BAA8B;IAC9B,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,GAAC,MAAM,CAAC,EAAE,KAAK,IAAI,CAAC;IACnD,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,GAAC,MAAM,CAAC,EAAE,KAAK,IAAI,GAAC,MAAM,CAAC;CAC5D;AACD,MAAM,WAAW,qBAAqB;IAClC,KAAK,EAAE,iBAAiB,EAAE,CAAC;IAC3B,MAAM,EAAE,sBAAsB,CAAC;IAC/B,QAAQ,EAAE,CAAC,OAAO,EAAE,iBAAiB,EAAE,KAAK,IAAI,CAAC;IACjD,qBAAqB,EAAE,OAAO,CAAC;CAClC;AA8BD,qBAAa,KAAM,SAAQ,KAAK,CAAC,SAAS,CAAC,qBAAqB,CAAC;IAE7D,QAAQ,CAAC,MAAM,EAAE,iBAAiB,EAAE;IAQpC,MAAM;CAgCT;AAED,wBAAgB,QAAQ,CAAC,GAAG,EAAE,sBAAsB,EAAE,KAAK,EAAE,CAAC,MAAM,GAAC,MAAM,CAAC,EAAE,GAAG,IAAI,GAAC,MAAM,CAK3F;AAED,wBAAgB,cAAc,CAAC,GAAG,EAAE,sBAAsB,GAAG,IAAI,GAAC,MAAM,CAEvE;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,sBAAsB,EAAE,MAAM,EAAE,iBAAiB,EAAE,GAAG,CAAC,MAAM,GAAC,MAAM,CAAC,EAAE,CAE1H;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,sBAAsB,EAAE,MAAM,EAAE,CAAC,MAAM,GAAC,MAAM,CAAC,EAAE,GAAG,iBAAiB,EAAE,CAM1H","file":"MultiSelectInput.d.ts","sourcesContent":["import * as React from 'react';\nimport styled from '../styling';\nimport Select from 'react-select';\nimport { MultiSelectOption } from '../.';\n\nexport interface MultiSelectInputConfig {\n    type: \"multi_select\";\n    key: string;\n    default_value: (string|number)[];\n    label?: string;\n    placeholder?: string;\n    options: MultiSelectOption[];\n    class_name?: string;\n    no_options_message?: string;\n    disabled?: boolean;\n    /** Is the multi_select searchable? Default true */\n    searchable?: boolean;\n    message?: string;\n    /** TODO: Implement tooltip */\n    tooltip?: string;\n    onValueChange?: (value: (string|number)[]) => void;\n    validationCB?: (value: (string|number)[]) => null|string;\n}\nexport interface MultiSelectInputProps {\n    value: MultiSelectOption[];\n    config: MultiSelectInputConfig;\n    onChange: (options: MultiSelectOption[]) => void;\n    display_error_message: boolean;\n}\n\ninterface ContainerStyleProps {\n    valid: boolean;\n}\n\nconst MultiSelectInputContainer = styled(\"div\")<ContainerStyleProps> `\n    text-align: left;\n    p.message{\n        color: ${props => props.theme.colors.dark[2]};\n        font-size: 12px;\n        margin-bottom: 6px;\n        font-weight: normal;\n        font-style: italic;\n    }\n    p.validation_error{\n        color: ${props => props.theme.colors.red[0]};\n        font-size: 14px;\n        margin-bottom: 4px;\n        font-weight: bold;\n        font-style: italic;\n    }\n    p.multi_select_label {\n        color: ${props => props.theme.colors.dark[1]};\n        font-size: 14px;\n        margin-bottom: 12px;\n        font-weight: bold;\n    }\n`;\n\nexport class Input extends React.Component<MultiSelectInputProps> {\n\n    onChange(values: MultiSelectOption[]) {\n        const cfg = this.props.config;\n        this.props.onChange(values);\n        if (cfg.onValueChange) {\n            cfg.onValueChange(convertInternalToExternalValue(cfg, values));\n        }\n    }\n\n    render() {\n        let cfg = this.props.config;\n        let class_names = \"user_input multi_select_input\";\n        if (cfg.class_name) {\n            class_names += \" \" + cfg.class_name;\n        }\n\n        const validation_error = validate(cfg, this.props.value.map(option => option.value));\n\n        return (\n            <MultiSelectInputContainer\n                className={class_names}\n                valid={!validation_error || !this.props.display_error_message}\n            >\n                { cfg.label ? <p className=\"multi_select_label\">{ cfg.label }</p> : null }\n                { cfg.message ? <p className=\"message\">{ cfg.message }</p> : null }\n                { validation_error && this.props.display_error_message && validation_error.length > 0 ? <p className=\"validation_error\">{ validation_error }</p> : null }\n                <Select\n                    placeholder={cfg.placeholder ? cfg.placeholder : cfg.label ? cfg.label : '' }\n                    isMulti={true}\n                    value={this.props.value}\n                    onChange={(e) => {\n                        this.onChange(e as MultiSelectOption[]);\n                    }}\n                    isSearchable={cfg.searchable || false}\n                    isDisabled={cfg.disabled || false}\n                    noOptionsMessage={() => cfg.no_options_message || null}\n                    options={cfg.options}\n                />\n            </MultiSelectInputContainer>\n        );\n    }\n}\n\nexport function validate(cfg: MultiSelectInputConfig, value: (number|string)[]): null|string {\n    if (cfg.validationCB) {\n        return cfg.validationCB(value);\n    }\n    return null;\n}\n\nexport function validateConfig(cfg: MultiSelectInputConfig): null|string {\n    return null;\n}\n\nexport function convertInternalToExternalValue(cfg: MultiSelectInputConfig, values: MultiSelectOption[]): (string|number)[] {\n    return values.map(x => x.value);\n}\n\nexport function convertExternalToInternalValue(cfg: MultiSelectInputConfig, values: (number|string)[]): MultiSelectOption[] {\n    let selected_options = cfg.options.filter(option => values.includes(option.value));\n    if (selected_options.length !== values.length) {\n        throw new Error(\"UserInput: Default value for multiselect not present in options.\");\n    }\n    return selected_options;\n}"]}