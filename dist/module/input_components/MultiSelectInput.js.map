{"version":3,"sources":["../src/module/input_components/MultiSelectInput.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,MAAM,MAAM,YAAY,CAAC;AAChC,OAAO,MAAM,MAAM,cAAc,CAAC;AAyBlC,MAAM,yBAAyB,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;;;iBAG/B,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;;;;;;iBAOnC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;;;;CAKnD,CAAC;AAEF,MAAM,OAAO,KAAM,SAAQ,KAAK,CAAC,SAAgC;IAE7D,QAAQ,CAAC,MAA2B;QAChC,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAC9B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC5B,IAAI,GAAG,CAAC,aAAa,EAAE;YACnB,GAAG,CAAC,aAAa,CAAC,cAAc,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;SAClD;IACL,CAAC;IAED,MAAM;QACF,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAC5B,IAAI,WAAW,GAAG,+BAA+B,CAAC;QAClD,IAAI,GAAG,CAAC,UAAU,EAAE;YAChB,WAAW,IAAI,GAAG,GAAG,GAAG,CAAC,UAAU,CAAC;SACvC;QAED,OAAO,CACH,oBAAC,yBAAyB,IACtB,SAAS,EAAE,WAAW;YAEpB,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,2BAAG,SAAS,EAAC,oBAAoB,IAAG,GAAG,CAAC,KAAK,CAAM,CAAC,CAAC,CAAC,IAAI;YACtE,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,2BAAG,SAAS,EAAC,SAAS,IAAG,GAAG,CAAC,OAAO,CAAM,CAAC,CAAC,CAAC,IAAI;YACjE,oBAAC,MAAM,IACH,WAAW,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAC3E,OAAO,EAAE,IAAI,EACb,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EACvB,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE;oBACZ,IAAI,CAAC,QAAQ,CAAC,CAAwB,CAAC,CAAC;gBAC5C,CAAC,EACD,YAAY,EAAE,GAAG,CAAC,UAAU,IAAI,KAAK,EACrC,UAAU,EAAE,GAAG,CAAC,QAAQ,IAAI,KAAK,EACjC,gBAAgB,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,kBAAkB,IAAI,IAAI,EACtD,OAAO,EAAE,GAAG,CAAC,OAAO,GACtB,CACsB,CAC/B,CAAC;IACN,CAAC;CACJ;AAED,MAAM,UAAU,QAAQ,CAAC,GAA2B,EAAE,KAAwB;IAC1E,OAAO,IAAI,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,GAA2B;IACtD,IAAI,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,aAAa,CAAC,EAAE;QAClC,OAAO,mDAAmD,CAAC;KAC9D;IAED,OAAO,IAAI,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,GAA2B,EAAE,MAA2B;IACnF,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AACpC,CAAC","file":"MultiSelectInput.js","sourcesContent":["import * as React from 'react';\nimport styled from '../styling';\nimport Select from 'react-select';\n\nexport interface MultiSelectInputConfig {\n    type: \"multi_select\";\n    key: string;\n    default_value: (string|number)[];\n    label?: string;\n    placeholder?: string;\n    options: MultiSelectOption[];\n    class_name?: string;\n    no_options_message?: string;\n    disabled?: boolean;\n    /** Is the multi_select searchable? Default true */\n    searchable?: boolean;\n    message?: string;\n    /** TODO: Implement tooltip */\n    tooltip?: string;\n    onValueChange?: (value: (string|number)[]) => void;\n}\nexport interface MultiSelectInputProps {\n    value: MultiSelectOption;\n    config: MultiSelectInputConfig;\n    onChange: (options: MultiSelectOption[]) => void;\n}\n\nconst MultiSelectInputContainer = styled(\"div\") `\n    text-align: left;\n    p.message{\n        color: ${props => props.theme.colors.dark[2]};\n        font-size: 12px;\n        margin-bottom: 6px;\n        font-weight: normal;\n        font-style: italic;\n    }\n    p.multi_select_label {\n        color: ${props => props.theme.colors.dark[1]};\n        font-size: 14px;\n        margin-bottom: 12px;\n        font-weight: bold;\n    }\n`;\n\nexport class Input extends React.Component<MultiSelectInputProps> {\n\n    onChange(values: MultiSelectOption[]) {\n        const cfg = this.props.config;\n        this.props.onChange(values);\n        if (cfg.onValueChange) {\n            cfg.onValueChange(getParsedValue(cfg, values));\n        }\n    }\n\n    render() {\n        let cfg = this.props.config;\n        let class_names = \"user_input multi_select_input\";\n        if (cfg.class_name) {\n            class_names += \" \" + cfg.class_name;\n        }\n\n        return (\n            <MultiSelectInputContainer\n                className={class_names}\n            >\n                { cfg.label ? <p className=\"multi_select_label\">{ cfg.label }</p> : null }\n                { cfg.message ? <p className=\"message\">{ cfg.message }</p> : null }\n                <Select\n                    placeholder={cfg.placeholder ? cfg.placeholder : cfg.label ? cfg.label : '' }\n                    isMulti={true}\n                    value={this.props.value}\n                    onChange={(e) => {\n                        this.onChange(e as MultiSelectOption[]);\n                    }}\n                    isSearchable={cfg.searchable || false}\n                    isDisabled={cfg.disabled || false}\n                    noOptionsMessage={() => cfg.no_options_message || null}\n                    options={cfg.options}\n                />\n            </MultiSelectInputContainer>\n        );\n    }\n}\n\nexport function validate(cfg: MultiSelectInputConfig, value: (number|string)[]): null|string {\n    return null;\n}\n\nexport function validateConfig(cfg: MultiSelectInputConfig): null|string {\n    if (validate(cfg, cfg.default_value)) {\n        return \"UserInput: Invalid default_value for MultiSelect.\";\n    }\n\n    return null;\n}\n\nexport function getParsedValue(cfg: MultiSelectInputConfig, values: MultiSelectOption[]): (string|number)[] {\n    return values.map(x => x.value);\n}"]}