{"version":3,"sources":["../src/module/input_components/MultiSelectInput.tsx"],"names":[],"mappings":"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","file":"MultiSelectInput.js","sourcesContent":["import * as React from 'react';\nimport styled from '../styling';\nimport Select from 'react-select';\nimport { MultiSelectOption } from '../.';\n\nexport interface MultiSelectInputConfig {\n    type: \"multi_select\";\n    key: string;\n    default_value: (string|number)[];\n    label?: string;\n    placeholder?: string;\n    options: MultiSelectOption[];\n    class_name?: string;\n    no_options_message?: string;\n    disabled?: boolean;\n    /** Is the multi_select searchable? Default true */\n    searchable?: boolean;\n    message?: string;\n    /** TODO: Implement tooltip */\n    tooltip?: string;\n    onValueChange?: (value: (string|number)[]) => void;\n    validationCB?: (value: (string|number)[]) => null|string;\n}\nexport interface MultiSelectInputProps {\n    value: MultiSelectOption[];\n    config: MultiSelectInputConfig;\n    onChange: (options: MultiSelectOption[], cb: () => void) => void;\n    display_error_message: boolean;\n}\n\ninterface ContainerStyleProps {\n    valid: boolean;\n}\n\nconst MultiSelectInputContainer = styled(\"div\")<ContainerStyleProps> `\n    text-align: left;\n    margin-bottom: ${props => props.theme.components.form.user_input.margin_bottom}px;\n    p.message{\n        color: ${props => props.theme.colors.dark[2]};\n        font-size: 12px;\n        margin-bottom: 6px;\n        font-weight: normal;\n        font-style: italic;\n    }\n    p.validation_error{\n        color: ${props => props.theme.colors.red[0]};\n        font-size: 14px;\n        margin-bottom: 4px;\n        font-weight: bold;\n        font-style: italic;\n    }\n    p.multi_select_label {\n        color: ${props => props.theme.colors.dark[1]};\n        font-size: 14px;\n        margin-bottom: 12px;\n        font-weight: bold;\n    }\n`;\n\nexport class Input extends React.Component<MultiSelectInputProps> {\n\n    onChange(values: MultiSelectOption[]) {\n        const cfg = this.props.config;\n        this.props.onChange(values, () => {\n            let ext_value = convertInternalToExternalValue(cfg, values);\n            if (cfg.onValueChange && !validate(cfg, ext_value)) {\n                cfg.onValueChange(ext_value);\n            }\n        });\n    }\n\n    render() {\n        let cfg = this.props.config;\n        let class_names = \"user_input multi_select_input\";\n        if (cfg.class_name) {\n            class_names += \" \" + cfg.class_name;\n        }\n\n        const validation_error = validate(cfg, this.props.value.map(option => option.value));\n\n        return (\n            <MultiSelectInputContainer\n                className={class_names}\n                valid={!validation_error || !this.props.display_error_message}\n            >\n                { cfg.label ? <p className=\"multi_select_label\">{ cfg.label }</p> : null }\n                { cfg.message ? <p className=\"message\">{ cfg.message }</p> : null }\n                { validation_error && this.props.display_error_message && validation_error.length > 0 ? <p className=\"validation_error\">{ validation_error }</p> : null }\n                <Select\n                    placeholder={cfg.placeholder ? cfg.placeholder : ''}\n                    isMulti={true}\n                    value={this.props.value}\n                    onChange={(e) => {\n                        this.onChange(e as MultiSelectOption[]);\n                    }}\n                    isSearchable={cfg.searchable || false}\n                    isDisabled={cfg.disabled || false}\n                    noOptionsMessage={() => cfg.no_options_message || null}\n                    options={cfg.options}\n                />\n            </MultiSelectInputContainer>\n        );\n    }\n}\n\nexport function validate(cfg: MultiSelectInputConfig, value: (number|string)[]): null|string {\n    if (cfg.validationCB) {\n        return cfg.validationCB(value);\n    }\n    return null;\n}\n\nexport function validateConfig(cfg: MultiSelectInputConfig): null|string {\n    return null;\n}\n\nexport function convertInternalToExternalValue(cfg: MultiSelectInputConfig, values: MultiSelectOption[]): (string|number)[] {\n    return values.map(x => x.value);\n}\n\nexport function convertExternalToInternalValue(cfg: MultiSelectInputConfig, values: (number|string)[]): MultiSelectOption[] {\n    let selected_options = cfg.options.filter(option => values.includes(option.value));\n    if (selected_options.length !== values.length) {\n        throw new Error(\"UserInput: Default value for multiselect not present in options.\");\n    }\n    return selected_options;\n}\n"]}