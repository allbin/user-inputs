{"version":3,"sources":["../src/module/input_components/NumericInput.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAI/B,MAAM,WAAW,kBAAkB;IAC/B,IAAI,EAAE,SAAS,CAAC;IAChB,GAAG,EAAE,MAAM,CAAC;IACZ,aAAa,EAAE,MAAM,CAAC;IACtB,WAAW,EAAE,SAAS,GAAC,OAAO,CAAC;IAE/B,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,8BAA8B;IAC9B,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,8EAA8E;IAC9E,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC;IACxC,6FAA6F;IAC7F,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,GAAC,MAAM,CAAC;CACjD;AACD,MAAM,WAAW,iBAAiB;IAC9B,KAAK,EAAE,MAAM,CAAC;IACd,MAAM,EAAE,kBAAkB,CAAC;IAC3B,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC;IAClC,qBAAqB,EAAE,OAAO,CAAC;IAC/B,SAAS,CAAC,EAAE,OAAO,CAAC;CACvB;AAGD,UAAU,iBAAiB;IACvB,OAAO,EAAE,OAAO,CAAC;CACpB;AA+CD,qBAAa,KAAM,SAAQ,KAAK,CAAC,SAAS,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;IAE5E,QAAQ,CAAC,KAAK,EAAE,MAAM;IAQtB,MAAM;CAyBT;AAED,wBAAgB,QAAQ,CAAC,GAAG,EAAE,kBAAkB,EAAE,KAAK,EAAE,MAAM,GAAG,IAAI,GAAC,MAAM,CA4C5E;AAED,wBAAgB,cAAc,CAAC,GAAG,EAAE,kBAAkB,GAAG,IAAI,GAAC,MAAM,CAMnE;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,kBAAkB,EAAE,KAAK,EAAE,MAAM,GAAG,MAAM,CAc7F;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,kBAAkB,EAAE,KAAK,EAAE,MAAM,GAAG,MAAM,CAE7F","file":"NumericInput.d.ts","sourcesContent":["import * as React from 'react';\nimport oh from 'output-helpers';\nimport styled from '../styling';\n\nexport interface NumericInputConfig {\n    type: \"numeric\";\n    key: string;\n    default_value: number;\n    number_type: \"integer\"|\"float\";\n\n    class_name?: string;\n    label?: string;\n    /** TODO: Implement tooltip */\n    tooltip?: string;\n    message?: string;\n    max?: number;\n    min?: number;\n    /** TODO: Implement step functionality. Use +/- keys as well as UI buttons? */\n    step?: number;\n    onValueChange?: (value: number) => void;\n    /** Return error message. Empty string displays no message but marks the input as invalid. */\n    validationCB?: (value: string) => null|string;\n}\nexport interface NumericInputProps {\n    value: string;\n    config: NumericInputConfig;\n    onChange: (value: string) => void;\n    display_error_message: boolean;\n    autofocus?: boolean;\n}\n\n\ninterface NumericInputState {\n    blocked: boolean;\n}\n\ninterface ContainerStyleProps {\n    valid: boolean;\n}\n\nconst NumericInputContainer = styled(\"div\")<ContainerStyleProps> `\n    text-align: left;\n    p{\n        color: ${props => props.theme.colors.dark[1]};\n        font-size: 14px;\n        margin-bottom: 8px;\n        font-weight: bold;\n    }\n    p.message{\n        color: ${props => props.theme.colors.dark[2]};\n        font-size: 12px;\n        margin-bottom: 6px;\n        font-weight: normal;\n        font-style: italic;\n    }\n    p.validation_error{\n        color: ${props => props.theme.colors.red[0]};\n        font-size: 14px;\n        margin-bottom: 4px;\n        font-weight: bold;\n        font-style: italic;\n    }\n    input{\n        background-color: ${props => !props.valid ? \"rgba(255,0,0,0.1)\" : \"\" };\n        border: 2px solid ${props => !props.valid ? props.theme.colors.error : props.theme.colors.gray[2]};\n        border-radius: 4px;\n        font-size: 16px;\n        padding: 8px 12px;\n        width: 100%;\n        transition: all 0.3s;\n        &:HOVER, &:FOCUS{\n            border-color: ${props => !props.valid ? props.theme.colors.error : props.theme.colors.brand[2]};\n        }\n        &.small{\n            width: calc(100% - 80px);\n            display: inline-block;\n            vertical-align: middle;\n        }\n    }\n`;\n\nexport class Input extends React.Component<NumericInputProps, NumericInputState> {\n\n    onChange(value: string) {\n        this.props.onChange(value);\n        const cfg = this.props.config;\n        if (cfg.onValueChange && validate(cfg, value)) {\n            cfg.onValueChange(convertInternalToExternalValue(cfg, value));\n        }\n    }\n\n    render() {\n        let cfg = this.props.config;\n        let class_names = \"user_input numeric_input\";\n        if (cfg.class_name) {\n            class_names += \" \" + cfg.class_name;\n        }\n        const validation_error = validate(cfg, this.props.value);\n\n        return (\n            <NumericInputContainer\n                className={class_names}\n                valid={!validation_error || !this.props.display_error_message}\n            >\n                { cfg.label ? <p>{ cfg.label }</p> : null }\n                { cfg.message ? <p className=\"message\">{ cfg.message }</p> : null }\n                { validation_error && this.props.display_error_message && validation_error.length > 0 ? <p className=\"validation_error\">{ validation_error }</p> : null }\n                <input\n                    type=\"text\"\n                    autoFocus={this.props.autofocus || false}\n                    value={this.props.value}\n                    onChange={e => this.onChange(e.target.value)}\n                />\n            </NumericInputContainer>\n        );\n    }\n}\n\nexport function validate(cfg: NumericInputConfig, value: string): null|string {\n    if (cfg.validationCB) {\n        return cfg.validationCB(value);\n    }\n    let messages: string[] = [];\n    if (cfg.number_type === \"integer\") {\n        let parsed = parseInt(value, 10);\n        if (!Number.isNaN(parsed) && Number.isFinite(parsed) && Number.isSafeInteger(parsed) && parsed.toString() === value.toString().trim()) {\n            if (typeof cfg.max === \"number\") {\n                if (parsed > cfg.max) {\n                    messages.push(oh.translate(\"user_input_value_greater_than_allowed\") + \". \" + oh.translate(\"user_input_maximum\") + \": \" + cfg.max + \".\");\n                }\n            }\n            if (typeof cfg.min === \"number\") {\n                if (parsed < cfg.min) {\n                    messages.push(oh.translate(\"user_input_value_less_than_allowed\") + \". \" + oh.translate(\"user_input_minimum\") + \": \" + cfg.min + \".\");\n                }\n            }\n            if (messages.length > 0) {\n                return messages.join(' ');\n            }\n            return null;\n        }\n        return oh.translate(\"user_input_invalid_integer\");\n    }\n\n    let parsed = parseFloat(value);\n    if (!Number.isNaN(parsed) && Number.isFinite(parsed) && parsed.toString() === value.toString().trim()) {\n        if (typeof cfg.max === \"number\") {\n            if (parsed > cfg.max) {\n                messages.push(oh.translate(\"user_input_value_greater_than_allowed\") + \". \" + oh.translate(\"user_input_maximum\") + \": \" + cfg.max + \".\");\n            }\n        }\n        if (typeof cfg.min === \"number\") {\n            if (parsed < cfg.min) {\n                messages.push(oh.translate(\"user_input_value_less_than_allowed\") + \". \" + oh.translate(\"user_input_minimum\") + \": \" + cfg.min + \".\");\n            }\n        }\n        if (messages.length > 0) {\n            return messages.join(' ');\n        }\n        return null;\n    }\n    return oh.translate(\"user_input_invalid_float\");\n}\n\nexport function validateConfig(cfg: NumericInputConfig): null|string {\n    if (cfg.number_type !== \"integer\" && cfg.number_type !== \"float\") {\n        return \"UserInput: Numeric input config 'number_type' must be 'float' or 'integer'.\";\n    }\n\n    return null;\n}\n\nexport function convertInternalToExternalValue(cfg: NumericInputConfig, value: string): number {\n    if (cfg.number_type === \"integer\") {\n        let parsed = parseInt(value, 10);\n        if (!Number.isNaN(parsed) && Number.isFinite(parsed) && Number.isSafeInteger(parsed) && parsed.toString(10) === value.trim()) {\n            return parsed;\n        }\n        return cfg.default_value;\n    }\n\n    let parsed = parseFloat(value);\n    if (!Number.isNaN(parsed) && Number.isFinite(parsed) && parsed.toString() === value.trim()) {\n        return parsed;\n    }\n    return cfg.default_value;\n}\n\nexport function convertExternalToInternalValue(cfg: NumericInputConfig, value: number): string {\n    return value.toString();\n}"]}