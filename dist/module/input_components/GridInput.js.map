{"version":3,"sources":["../src/module/input_components/GridInput.tsx"],"names":[],"mappings":"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","file":"GridInput.js","sourcesContent":["import * as React from 'react';\nimport styled from '../styling';\nimport { GridSelectOption } from '../.';\n\nexport type GridType = \"icons\" | \"colors\";\n\nexport interface GridInputConfig {\n    type: \"grid\";\n    key: string;\n    default_value: string;\n    label?: string;\n    grid_type: GridType;\n    options: any;\n    class_name?: string;\n    message?: string;\n    /** TODO: Implement tooltip */\n    tooltip?: string;\n    onValueChange?: (value: string|number) => void;\n}\nexport interface GridInputProps {\n    value: any;\n    config: GridInputConfig;\n    onChange: (value: string|number) => void;\n}\n\ninterface GridInputStyleProps {\n    grid_type: GridType;\n    color?: string;\n}\n\nconst GridInputContainer = styled.div<GridInputStyleProps>`\n    text-align: left;\n    padding: 16px 20px !important;\n    p, .bool_block, .bool_input{\n        vertical-align: middle;\n        display: inline-block;\n    }\n    p{\n        color: ${props => props.theme.colors.dark[1]};\n        font-size: 14px;\n        margin-bottom: 12px;\n        font-weight: bold;\n    }\n    p.message{\n        color: ${props => props.theme.colors.dark[2]};\n        font-size: 12px;\n        margin-bottom: 6px;\n        font-weight: normal;\n        font-style: italic;\n    }\n    .grid_block{\n        border-radius: 4px;\n        background-color: ${props => props.theme.colors.border};\n        padding: 4px;\n        display: grid;\n        grid-template-columns: ${props => props.grid_type === 'colors' || props.grid_type === 'icons' ? 'repeat(6, 1fr)' : 'repeat( auto-fit, minmax(120px, 1fr) )'};\n        grid-gap: 4px 4px;\n    }\n`;\n\nconst StyledGridItem = styled.div<GridInputStyleProps>`\n    box-shadow: 0 2px 3px rgba(38, 38, 38, 0.12);\n    background-color: #fff;\n    cursor: pointer;\n    border-radius: 4px;\n    padding: ${props => props.grid_type === 'icons' ? '6px 0' : '16px 0'};\n    height: ${props => props.grid_type === 'colors' || props.grid_type === 'icons' ? '44px' : 'unset'};\n    text-align: center;\n    font-size: 16px;\n    &:HOVER{\n        background-color: ${props => props.grid_type === 'colors' ? props.color : props.theme.colors.dark[1]};\n        opacity: 0.5;\n        color: #fff;\n    }\n    &.active{\n        background-color: ${props => props.grid_type === 'colors' ? props.color : props.theme.colors.dark[1]};\n        color: #fff;\n        font-weight: bold;\n        &:HOVER{\n            opacity: 1;\n        }\n    }\n    span{\n        display: ${props => props.grid_type === 'colors' || props.grid_type === 'icons' ? 'none' : 'inline-block'};\n    }\n    svg{\n        width: 30px;\n        height: 30px;\n    }\n`;\n\nexport class Input extends React.Component<GridInputProps, any> {\n    onChange(value: string|number) {\n        const cfg = this.props.config;\n        this.props.onChange(value);\n        if (cfg.onValueChange) {\n            cfg.onValueChange(getParsedValue(cfg, value));\n        }\n    }\n    render() {\n        let cfg = this.props.config;\n        let class_names = \"user_input grid_input\";\n        if (cfg.class_name) {\n            class_names += \" \" + cfg.class_name;\n        }\n\n        return (\n            <GridInputContainer\n                grid_type={cfg.grid_type}\n                className={class_names}\n            >\n                { cfg.label ? <p>{ cfg.label }</p> : null }\n                { cfg.message ? <p className=\"message\">{ cfg.message }</p> : null }\n                <div className=\"grid_block\">\n                    {\n                        cfg.options.map((item: GridSelectOption, i: number) => {\n                            return (\n                                <StyledGridItem\n                                    color={item.color}\n                                    grid_type={cfg.grid_type}\n                                    key={i}\n                                    className={`grid_item ${this.props.value === item.value ? 'active' : ''}`}\n                                    onClick={() => {\n                                        this.onChange(item.value);\n                                    }}\n                                >\n                                    { cfg.grid_type === 'icons' ? null : <span>{item.label}</span> }\n                                </StyledGridItem>\n                            );\n                        })\n                    }\n                </div>\n            </GridInputContainer>\n        );\n    }\n}\n\nexport function validate(cfg: GridInputConfig, value: string): null|string {\n    return null;\n}\n\nexport function validateConfig(cfg: GridInputConfig): null|string {\n    if (validate(cfg, cfg.default_value)) {\n        return \"UserInput: Invalid default_value for Grid.\";\n    }\n\n    return null;\n}\n\nexport function getParsedValue(cfg: GridInputConfig, value: string|number): string|number {\n    return value;\n}\n"]}