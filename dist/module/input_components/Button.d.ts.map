{"version":3,"sources":["../src/module/input_components/Button.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,MAAM,WAAW,YAAY;IACzB,IAAI,EAAE,QAAQ,GAAC,SAAS,CAAC;IACzB,GAAG,EAAE,MAAM,CAAC;IACZ,KAAK,EAAE,MAAM,CAAC;IACd,aAAa,EAAE,GAAG,CAAC;IACnB,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,GAAG,CAAC,EAAE,OAAO,CAAC;IACd,qFAAqF;IACrF,MAAM,CAAC,EAAE,OAAO,CAAC;IACjB,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,IAAI,CAAC,EAAE,OAAO,CAAC;IACf,KAAK,CAAC,EAAE,OAAO,CAAC;IAChB,GAAG,CAAC,EAAE,OAAO,CAAC;IACd,KAAK,CAAC,EAAE,OAAO,CAAC;IAChB,IAAI,CAAC,EAAE,OAAO,CAAC;IACf,KAAK,CAAC,EAAE,OAAO,CAAC;IAChB,SAAS,CAAC,EAAE,OAAO,CAAC;IACpB,OAAO,CAAC,EAAE,MAAM,IAAI,CAAC;IACrB,aAAa,CAAC,EAAE,MAAM,IAAI,CAAC;CAC9B;AACD,MAAM,WAAW,WAAW;IACxB,MAAM,EAAE,YAAY,CAAC;IACrB,YAAY,CAAC,EAAE,MAAM,IAAI,CAAC;IAC1B,YAAY,CAAC,EAAE,MAAM,IAAI,CAAC;IAC1B,OAAO,EAAE,MAAM,IAAI,CAAC;IACpB,QAAQ,EAAE,OAAO,CAAC;CACrB;AAuED,qBAAa,KAAM,SAAQ,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,GAAG,CAAC;IAExD,MAAM;CA+BT;AAED,wBAAgB,QAAQ,CAAC,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG,GAAG,IAAI,GAAC,MAAM,CAEnE;AAED,wBAAgB,cAAc,CAAC,GAAG,EAAE,YAAY,GAAG,IAAI,GAAC,MAAM,CAM7D;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG,GAAG,GAAG,CAEjF;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG,GAAG,GAAG,CAEjF","file":"Button.d.ts","sourcesContent":["import * as React from 'react';\nimport styled from '../styling';\nexport interface ButtonConfig {\n    type: \"button\"|\"confirm\";\n    key: string;\n    label: string;\n    default_value: any;\n    class_name?: string;\n    big?: boolean;\n    /** Should the buttons background color be filled in or transparent? Default true. */\n    filled?: boolean;\n    disabled?: boolean;\n    dark?: boolean;\n    light?: boolean;\n    red?: boolean;\n    green?: boolean;\n    teal?: boolean;\n    block?: boolean;\n    autofocus?: boolean;\n    onClick?: () => void;\n    onValueChange?: () => void;\n}\nexport interface ButtonProps {\n    config: ButtonConfig;\n    onMouseEnter?: () => void;\n    onMouseLeave?: () => void;\n    onClick: () => void;\n    disabled: boolean;\n}\ninterface ContainerStyleProps {\n    filled: boolean;\n    block: boolean;\n}\n\nconst ButtonContainer = styled(\"button\")<ContainerStyleProps> `\n    font-size: 14px;\n    user-select: none;\n    border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.brand[0]};\n    display: ${props => props.block ? 'block' : 'inline-block'};\n    width: ${props => props.block ? '100%' : 'unset'};\n    cursor: pointer;\n    border-radius: 200px;\n    background-color: ${props => props.filled ? props.theme.colors.brand[0] : 'transparent'};\n    color: #fff;\n    text-align: center;\n    padding: 12px 20px;\n    font-weight: bold;\n    transition: all 0.3s;\n    &.big{\n        padding: 20px 44px;\n    }\n    &.disabled{\n        pointer-events: none;\n        opacity: 0.4;\n    }\n    &.light{\n        background-color: ${props => props.filled ? props.theme.colors.brand[1] : 'transparent'};\n        border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.brand[1]};\n    }\n    &.dark{\n        background-color: ${props => props.filled ? props.theme.colors.dark[0] : 'transparent'};\n        border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.dark[0]};\n        &:HOVER{\n            background-color: ${props => props.filled ? props.theme.colors.dark[2] : props.theme.colors.dark[2]};\n            border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.dark[2]};\n        }\n    }\n    &.red{\n        background-color: ${props => props.filled ? props.theme.colors.red[1] : 'transparent'};\n        border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.red[1]};\n        &:HOVER{\n            background-color: ${props => props.filled ? props.theme.colors.red[3] : props.theme.colors.red[0]};\n            border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.red[0]};\n        }\n    }\n    &.green{\n        background-color: ${props => props.filled ? props.theme.colors.green[1] : 'transparent'};\n        border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.green[1]};\n        &:HOVER{\n            background-color: ${props => props.filled ? props.theme.colors.green[2] : props.theme.colors.green[2]};\n            border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.green[2]};\n        }\n    }\n    &.teal{\n        background-color: ${props => props.filled ? props.theme.colors.teal[1] : 'transparent'};\n        border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.teal[1]};\n        &:HOVER{\n            background-color: ${props => props.filled ? props.theme.colors.teal[2] : props.theme.colors.teal[2]};\n            border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.teal[2]};\n        }\n    }\n    &:HOVER{\n        background-color: ${props => props.filled ? props.theme.colors.brand[2] : props.theme.colors.brand[0]};\n        border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.brand[0]};\n        box-shadow: 0 4px 5px rgba(0,0,0,0.1);\n    }\n`;\n\n\nexport class Input extends React.Component<ButtonProps, any> {\n\n    render() {\n        let cfg = this.props.config;\n        let class_names = \"user_input button_input\";\n        if (cfg.class_name) {\n            class_names += \" \" + cfg.class_name;\n        }\n        let classes = [];\n        if (cfg.dark) { classes.push('dark'); }\n        if (cfg.light) { classes.push('light'); }\n        if (cfg.red) { classes.push('red'); }\n        if (cfg.green) { classes.push('green'); }\n        if (cfg.teal) { classes.push('teal'); }\n        if (cfg.disabled || this.props.disabled) { classes.push('disabled'); }\n        if (cfg.big) { classes.push('big'); }\n        class_names += \" \" + classes.join(\" \");\n\n        return (\n            <ButtonContainer\n                onMouseEnter={() => this.props.onMouseEnter ? this.props.onMouseEnter() : null}\n                onMouseLeave={() => this.props.onMouseLeave ? this.props.onMouseLeave() : null}\n                block={(cfg.block) ? true : false}\n                filled={(cfg.filled === false) ? false : true}\n                disabled={this.props.disabled || cfg.disabled || false}\n                autoFocus={cfg.autofocus || false}\n                className={class_names}\n                onClick={() => this.props.onClick()}\n            >\n                {cfg.label}\n            </ButtonContainer>\n        );\n    }\n}\n\nexport function validate(cfg: ButtonConfig, value: any): null|string {\n    return null;\n}\n\nexport function validateConfig(cfg: ButtonConfig): null|string {\n    if (validate(cfg, cfg.default_value)) {\n        return \"UserInput: Invalid default_value for Button.\";\n    }\n\n    return null;\n}\n\nexport function convertInternalToExternalValue(cfg: ButtonConfig, value: any): any {\n    return null;\n}\n\nexport function convertExternalToInternalValue(cfg: ButtonConfig, value: any): any {\n    return value;\n}"]}