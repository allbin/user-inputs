{"version":3,"sources":["../src/module/input_components/TriStateInput.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,mBAAmB,EAAE,MAAM,MAAM,CAAC;AAE3C,MAAM,WAAW,mBAAmB;IAChC,IAAI,EAAE,WAAW,CAAC;IAClB,GAAG,EAAE,MAAM,CAAC;IACZ,aAAa,EAAE,MAAM,GAAC,MAAM,CAAC;IAC7B,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,OAAO,EAAE,mBAAmB,EAAE,CAAC;IAC/B,WAAW,CAAC,EAAE,MAAM,CAAC;IACrB,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,kBAAkB,CAAC,EAAE,MAAM,CAAC;IAC5B,UAAU,CAAC,EAAE,OAAO,CAAC;IACrB,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,8BAA8B;IAC9B,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,GAAC,MAAM,KAAK,IAAI,CAAC;IAC/C,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,GAAC,MAAM,KAAK,IAAI,GAAC,MAAM,CAAC;CACxD;AACD,MAAM,WAAW,kBAAkB;IAC/B,KAAK,EAAE,MAAM,GAAC,MAAM,CAAC;IACrB,MAAM,EAAE,mBAAmB,CAAC;IAC5B,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,GAAC,MAAM,KAAK,IAAI,CAAC;IACzC,qBAAqB,EAAE,OAAO,CAAC;CAClC;AAyDD,qBAAa,KAAM,SAAQ,KAAK,CAAC,SAAS,CAAC,kBAAkB,EAAE,mBAAmB,CAAC;IAC/E,QAAQ,CAAC,KAAK,EAAE,MAAM,GAAC,MAAM;IAO7B,MAAM;CAwCT;AAED,wBAAgB,QAAQ,CAAC,GAAG,EAAE,mBAAmB,EAAE,KAAK,EAAE,MAAM,GAAC,MAAM,GAAG,IAAI,GAAC,MAAM,CAKpF;AAED,wBAAgB,cAAc,CAAC,GAAG,EAAE,mBAAmB,GAAG,IAAI,GAAC,MAAM,CAMpE;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,mBAAmB,EAAE,KAAK,EAAE,MAAM,GAAC,MAAM,GAAG,MAAM,GAAC,MAAM,CAE5G;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,mBAAmB,EAAE,KAAK,EAAE,MAAM,GAAC,MAAM,GAAG,MAAM,GAAC,MAAM,CAE5G","file":"TriStateInput.d.ts","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { TriStateInputOption } from '../.';\n\nexport interface TriStateInputConfig {\n    type: \"tri_state\";\n    key: string;\n    default_value: string|number;\n    label?: string;\n    options: TriStateInputOption[];\n    placeholder?: string;\n    class_name?: string;\n    no_options_message?: string;\n    searchable?: boolean;\n    disabled?: boolean;\n    message?: string;\n    /** TODO: Implement tooltip */\n    tooltip?: string;\n    onValueChange?: (value: string|number) => void;\n    validationCB?: (value: string|number) => null|string;\n}\nexport interface TriStateInputProps {\n    value: string|number;\n    config: TriStateInputConfig;\n    onChange: (value: string|number) => void;\n    display_error_message: boolean;\n}\n\ninterface ContainerStyleProps {\n    valid: boolean;\n}\n\nconst TriStateInputContainer = styled(\"div\")<ContainerStyleProps> `\n    text-align: left;\n    p.tri_state_label {\n        color: ${props => props.theme.colors.dark[1]};\n        font-size: 14px;\n        margin-bottom: 12px;\n        font-weight: bold;\n    }\n    p.message{\n        color: ${props => props.theme.colors.dark[2]};\n        font-size: 12px;\n        margin-bottom: 6px;\n        font-weight: normal;\n        font-style: italic;\n    }\n    p.validation_error{\n        color: ${props => props.theme.colors.red[0]};\n        font-size: 14px;\n        margin-bottom: 4px;\n        font-weight: bold;\n        font-style: italic;\n    }\n    .grid_block{\n        background-color: ${props => props.theme.colors.gray[3]};\n        text-align: center;\n        border-radius: 50px;\n        position: relative;\n        .grid_block_bg{\n            background-color: ${props => props.theme.colors.blue[1]};\n            position: absolute;\n            border-radius: 50px;\n            width: 33%;\n            top: 0;\n            bottom: 0;\n            transition: all 0.4s;\n        }\n        .grid_item{\n            position: relative;\n            cursor: pointer;\n            padding: 20px 0;\n            font-size: 16px;\n            display: inline-block;\n            width: 33%;\n            &.active{\n                font-weight: bold;\n                color: #fff;\n            }\n        }\n    }\n`;\n\nexport class Input extends React.Component<TriStateInputProps, TriStateInputConfig> {\n    onChange(value: string|number) {\n        const cfg = this.props.config;\n        this.props.onChange(value);\n        if (cfg.onValueChange) {\n            cfg.onValueChange(convertInternalToExternalValue(cfg, value));\n        }\n    }\n    render() {\n        let cfg = this.props.config;\n        let class_names = \"user_input tri_state_input\";\n        if (cfg.class_name) {\n            class_names += \" \" + cfg.class_name;\n        }\n\n        const LEFT_POSITION = cfg.options.findIndex(option => option.value === this.props.value);\n\n        const validation_error = validate(cfg, this.props.value);\n\n        return (\n            <TriStateInputContainer\n                className={class_names}\n                valid={!validation_error || !this.props.display_error_message}\n            >\n                { cfg.label ? <p className=\"tri_state_label\">{ cfg.label }</p> : null }\n                { cfg.message ? <p className=\"message\">{ cfg.message }</p> : null }\n                { validation_error && this.props.display_error_message && validation_error.length > 0 ? <p className=\"validation_error\">{ validation_error }</p> : null }\n                <div className=\"grid_block\">\n                    <div className=\"grid_block_bg\" style={{left: 33.333333333333 * LEFT_POSITION + '%'}}></div>\n                    {\n                        cfg.options.map((item, i) => {\n                            return (\n                                <div\n                                    key={i}\n                                    className={`grid_item ${this.props.value === item.value ? 'active' : ''}`}\n                                    onClick={() => {\n                                        this.onChange(item.value);\n                                    }}\n                                    >\n                                    <span>{item.label}</span>\n                                </div>\n                            );\n                        })\n                    }\n                </div>\n            </TriStateInputContainer>\n        );\n    }\n}\n\nexport function validate(cfg: TriStateInputConfig, value: string|number): null|string {\n    if (cfg.validationCB) {\n        return cfg.validationCB(value);\n    }\n    return null;\n}\n\nexport function validateConfig(cfg: TriStateInputConfig): null|string {\n    if (validate(cfg, cfg.default_value)) {\n        return \"UserInput: Invalid default_value for TriState.\";\n    }\n\n    return null;\n}\n\nexport function convertInternalToExternalValue(cfg: TriStateInputConfig, value: string|number): string|number {\n    return value;\n}\n\nexport function convertExternalToInternalValue(cfg: TriStateInputConfig, value: string|number): string|number {\n    return value;\n}"]}