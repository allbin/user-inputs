{"version":3,"sources":["../src/module/input_components/TextInput.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAK/B,OAAO,EAAE,WAAW,EAAE,MAAM,MAAM,CAAC;AAEnC,MAAM,WAAW,eAAe;IAC5B,IAAI,EAAE,MAAM,CAAC;IACb,GAAG,EAAE,MAAM,CAAC;IACZ,aAAa,EAAE,MAAM,CAAC;IACtB,OAAO,CAAC,EAAE,OAAO,CAAC;IAClB,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,8BAA8B;IAC9B,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,IAAI,CAAC,EAAE,OAAO,CAAC;IACf,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC;IACxC,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,GAAC,MAAM,CAAC;CACjD;AACD,MAAM,WAAW,cAAc;IAC3B,KAAK,EAAE,MAAM,CAAC;IACd,MAAM,EAAE,eAAe,CAAC;IACxB,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC;IAClC,qBAAqB,EAAE,OAAO,CAAC;IAC/B,SAAS,CAAC,EAAE,OAAO,CAAC;CACvB;AAED,UAAU,cAAc;IACpB,sBAAsB,EAAE,OAAO,CAAC;CACnC;AAgGD,qBAAa,KAAM,SAAQ,KAAK,CAAC,SAAS,CAAC,cAAc,EAAE,cAAc,CAAC;IACtE,qBAAqB,EAAE,cAAc,GAAC,IAAI,CAAC;IAC3C,UAAU,EAAE,CAAC,IAAI,EAAE,WAAW,KAAK,IAAI,CAAC;gBAE5B,KAAK,EAAE,cAAc;IAqBjC,mBAAmB;IA6CnB,gBAAgB,CAAC,GAAG,EAAE,eAAe;IAwCrC,QAAQ,CAAC,KAAK,EAAE,MAAM;IAQtB,MAAM;CAiCT;AAED,wBAAgB,QAAQ,CAAC,GAAG,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,GAAG,IAAI,GAAC,MAAM,CAKzE;AAED,wBAAgB,cAAc,CAAC,GAAG,EAAE,eAAe,GAAG,IAAI,GAAC,MAAM,CAIhE;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,GAAG,MAAM,CAK1F;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,eAAe,EAAE,KAAK,EAAE,GAAG,GAAG,MAAM,CAEvF","file":"TextInput.d.ts","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nconst Quagga = require('quagga');\nimport { FaBarcode } from 'react-icons/fa';\nimport oh from 'output-helpers';\nimport { LooseObject } from '../.';\n\nexport interface TextInputConfig {\n    type: \"text\";\n    key: string;\n    default_value: string;\n    barcode?: boolean;\n    class_name?: string;\n    label?: string;\n    message?: string;\n    /** TODO: Implement tooltip */\n    tooltip?: string;\n    trim?: boolean;\n    onValueChange?: (value: string) => void;\n    validationCB?: (value: string) => null|string;\n}\nexport interface TextInputProps {\n    value: string;\n    config: TextInputConfig;\n    onChange: (value: string) => void;\n    display_error_message: boolean;\n    autofocus?: boolean;\n}\n\ninterface TextInputState {\n    barcode_stream_visible: boolean;\n}\n\ninterface ContainerStyleProps {\n    valid: boolean;\n}\n\nconst TextInputContainer = styled(\"div\")<ContainerStyleProps> `\n    text-align: left;\n    p{\n        color: ${props => props.theme.colors.dark[1]};\n        font-size: 14px;\n        margin-bottom: 8px;\n        font-weight: bold;\n    }\n    p.message{\n        color: ${props => props.theme.colors.dark[2]};\n        font-size: 12px;\n        margin-bottom: 6px;\n        font-weight: normal;\n        font-style: italic;\n    }\n    p.validation_error{\n        color: ${props => props.theme.colors.red[0]};\n        font-size: 14px;\n        margin-bottom: 4px;\n        font-weight: bold;\n        font-style: italic;\n    }\n    input{\n        background-color: ${props => !props.valid ? \"rgba(255,0,0,0.1)\" : \"\" };\n        border: 2px solid ${props => !props.valid ? props.theme.colors.error : props.theme.colors.gray[2]};\n        border-radius: 4px;\n        font-size: 16px;\n        padding: 8px 12px;\n        width: 100%;\n        transition: all 0.3s;\n        &:HOVER, &:FOCUS{\n            border-color: ${props => !props.valid ? props.theme.colors.error : props.theme.colors.brand[2]};\n        }\n        &.small{\n            width: calc(100% - 80px);\n            display: inline-block;\n            vertical-align: middle;\n        }\n    }\n    .barcode_reader{\n        display: inline-block;\n        width: 70px;\n        .barcode_btn{\n            background-color: #1378ef;\n            margin-left: 10px;\n            width: 70px;\n            text-align: center;\n            height: 50px;\n            vertical-align: middle;\n            border-radius: 4px;\n            svg{\n                height: 50px;\n                width: 36px;\n                vertical-align: middle;\n                fill: #fff;\n            }\n        }\n    }\n\n    .barcode_stream_target{\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 93%;\n        z-index: 1000000;\n        &.show {\n            display: block;\n        }\n    }\n    .barcode_stream_target_close_btn{\n        text-align: center;\n        padding: 20px;\n        background-color: #EB4D44;\n        color: #fff;\n        font-weight: bold;\n        border-radius: 4px;\n        box-shadow: 0 5px 10px rgba(0,0,0,0.2);\n        /* width: 100%; */\n        bottom: 20px;\n        left: 20px;\n        right: 20px;\n        z-index: 16000000;\n        position: absolute;\n        &:HOVER{\n            background-color: #c12a22;\n        }\n    }\n`;\nexport class Input extends React.Component<TextInputProps, TextInputState> {\n    barcode_stream_target: HTMLDivElement|null;\n    detectedCB: (data: LooseObject) => void;\n\n    constructor(props: TextInputProps) {\n        super(props);\n\n        this.barcode_stream_target = null;\n\n        this.state = {\n            barcode_stream_visible: false\n        };\n\n        this.detectedCB = (data) => {\n            Quagga.offDetected(this.detectedCB);\n            Quagga.stop();\n            let result = data.codeResult.code;\n            this.props.onChange(result);\n            this.setState({\n                barcode_stream_visible: false\n            });\n        };\n\n    }\n\n    startBarcodeReading() {\n        if (!this.barcode_stream_target) {\n            return;\n        }\n        let quagga_config = {\n            numOfWorkers: navigator.hardwareConcurrency,\n            locate: true,\n            inputStream: {\n                name: \"Live\",\n                type: \"LiveStream\",\n                constraints: {\n                    width: 1280,\n                    height: 720,\n                    facingMode: \"environment\"\n                },\n                target: this.barcode_stream_target\n            },\n            frequency: 5,\n            decoder: {\n                readers: [\"code_128_reader\", \"code_39_reader\", \"ean_reader\"]\n            },\n            locator: {\n                halfSample: true,\n                patchSize: \"medium\"\n            }\n        };\n\n        this.setState({\n            barcode_stream_visible: true\n        });\n\n        Quagga.init(quagga_config, (err: any) => {\n            if (err) {\n                console.error(err);\n                throw err;\n            }\n\n            Quagga.onDetected(this.detectedCB);\n\n            Quagga.start();\n        });\n    }\n\n\n\n    renderBarcodeBtn(cfg: TextInputConfig) {\n        if (cfg.barcode !== true) {\n            return null;\n        }\n\n        let barcode_stream_classes = [\"barcode_stream_target\"];\n        if (this.state.barcode_stream_visible) {\n            barcode_stream_classes.push(\"show\");\n        }\n\n        return (\n            <div className=\"barcode_reader\">\n                <div className=\"barcode_btn\"\n                    onClick={() => {\n                        this.startBarcodeReading();\n                    }}\n                >\n                    <FaBarcode />\n                </div>\n                <div\n                    className={barcode_stream_classes.join(\" \")}\n                    ref={(ref) => { this.barcode_stream_target = ref; }}\n                >\n                    <div\n                        className={\"barcode_stream_target_close_btn\"}\n                        onClick={() => {\n                            Quagga.offDetected(this.detectedCB);\n                            Quagga.stop();\n                            this.setState({\n                                barcode_stream_visible: false\n                            });\n                        }}\n                    >\n                        { oh.translate(\"user_input_cancel\") }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    onChange(value: string) {\n        const cfg = this.props.config;\n        this.props.onChange(value);\n        if (cfg.onValueChange && !validate(cfg, value)) {\n            cfg.onValueChange(convertInternalToExternalValue(cfg, value));\n        }\n    }\n\n    render() {\n        let cfg = this.props.config;\n        let class_names = \"user_input text_input\";\n        if (cfg.class_name) {\n            class_names += \" \" + cfg.class_name;\n        }\n\n        let input_class_name = \"full\";\n        if (cfg.barcode === true) {\n            input_class_name = \"small\";\n        }\n\n        const validation_error = validate(cfg, this.props.value);\n\n        return (\n            <TextInputContainer\n                className={class_names}\n                valid={!validation_error || !this.props.display_error_message}\n            >\n                { cfg.label ? <p>{ cfg.label }</p> : null }\n                { cfg.message ? <p className=\"message\">{ cfg.message }</p> : null }\n                { validation_error && this.props.display_error_message && validation_error.length > 0 ? <p className=\"validation_error\">{ validation_error }</p> : null }\n                <input\n                    className={input_class_name}\n                    autoFocus={this.props.autofocus || false}\n                    type=\"text\"\n                    value={this.props.value}\n                    onChange={e => this.onChange(e.target.value)}\n                />\n                { this.renderBarcodeBtn(cfg) }\n            </TextInputContainer>\n        );\n    }\n}\n\nexport function validate(cfg: TextInputConfig, value: string): null|string {\n    if (cfg.validationCB) {\n        return cfg.validationCB(value);\n    }\n    return null;\n}\n\nexport function validateConfig(cfg: TextInputConfig): null|string {\n\n\n    return null;\n}\n\nexport function convertInternalToExternalValue(cfg: TextInputConfig, value: string): string {\n    if (!cfg.trim) {\n        return value;\n    }\n    return value.trim();\n}\n\nexport function convertExternalToInternalValue(cfg: TextInputConfig, value: any): string {\n    return value.toString();\n}\n"]}