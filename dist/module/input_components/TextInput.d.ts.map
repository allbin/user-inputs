{"version":3,"sources":["../src/module/input_components/TextInput.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAK/B,OAAO,EAAE,WAAW,EAAE,MAAM,MAAM,CAAC;AAEnC,MAAM,WAAW,eAAe;IAC5B,IAAI,EAAE,MAAM,CAAC;IACb,GAAG,EAAE,MAAM,CAAC;IACZ,aAAa,EAAE,MAAM,CAAC;IACtB,OAAO,CAAC,EAAE,OAAO,CAAC;IAClB,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,8BAA8B;IAC9B,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,IAAI,CAAC,EAAE,OAAO,CAAC;IACf,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC;IACxC,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,GAAC,MAAM,CAAC;CACjD;AACD,MAAM,WAAW,cAAc;IAC3B,KAAK,EAAE,MAAM,CAAC;IACd,MAAM,EAAE,eAAe,CAAC;IACxB,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,IAAI,KAAK,IAAI,CAAC;IAClD,qBAAqB,EAAE,OAAO,CAAC;IAC/B,SAAS,CAAC,EAAE,OAAO,CAAC;CACvB;AAED,UAAU,cAAc;IACpB,sBAAsB,EAAE,OAAO,CAAC;CACnC;AAiGD,qBAAa,KAAM,SAAQ,KAAK,CAAC,SAAS,CAAC,cAAc,EAAE,cAAc,CAAC;IACtE,qBAAqB,EAAE,cAAc,GAAC,IAAI,CAAC;IAC3C,UAAU,EAAE,CAAC,IAAI,EAAE,WAAW,KAAK,IAAI,CAAC;gBAE5B,KAAK,EAAE,cAAc;IAsBjC,mBAAmB;IA6CnB,gBAAgB,CAAC,GAAG,EAAE,eAAe;IAwCrC,QAAQ,CAAC,KAAK,EAAE,MAAM;IAUtB,MAAM;CAiCT;AAED,wBAAgB,QAAQ,CAAC,GAAG,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,GAAG,IAAI,GAAC,MAAM,CAKzE;AAED,wBAAgB,cAAc,CAAC,GAAG,EAAE,eAAe,GAAG,IAAI,GAAC,MAAM,CAIhE;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,GAAG,MAAM,CAK1F;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,eAAe,EAAE,KAAK,EAAE,GAAG,GAAG,MAAM,CAEvF","file":"TextInput.d.ts","sourcesContent":["import * as React from 'react';\r\nimport styled from 'styled-components';\r\nconst Quagga = require('quagga');\r\nimport { FaBarcode } from 'react-icons/fa';\r\nimport oh from 'output-helpers';\r\nimport { LooseObject } from '../.';\r\n\r\nexport interface TextInputConfig {\r\n    type: \"text\";\r\n    key: string;\r\n    default_value: string;\r\n    barcode?: boolean;\r\n    class_name?: string;\r\n    label?: string;\r\n    message?: string;\r\n    /** TODO: Implement tooltip */\r\n    tooltip?: string;\r\n    trim?: boolean;\r\n    onValueChange?: (value: string) => void;\r\n    validationCB?: (value: string) => null|string;\r\n}\r\nexport interface TextInputProps {\r\n    value: string;\r\n    config: TextInputConfig;\r\n    onChange: (value: string, cb: () => void) => void;\r\n    display_error_message: boolean;\r\n    autofocus?: boolean;\r\n}\r\n\r\ninterface TextInputState {\r\n    barcode_stream_visible: boolean;\r\n}\r\n\r\ninterface ContainerStyleProps {\r\n    valid: boolean;\r\n}\r\n\r\nconst TextInputContainer = styled(\"div\")<ContainerStyleProps> `\r\n    text-align: left;\r\n    margin-bottom: ${props => props.theme.components.form.user_input.margin_bottom}px;\r\n    p{\r\n        color: ${props => props.theme.colors.dark[1]};\r\n        font-size: 14px;\r\n        margin-bottom: 8px;\r\n        font-weight: bold;\r\n    }\r\n    p.message{\r\n        color: ${props => props.theme.colors.dark[2]};\r\n        font-size: 12px;\r\n        margin-bottom: 6px;\r\n        font-weight: normal;\r\n        font-style: italic;\r\n    }\r\n    p.validation_error{\r\n        color: ${props => props.theme.colors.red[0]};\r\n        font-size: 14px;\r\n        margin-bottom: 4px;\r\n        font-weight: bold;\r\n        font-style: italic;\r\n    }\r\n    input{\r\n        background-color: ${props => !props.valid ? \"rgba(255,0,0,0.1)\" : \"\" };\r\n        border: 1px solid ${props => !props.valid ? props.theme.colors.error : props.theme.colors.border};\r\n        border-radius: 4px;\r\n        font-size: 16px;\r\n        padding: 8px 12px;\r\n        width: 100%;\r\n        transition: all 0.3s;\r\n        &:HOVER, &:FOCUS{\r\n            border-color: ${props => !props.valid ? props.theme.colors.error : props.theme.colors.brand[2]};\r\n        }\r\n        &.small{\r\n            width: calc(100% - 80px);\r\n            display: inline-block;\r\n            vertical-align: middle;\r\n        }\r\n    }\r\n    .barcode_reader{\r\n        display: inline-block;\r\n        width: 70px;\r\n        .barcode_btn{\r\n            background-color: #1378ef;\r\n            margin-left: 10px;\r\n            width: 70px;\r\n            text-align: center;\r\n            height: 50px;\r\n            vertical-align: middle;\r\n            border-radius: 4px;\r\n            svg{\r\n                height: 50px;\r\n                width: 36px;\r\n                vertical-align: middle;\r\n                fill: #fff;\r\n            }\r\n        }\r\n    }\r\n\r\n    .barcode_stream_target{\r\n        display: none;\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 93%;\r\n        z-index: 1000000;\r\n        &.show {\r\n            display: block;\r\n        }\r\n    }\r\n    .barcode_stream_target_close_btn{\r\n        text-align: center;\r\n        padding: 20px;\r\n        background-color: #EB4D44;\r\n        color: #fff;\r\n        font-weight: bold;\r\n        border-radius: 4px;\r\n        box-shadow: 0 5px 10px rgba(0,0,0,0.2);\r\n        /* width: 100%; */\r\n        bottom: 20px;\r\n        left: 20px;\r\n        right: 20px;\r\n        z-index: 16000000;\r\n        position: absolute;\r\n        &:HOVER{\r\n            background-color: #c12a22;\r\n        }\r\n    }\r\n`;\r\nexport class Input extends React.Component<TextInputProps, TextInputState> {\r\n    barcode_stream_target: HTMLDivElement|null;\r\n    detectedCB: (data: LooseObject) => void;\r\n\r\n    constructor(props: TextInputProps) {\r\n        super(props);\r\n\r\n        this.barcode_stream_target = null;\r\n\r\n        this.state = {\r\n            barcode_stream_visible: false\r\n        };\r\n\r\n        this.detectedCB = (data) => {\r\n            Quagga.offDetected(this.detectedCB);\r\n            Quagga.stop();\r\n            let result = data.codeResult.code;\r\n            this.setState({\r\n                barcode_stream_visible: false\r\n            }, () => {\r\n                this.onChange(result);\r\n            });\r\n        };\r\n\r\n    }\r\n\r\n    startBarcodeReading() {\r\n        if (!this.barcode_stream_target) {\r\n            return;\r\n        }\r\n        let quagga_config = {\r\n            numOfWorkers: navigator.hardwareConcurrency,\r\n            locate: true,\r\n            inputStream: {\r\n                name: \"Live\",\r\n                type: \"LiveStream\",\r\n                constraints: {\r\n                    width: 1280,\r\n                    height: 720,\r\n                    facingMode: \"environment\"\r\n                },\r\n                target: this.barcode_stream_target\r\n            },\r\n            frequency: 5,\r\n            decoder: {\r\n                readers: [\"code_128_reader\", \"code_39_reader\", \"ean_reader\"]\r\n            },\r\n            locator: {\r\n                halfSample: true,\r\n                patchSize: \"medium\"\r\n            }\r\n        };\r\n\r\n        this.setState({\r\n            barcode_stream_visible: true\r\n        });\r\n\r\n        Quagga.init(quagga_config, (err: any) => {\r\n            if (err) {\r\n                console.error(err);\r\n                throw err;\r\n            }\r\n\r\n            Quagga.onDetected(this.detectedCB);\r\n\r\n            Quagga.start();\r\n        });\r\n    }\r\n\r\n\r\n\r\n    renderBarcodeBtn(cfg: TextInputConfig) {\r\n        if (cfg.barcode !== true) {\r\n            return null;\r\n        }\r\n\r\n        let barcode_stream_classes = [\"barcode_stream_target\"];\r\n        if (this.state.barcode_stream_visible) {\r\n            barcode_stream_classes.push(\"show\");\r\n        }\r\n\r\n        return (\r\n            <div className=\"barcode_reader\">\r\n                <div className=\"barcode_btn\"\r\n                    onClick={() => {\r\n                        this.startBarcodeReading();\r\n                    }}\r\n                >\r\n                    <FaBarcode />\r\n                </div>\r\n                <div\r\n                    className={barcode_stream_classes.join(\" \")}\r\n                    ref={(ref) => { this.barcode_stream_target = ref; }}\r\n                >\r\n                    <div\r\n                        className={\"barcode_stream_target_close_btn\"}\r\n                        onClick={() => {\r\n                            Quagga.offDetected(this.detectedCB);\r\n                            Quagga.stop();\r\n                            this.setState({\r\n                                barcode_stream_visible: false\r\n                            });\r\n                        }}\r\n                    >\r\n                        { oh.translate(\"user_input_cancel\") }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onChange(value: string) {\r\n        const cfg = this.props.config;\r\n        this.props.onChange(value, () => {\r\n            let ext_value = convertInternalToExternalValue(cfg, value);\r\n            if (cfg.onValueChange && !validate(cfg, ext_value)) {\r\n                cfg.onValueChange(ext_value);\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let cfg = this.props.config;\r\n        let class_names = \"user_input text_input\";\r\n        if (cfg.class_name) {\r\n            class_names += \" \" + cfg.class_name;\r\n        }\r\n\r\n        let input_class_name = \"full\";\r\n        if (cfg.barcode === true) {\r\n            input_class_name = \"small\";\r\n        }\r\n\r\n        const validation_error = validate(cfg, this.props.value);\r\n\r\n        return (\r\n            <TextInputContainer\r\n                className={class_names}\r\n                valid={!validation_error || !this.props.display_error_message}\r\n            >\r\n                { cfg.label ? <p>{ cfg.label }</p> : null }\r\n                { cfg.message ? <p className=\"message\">{ cfg.message }</p> : null }\r\n                { validation_error && this.props.display_error_message && validation_error.length > 0 ? <p className=\"validation_error\">{ validation_error }</p> : null }\r\n                <input\r\n                    className={input_class_name}\r\n                    autoFocus={this.props.autofocus || false}\r\n                    type=\"text\"\r\n                    value={this.props.value}\r\n                    onChange={e => this.onChange(e.target.value)}\r\n                />\r\n                { this.renderBarcodeBtn(cfg) }\r\n            </TextInputContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport function validate(cfg: TextInputConfig, value: string): null|string {\r\n    if (cfg.validationCB) {\r\n        return cfg.validationCB(value);\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function validateConfig(cfg: TextInputConfig): null|string {\r\n\r\n\r\n    return null;\r\n}\r\n\r\nexport function convertInternalToExternalValue(cfg: TextInputConfig, value: string): string {\r\n    if (!cfg.trim) {\r\n        return value;\r\n    }\r\n    return value.trim();\r\n}\r\n\r\nexport function convertExternalToInternalValue(cfg: TextInputConfig, value: any): string {\r\n    return value.toString();\r\n}\r\n"]}