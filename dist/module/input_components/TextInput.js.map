{"version":3,"sources":["../src/module/input_components/TextInput.tsx"],"names":[],"mappings":"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","file":"TextInput.js","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nconst Quagga = require('quagga');\nimport { FaBarcode } from 'react-icons/fa';\nimport oh from 'output-helpers';\nimport { LooseObject } from '../.';\n\nexport interface TextInputConfig {\n    type: \"text\";\n    key: string;\n    default_value: string;\n    barcode?: boolean;\n    class_name?: string;\n    label?: string;\n    message?: string;\n    /** TODO: Implement tooltip */\n    tooltip?: string;\n    trim?: boolean;\n    onValueChange?: (value: string) => void;\n    validationCB?: (value: string) => null|string;\n}\nexport interface TextInputProps {\n    value: string;\n    config: TextInputConfig;\n    onChange: (value: string, cb: () => void) => void;\n    display_error_message: boolean;\n    autofocus?: boolean;\n}\n\ninterface TextInputState {\n    barcode_stream_visible: boolean;\n}\n\ninterface ContainerStyleProps {\n    valid: boolean;\n}\n\nconst TextInputContainer = styled(\"div\")<ContainerStyleProps> `\n    text-align: left;\n    margin-bottom: ${props => props.theme.components.form.user_input.margin_bottom}px;\n    p{\n        color: ${props => props.theme.colors.dark[1]};\n        font-size: 14px;\n        margin-bottom: 8px;\n        font-weight: bold;\n    }\n    p.message{\n        color: ${props => props.theme.colors.dark[2]};\n        font-size: 12px;\n        margin-bottom: 6px;\n        font-weight: normal;\n        font-style: italic;\n    }\n    p.validation_error{\n        color: ${props => props.theme.colors.red[0]};\n        font-size: 14px;\n        margin-bottom: 4px;\n        font-weight: bold;\n        font-style: italic;\n    }\n    input{\n        background-color: ${props => !props.valid ? \"rgba(255,0,0,0.1)\" : \"\" };\n        border: 1px solid ${props => !props.valid ? props.theme.colors.error : props.theme.colors.border};\n        border-radius: 4px;\n        font-size: 16px;\n        padding: 8px 12px;\n        width: 100%;\n        transition: all 0.3s;\n        &:HOVER, &:FOCUS{\n            border-color: ${props => !props.valid ? props.theme.colors.error : props.theme.colors.brand[2]};\n        }\n        &.small{\n            width: calc(100% - 80px);\n            display: inline-block;\n            vertical-align: middle;\n        }\n    }\n    .barcode_reader{\n        display: inline-block;\n        width: 70px;\n        .barcode_btn{\n            background-color: #1378ef;\n            margin-left: 10px;\n            width: 70px;\n            text-align: center;\n            height: 50px;\n            vertical-align: middle;\n            border-radius: 4px;\n            svg{\n                height: 50px;\n                width: 36px;\n                vertical-align: middle;\n                fill: #fff;\n            }\n        }\n    }\n\n    .barcode_stream_target{\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 93%;\n        z-index: 1000000;\n        &.show {\n            display: block;\n        }\n    }\n    .barcode_stream_target_close_btn{\n        text-align: center;\n        padding: 20px;\n        background-color: #EB4D44;\n        color: #fff;\n        font-weight: bold;\n        border-radius: 4px;\n        box-shadow: 0 5px 10px rgba(0,0,0,0.2);\n        /* width: 100%; */\n        bottom: 20px;\n        left: 20px;\n        right: 20px;\n        z-index: 16000000;\n        position: absolute;\n        &:HOVER{\n            background-color: #c12a22;\n        }\n    }\n`;\nexport class Input extends React.Component<TextInputProps, TextInputState> {\n    barcode_stream_target: HTMLDivElement|null;\n    detectedCB: (data: LooseObject) => void;\n\n    constructor(props: TextInputProps) {\n        super(props);\n\n        this.barcode_stream_target = null;\n\n        this.state = {\n            barcode_stream_visible: false\n        };\n\n        this.detectedCB = (data) => {\n            Quagga.offDetected(this.detectedCB);\n            Quagga.stop();\n            let result = data.codeResult.code;\n            this.setState({\n                barcode_stream_visible: false\n            }, () => {\n                this.onChange(result);\n            });\n        };\n\n    }\n\n    startBarcodeReading() {\n        if (!this.barcode_stream_target) {\n            return;\n        }\n        let quagga_config = {\n            numOfWorkers: navigator.hardwareConcurrency,\n            locate: true,\n            inputStream: {\n                name: \"Live\",\n                type: \"LiveStream\",\n                constraints: {\n                    width: 1280,\n                    height: 720,\n                    facingMode: \"environment\"\n                },\n                target: this.barcode_stream_target\n            },\n            frequency: 5,\n            decoder: {\n                readers: [\"code_128_reader\", \"code_39_reader\", \"ean_reader\"]\n            },\n            locator: {\n                halfSample: true,\n                patchSize: \"medium\"\n            }\n        };\n\n        this.setState({\n            barcode_stream_visible: true\n        });\n\n        Quagga.init(quagga_config, (err: any) => {\n            if (err) {\n                console.error(err);\n                throw err;\n            }\n\n            Quagga.onDetected(this.detectedCB);\n\n            Quagga.start();\n        });\n    }\n\n\n\n    renderBarcodeBtn(cfg: TextInputConfig) {\n        if (cfg.barcode !== true) {\n            return null;\n        }\n\n        let barcode_stream_classes = [\"barcode_stream_target\"];\n        if (this.state.barcode_stream_visible) {\n            barcode_stream_classes.push(\"show\");\n        }\n\n        return (\n            <div className=\"barcode_reader\">\n                <div className=\"barcode_btn\"\n                    onClick={() => {\n                        this.startBarcodeReading();\n                    }}\n                >\n                    <FaBarcode />\n                </div>\n                <div\n                    className={barcode_stream_classes.join(\" \")}\n                    ref={(ref) => { this.barcode_stream_target = ref; }}\n                >\n                    <div\n                        className={\"barcode_stream_target_close_btn\"}\n                        onClick={() => {\n                            Quagga.offDetected(this.detectedCB);\n                            Quagga.stop();\n                            this.setState({\n                                barcode_stream_visible: false\n                            });\n                        }}\n                    >\n                        { oh.translate(\"user_input_cancel\") }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    onChange(value: string) {\n        const cfg = this.props.config;\n        this.props.onChange(value, () => {\n            let ext_value = convertInternalToExternalValue(cfg, value);\n            if (cfg.onValueChange && !validate(cfg, ext_value)) {\n                cfg.onValueChange(ext_value);\n            }\n        });\n    }\n\n    render() {\n        let cfg = this.props.config;\n        let class_names = \"user_input text_input\";\n        if (cfg.class_name) {\n            class_names += \" \" + cfg.class_name;\n        }\n\n        let input_class_name = \"full\";\n        if (cfg.barcode === true) {\n            input_class_name = \"small\";\n        }\n\n        const validation_error = validate(cfg, this.props.value);\n\n        return (\n            <TextInputContainer\n                className={class_names}\n                valid={!validation_error || !this.props.display_error_message}\n            >\n                { cfg.label ? <p>{ cfg.label }</p> : null }\n                { cfg.message ? <p className=\"message\">{ cfg.message }</p> : null }\n                { validation_error && this.props.display_error_message && validation_error.length > 0 ? <p className=\"validation_error\">{ validation_error }</p> : null }\n                <input\n                    className={input_class_name}\n                    autoFocus={this.props.autofocus || false}\n                    type=\"text\"\n                    value={this.props.value}\n                    onChange={e => this.onChange(e.target.value)}\n                />\n                { this.renderBarcodeBtn(cfg) }\n            </TextInputContainer>\n        );\n    }\n}\n\nexport function validate(cfg: TextInputConfig, value: string): null|string {\n    if (cfg.validationCB) {\n        return cfg.validationCB(value);\n    }\n    return null;\n}\n\nexport function validateConfig(cfg: TextInputConfig): null|string {\n\n\n    return null;\n}\n\nexport function convertInternalToExternalValue(cfg: TextInputConfig, value: string): string {\n    if (!cfg.trim) {\n        return value;\n    }\n    return value.trim();\n}\n\nexport function convertExternalToInternalValue(cfg: TextInputConfig, value: any): string {\n    return value.toString();\n}\n"]}