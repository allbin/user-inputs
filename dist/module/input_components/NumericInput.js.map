{"version":3,"sources":["../src/module/input_components/NumericInput.tsx"],"names":[],"mappings":"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","file":"NumericInput.js","sourcesContent":["import * as React from 'react';\r\nimport oh from 'output-helpers';\r\nimport styled from '../styling';\r\n\r\nexport interface NumericInputConfig {\r\n    type: \"numeric\";\r\n    key: string;\r\n    default_value: number;\r\n    number_type: \"integer\"|\"float\";\r\n\r\n    class_name?: string;\r\n    label?: string;\r\n    /** TODO: Implement tooltip */\r\n    tooltip?: string;\r\n    message?: string;\r\n    max?: number;\r\n    min?: number;\r\n    /** TODO: Implement step functionality. Use +/- keys as well as UI buttons? */\r\n    step?: number;\r\n    onValueChange?: (value: number) => void;\r\n    /** Return error message. Empty string displays no message but marks the input as invalid. */\r\n    validationCB?: (value: string) => null|string;\r\n}\r\nexport interface NumericInputProps {\r\n    value: string;\r\n    config: NumericInputConfig;\r\n    onChange: (value: string, cb: () => void) => void;\r\n    display_error_message: boolean;\r\n    autofocus?: boolean;\r\n}\r\n\r\n\r\ninterface NumericInputState {\r\n    blocked: boolean;\r\n}\r\n\r\ninterface ContainerStyleProps {\r\n    valid: boolean;\r\n}\r\n\r\nconst NumericInputContainer = styled(\"div\")<ContainerStyleProps> `\r\n    text-align: left;\r\n    margin-bottom: ${props => props.theme.components.form.user_input.margin_bottom}px;\r\n    p{\r\n        color: ${props => props.theme.colors.dark[1]};\r\n        font-size: 14px;\r\n        margin-bottom: 8px;\r\n        font-weight: bold;\r\n    }\r\n    p.message{\r\n        color: ${props => props.theme.colors.dark[2]};\r\n        font-size: 12px;\r\n        margin-bottom: 6px;\r\n        font-weight: normal;\r\n        font-style: italic;\r\n    }\r\n    p.validation_error{\r\n        color: ${props => props.theme.colors.red[0]};\r\n        font-size: 14px;\r\n        margin-bottom: 4px;\r\n        font-weight: bold;\r\n        font-style: italic;\r\n    }\r\n    input{\r\n        background-color: ${props => !props.valid ? \"rgba(255,0,0,0.1)\" : \"\" };\r\n        border: 1px solid ${props => !props.valid ? props.theme.colors.error : props.theme.colors.border};\r\n        border-radius: 4px;\r\n        font-size: 16px;\r\n        padding: 8px 12px;\r\n        width: 100%;\r\n        transition: all 0.3s;\r\n        &:HOVER, &:FOCUS{\r\n            border-color: ${props => !props.valid ? props.theme.colors.error : props.theme.colors.brand[2]};\r\n        }\r\n        &.small{\r\n            width: calc(100% - 80px);\r\n            display: inline-block;\r\n            vertical-align: middle;\r\n        }\r\n    }\r\n`;\r\n\r\nexport class Input extends React.Component<NumericInputProps, NumericInputState> {\r\n\r\n    onChange(value: string) {\r\n        const cfg = this.props.config;\r\n        this.props.onChange(value, () => {\r\n            if (cfg.onValueChange && !validate(cfg, value)) {\r\n                cfg.onValueChange(convertInternalToExternalValue(cfg, value));\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let cfg = this.props.config;\r\n        let class_names = \"user_input numeric_input\";\r\n        if (cfg.class_name) {\r\n            class_names += \" \" + cfg.class_name;\r\n        }\r\n        const validation_error = validate(cfg, this.props.value);\r\n\r\n        return (\r\n            <NumericInputContainer\r\n                className={class_names}\r\n                valid={!validation_error || !this.props.display_error_message}\r\n            >\r\n                { cfg.label ? <p>{ cfg.label }</p> : null }\r\n                { cfg.message ? <p className=\"message\">{ cfg.message }</p> : null }\r\n                { validation_error && this.props.display_error_message && validation_error.length > 0 ? <p className=\"validation_error\">{ validation_error }</p> : null }\r\n                <input\r\n                    type=\"text\"\r\n                    autoFocus={this.props.autofocus || false}\r\n                    value={this.props.value}\r\n                    onChange={e => this.onChange(e.target.value)}\r\n                />\r\n            </NumericInputContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport function validate(cfg: NumericInputConfig, value: string): null|string {\r\n    if (cfg.validationCB) {\r\n        return cfg.validationCB(value);\r\n    }\r\n    let messages: string[] = [];\r\n    if (cfg.number_type === \"integer\") {\r\n        let parsed = parseInt(value, 10);\r\n        if (!Number.isNaN(parsed) && Number.isFinite(parsed) && Number.isSafeInteger(parsed) && parsed.toString() === value.toString().trim()) {\r\n            if (typeof cfg.max === \"number\") {\r\n                if (parsed > cfg.max) {\r\n                    messages.push(oh.translate(\"user_input_value_greater_than_allowed\") + \". \" + oh.translate(\"user_input_maximum\") + \": \" + cfg.max + \".\");\r\n                }\r\n            }\r\n            if (typeof cfg.min === \"number\") {\r\n                if (parsed < cfg.min) {\r\n                    messages.push(oh.translate(\"user_input_value_less_than_allowed\") + \". \" + oh.translate(\"user_input_minimum\") + \": \" + cfg.min + \".\");\r\n                }\r\n            }\r\n            if (messages.length > 0) {\r\n                return messages.join(' ');\r\n            }\r\n            return null;\r\n        }\r\n        return oh.translate(\"user_input_invalid_integer\");\r\n    }\r\n\r\n    let parsed = parseFloat(value);\r\n    if (!Number.isNaN(parsed) && Number.isFinite(parsed) && parsed.toString() === value.toString().trim()) {\r\n        if (typeof cfg.max === \"number\") {\r\n            if (parsed > cfg.max) {\r\n                messages.push(oh.translate(\"user_input_value_greater_than_allowed\") + \". \" + oh.translate(\"user_input_maximum\") + \": \" + cfg.max + \".\");\r\n            }\r\n        }\r\n        if (typeof cfg.min === \"number\") {\r\n            if (parsed < cfg.min) {\r\n                messages.push(oh.translate(\"user_input_value_less_than_allowed\") + \". \" + oh.translate(\"user_input_minimum\") + \": \" + cfg.min + \".\");\r\n            }\r\n        }\r\n        if (messages.length > 0) {\r\n            return messages.join(' ');\r\n        }\r\n        return null;\r\n    }\r\n    return oh.translate(\"user_input_invalid_float\");\r\n}\r\n\r\nexport function validateConfig(cfg: NumericInputConfig): null|string {\r\n    if (cfg.number_type !== \"integer\" && cfg.number_type !== \"float\") {\r\n        return \"UserInput: Numeric input config 'number_type' must be 'float' or 'integer'.\";\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function convertInternalToExternalValue(cfg: NumericInputConfig, value: string): number {\r\n    if (cfg.number_type === \"integer\") {\r\n        let parsed = parseInt(value, 10);\r\n        if (!Number.isNaN(parsed) && Number.isFinite(parsed) && Number.isSafeInteger(parsed) && parsed.toString(10) === value.trim()) {\r\n            return parsed;\r\n        }\r\n        return cfg.default_value;\r\n    }\r\n\r\n    let parsed = parseFloat(value);\r\n    if (!Number.isNaN(parsed) && Number.isFinite(parsed) && parsed.toString() === value.trim()) {\r\n        return parsed;\r\n    }\r\n    return cfg.default_value;\r\n}\r\n\r\nexport function convertExternalToInternalValue(cfg: NumericInputConfig, value: number): string {\r\n    return value.toString();\r\n}\r\n"]}