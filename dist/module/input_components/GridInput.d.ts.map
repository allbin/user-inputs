{"version":3,"sources":["../src/module/input_components/GridInput.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAI/B,oBAAY,QAAQ,GAAG,OAAO,GAAG,QAAQ,CAAC;AAE1C,MAAM,WAAW,eAAe;IAC5B,IAAI,EAAE,MAAM,CAAC;IACb,GAAG,EAAE,MAAM,CAAC;IACZ,aAAa,EAAE,MAAM,CAAC;IACtB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,SAAS,EAAE,QAAQ,CAAC;IACpB,OAAO,EAAE,GAAG,CAAC;IACb,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,8BAA8B;IAC9B,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,GAAC,MAAM,KAAK,IAAI,CAAC;IAC/C,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,GAAC,MAAM,KAAK,IAAI,GAAC,MAAM,CAAC;CACxD;AACD,MAAM,WAAW,cAAc;IAC3B,KAAK,EAAE,GAAG,CAAC;IACX,MAAM,EAAE,eAAe,CAAC;IACxB,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,GAAC,MAAM,EAAE,EAAE,EAAE,MAAM,IAAI,KAAK,IAAI,CAAC;IACzD,qBAAqB,EAAE,OAAO,CAAC;CAClC;AA6ED,qBAAa,KAAM,SAAQ,KAAK,CAAC,SAAS,CAAC,cAAc,EAAE,GAAG,CAAC;IAC3D,QAAQ,CAAC,KAAK,EAAE,MAAM,GAAC,MAAM;IAS7B,MAAM;CAyCT;AAED,wBAAgB,QAAQ,CAAC,GAAG,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,GAAC,MAAM,GAAG,IAAI,GAAC,MAAM,CAKhF;AAED,wBAAgB,cAAc,CAAC,GAAG,EAAE,eAAe,GAAG,IAAI,GAAC,MAAM,CAMhE;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,GAAC,MAAM,GAAG,MAAM,GAAC,MAAM,CAExG;AAED,wBAAgB,8BAA8B,CAAC,GAAG,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,GAAC,MAAM,GAAG,MAAM,GAAC,MAAM,CAExG","file":"GridInput.d.ts","sourcesContent":["import * as React from 'react';\r\nimport styled from '../styling';\r\nimport { GridSelectOption } from '../.';\r\n\r\nexport type GridType = \"icons\" | \"colors\";\r\n\r\nexport interface GridInputConfig {\r\n    type: \"grid\";\r\n    key: string;\r\n    default_value: string;\r\n    label?: string;\r\n    grid_type: GridType;\r\n    options: any;\r\n    class_name?: string;\r\n    message?: string;\r\n    /** TODO: Implement tooltip */\r\n    tooltip?: string;\r\n    onValueChange?: (value: string|number) => void;\r\n    validationCB?: (value: string|number) => null|string;\r\n}\r\nexport interface GridInputProps {\r\n    value: any;\r\n    config: GridInputConfig;\r\n    onChange: (value: string|number, cb: () => void) => void;\r\n    display_error_message: boolean;\r\n}\r\n\r\ninterface GridInputStyleProps {\r\n    grid_type: GridType;\r\n    valid: boolean;\r\n    color?: string;\r\n}\r\n\r\nconst GridInputContainer = styled.div<GridInputStyleProps>`\r\n    text-align: left;\r\n    padding: 16px 20px !important;\r\n    margin-bottom: ${props => props.theme.components.form.user_input.margin_bottom}px;\r\n    p, .bool_block, .bool_input{\r\n        vertical-align: middle;\r\n        display: inline-block;\r\n    }\r\n    p{\r\n        color: ${props => props.theme.colors.dark[1]};\r\n        font-size: 14px;\r\n        margin-bottom: 12px;\r\n        font-weight: bold;\r\n    }\r\n    p.message{\r\n        color: ${props => props.theme.colors.dark[2]};\r\n        font-size: 12px;\r\n        margin-bottom: 6px;\r\n        font-weight: normal;\r\n        font-style: italic;\r\n    }\r\n    p.validation_error{\r\n        color: ${props => props.theme.colors.red[0]};\r\n        font-size: 14px;\r\n        margin-bottom: 4px;\r\n        font-weight: bold;\r\n        font-style: italic;\r\n    }\r\n    .grid_block{\r\n        border-radius: 4px;\r\n        background-color: ${props => props.theme.colors.border};\r\n        padding: 4px;\r\n        display: grid;\r\n        grid-template-columns: ${props => props.grid_type === 'colors' || props.grid_type === 'icons' ? 'repeat(6, 1fr)' : 'repeat( auto-fit, minmax(120px, 1fr) )'};\r\n        grid-gap: 4px 4px;\r\n    }\r\n`;\r\n\r\nconst StyledGridItem = styled.div<GridInputStyleProps>`\r\n    box-shadow: 0 2px 3px rgba(38, 38, 38, 0.12);\r\n    background-color: #fff;\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n    padding: ${props => props.grid_type === 'icons' ? '6px 0' : '16px 0'};\r\n    height: ${props => props.grid_type === 'colors' || props.grid_type === 'icons' ? '44px' : 'unset'};\r\n    text-align: center;\r\n    font-size: 16px;\r\n    &:HOVER{\r\n        background-color: ${props => props.grid_type === 'colors' ? props.color : props.theme.colors.dark[1]};\r\n        opacity: 0.5;\r\n        color: #fff;\r\n    }\r\n    &.active{\r\n        background-color: ${props => props.grid_type === 'colors' ? props.color : props.theme.colors.dark[1]};\r\n        color: #fff;\r\n        font-weight: bold;\r\n        &:HOVER{\r\n            opacity: 1;\r\n        }\r\n    }\r\n    span{\r\n        display: ${props => props.grid_type === 'colors' || props.grid_type === 'icons' ? 'none' : 'inline-block'};\r\n    }\r\n    svg{\r\n        width: 30px;\r\n        height: 30px;\r\n    }\r\n`;\r\n\r\nexport class Input extends React.Component<GridInputProps, any> {\r\n    onChange(value: string|number) {\r\n        const cfg = this.props.config;\r\n        this.props.onChange(value, () => {\r\n            let ext_value = convertInternalToExternalValue(cfg, value);\r\n            if (cfg.onValueChange && !validate(cfg, ext_value)) {\r\n                cfg.onValueChange(ext_value);\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        let cfg = this.props.config;\r\n        let class_names = \"user_input grid_input\";\r\n        if (cfg.class_name) {\r\n            class_names += \" \" + cfg.class_name;\r\n        }\r\n\r\n        const validation_error = validate(cfg, this.props.value);\r\n\r\n        return (\r\n            <GridInputContainer\r\n                grid_type={cfg.grid_type}\r\n                className={class_names}\r\n                valid={!validation_error || !this.props.display_error_message}\r\n            >\r\n                { cfg.label ? <p>{ cfg.label }</p> : null }\r\n                { cfg.message ? <p className=\"message\">{ cfg.message }</p> : null }\r\n                { validation_error && this.props.display_error_message && validation_error.length > 0 ? <p className=\"validation_error\">{ validation_error }</p> : null }\r\n                <div className=\"grid_block\">\r\n                    {\r\n                        cfg.options.map((item: GridSelectOption, i: number) => {\r\n                            return (\r\n                                <StyledGridItem\r\n                                    color={item.color}\r\n                                    grid_type={cfg.grid_type}\r\n                                    valid={!validation_error || !this.props.display_error_message}\r\n                                    key={i}\r\n                                    className={`grid_item ${this.props.value === item.value ? 'active' : ''}`}\r\n                                    onClick={() => {\r\n                                        this.onChange(item.value);\r\n                                    }}\r\n                                >\r\n                                    { cfg.grid_type === 'icons' ? null : <span>{item.label}</span> }\r\n                                </StyledGridItem>\r\n                            );\r\n                        })\r\n                    }\r\n                </div>\r\n            </GridInputContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport function validate(cfg: GridInputConfig, value: string|number): null|string {\r\n    if (cfg.validationCB) {\r\n        return cfg.validationCB(value);\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function validateConfig(cfg: GridInputConfig): null|string {\r\n    if (validate(cfg, cfg.default_value)) {\r\n        return \"UserInput: Invalid default_value for Grid.\";\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function convertInternalToExternalValue(cfg: GridInputConfig, value: string|number): string|number {\r\n    return value;\r\n}\r\n\r\nexport function convertExternalToInternalValue(cfg: GridInputConfig, value: string|number): string|number {\r\n    return value;\r\n}\r\n"]}