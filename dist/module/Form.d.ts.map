{"version":3,"sources":["../src/module/Form.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAgB,oBAAoB,EAAE,MAAM,GAAG,CAAC;AAEvD,UAAU,SAAS;IACf,SAAS,CAAC,EAAE,CAAC,MAAM,EAAE,WAAW,KAAK,IAAI,CAAC;IAC1C,aAAa,EAAE,oBAAoB,CAAC;IACpC,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,KAAK,IAAI,CAAC;CAChC;AACD,UAAU,SAAS;IACf,MAAM,EAAE,WAAW,CAAC;CACvB;AAED,MAAM,CAAC,OAAO,OAAO,IAAK,SAAQ,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC;gBACvD,KAAK,EAAE,SAAS;IAiC5B,eAAe;IAmBf,kBAAkB,CAAC,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG;IAQ1C,SAAS,IAAI,WAAW;IAmBxB,MAAM;CAcT","file":"Form.d.ts","sourcesContent":["import * as React from 'react';\n\nimport { renderInputs, FormInputConfigArray } from '.';\n\ninterface FormProps {\n    confirmCB?: (values: LooseObject) => void;\n    input_configs: FormInputConfigArray;\n    refCB?: (form: Form) => void;\n}\ninterface FormState {\n    values: LooseObject;\n}\n\nexport default class Form extends React.Component<FormProps, FormState> {\n    constructor(props: FormProps) {\n        super(props);\n\n        let values: { [key: string]: any; } = {};\n        props.input_configs.forEach((input) => {\n            if (input.type === \"multi_select\") {\n                let multi_select = input;\n                let selected_options = multi_select.options.filter(option => input.default_value.includes(option.value));\n                if (selected_options.length !== input.default_value.length) {\n                    throw new Error(\"UserInput: Default values for multiselect not present in options.\");\n                }\n                values[input.key] = selected_options;\n            } else if (input.type === \"select\") {\n                let select = input;\n                let selected_option = select.options.find(option => input.default_value === option.value);\n                if (!selected_option) {\n                    throw new Error(\"UserInput: Default value for select not present in options.\");\n                }\n                values[input.key] = selected_option;\n            } else {\n                values[input.key] = input.default_value;\n            }\n        });\n\n        this.state = {\n            values: {}\n        };\n\n        if (props.refCB) {\n            props.refCB(this);\n        }\n    }\n\n    userConfirmedCB() {\n        let values = Object.assign({}, this.state.values);\n        this.props.input_configs.forEach((input) => {\n            if (input.type === \"text\" || input.type === \"textarea\") {\n                let text_input = input;\n                if ((!input.hasOwnProperty(\"trim\") || text_input.trim === true) && typeof values[input.key] === \"string\") {\n                    values[input.key] = values[input.key].trim();\n                }\n            } else if (input.type === \"select\") {\n                values[input.key] = values[input.key].value;\n            } else if (input.type === \"multi_select\") {\n                values[input.key] = (values[input.key] as SelectOption[]).map(option => option.value);\n            }\n        });\n        if (this.props.confirmCB) {\n            this.props.confirmCB(values);\n        }\n    }\n\n    inputValueChangeCB(key: string, value: any) {\n        let values = Object.assign({}, this.state.values);\n        values[key] = value;\n        this.setState({\n            values: values\n        });\n    }\n\n    getValues(): LooseObject {\n        let values = Object.assign({}, this.state.values);\n        this.props.input_configs.forEach((input) => {\n            if (input.type === \"text\" || input.type === \"textarea\") {\n                let text_input = input;\n                if ((!input.hasOwnProperty(\"trim\") || text_input.trim === true) && typeof values[input.key] === \"string\") {\n                    values[input.key] = values[input.key].trim();\n                }\n            }\n            if (input.type === \"select\") {\n                values[input.key] = values[input.key].value;\n            }\n            if (input.type === \"multi_select\") {\n                values[input.key] = values[input.key].map((option: SelectOption) => option.value);\n            }\n        });\n        return values;\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    renderInputs(\n                        this.props.input_configs,\n                        this.state.values,\n                        (key: string, value: any) => { this.inputValueChangeCB(key, value); },\n                        () => { this.userConfirmedCB(); },\n                    )\n                }\n            </div>\n        );\n    }\n}\n"]}