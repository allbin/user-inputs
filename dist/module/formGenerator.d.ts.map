{"version":3,"sources":["../src/module/formGenerator.tsx"],"names":[],"mappings":"AAGA,OAAO,EAA8B,oBAAoB,EAA2B,aAAa,EAAE,MAAM,GAAG,CAAC;AAW7G,MAAM,CAAC,OAAO,UAAU,YAAY,CAAC,aAAa,EAAE,oBAAoB,EAAE,EAAE,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,KAAK,IAAI,GAAG,aAAa,CAmLnH;AAED,wBAAgB,2BAA2B,CAAC,aAAa,EAAE,oBAAoB,EAAE,SAAS,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,KAAK,IAAI,GAAG,IAAI,CA2DvH","file":"formGenerator.d.ts","sourcesContent":["import * as React from 'react';\r\nimport { LooseObject } from '.';\r\n\r\nimport { valid_types, input_imports, FormInputConfigArray, AnyInputConfigWithValue, GeneratedForm } from '.';\r\n\r\ninterface FormState {\r\n    values: {\r\n        [key: string]: any\r\n    };\r\n    inputs: FormInputConfigArray;\r\n    tag: string | null;\r\n    confirm_clicked: boolean;\r\n}\r\n\r\nexport default function getInputForm(input_configs: FormInputConfigArray, cb?: (values: any) => void): GeneratedForm {\r\n    let mounted_form: InputWrapper | null;\r\n\r\n    class InputWrapper extends React.Component<any, FormState> {\r\n        confirmCB: ((values: any) => void) | null;\r\n\r\n        constructor(props: any) {\r\n            super(props);\r\n\r\n            let values: LooseObject = {};\r\n            input_configs.forEach((input_config) => {\r\n                values[input_config.key] = input_imports[input_config.type].convertExternalToInternalValue(input_config, input_config.default_value);\r\n            });\r\n            this.state = {\r\n                values: values,\r\n                inputs: input_configs,\r\n                tag: null,\r\n                confirm_clicked: (cb) ? false : true\r\n            };\r\n            this.confirmCB = cb || null;\r\n        }\r\n\r\n        componentDidMount() {\r\n            mounted_form = this;\r\n        }\r\n\r\n        componentWillUnmount() {\r\n            if (mounted_form === this) {\r\n                //If another instance of this form has already been mounted\r\n                //the mounted_form will have changed. Check before resetting it.\r\n                mounted_form = null;\r\n            }\r\n        }\r\n\r\n        setConfig(input_config: AnyInputConfigWithValue) {\r\n            let inputs = this.state.inputs;\r\n            let input_index = inputs.findIndex(input => input.key === input_config.key);\r\n            if (input_index < 0) {\r\n                throw new Error(\"UserInput: Key not found in existing inputs.\");\r\n            }\r\n            let values = this.state.values;\r\n            if (input_config.hasOwnProperty(\"value\")) {\r\n                values[input_config.key] = input_imports[input_config.type].convertExternalToInternalValue(input_config, input_config.default_value);\r\n            }\r\n            inputs[input_index] = Object.assign({}, inputs[input_index], input_config);\r\n            this.setState({\r\n                inputs: inputs,\r\n                values: values\r\n            });\r\n        }\r\n\r\n        getValues() {\r\n            let values: LooseObject = {};\r\n            this.state.inputs.forEach((input) => {\r\n                if (input.type === \"button\" || input.type === \"confirm\") {\r\n                    return;\r\n                } else {\r\n                    return values[input.key] = input_imports[input.type].convertInternalToExternalValue(input, this.state.values[input.key]);\r\n                }\r\n            });\r\n            return values;\r\n        }\r\n\r\n        resetValues() {\r\n            let values: LooseObject = {};\r\n            input_configs.forEach((input_config) => {\r\n                values[input_config.key] = input_imports[input_config.type].convertExternalToInternalValue(input_config, input_config.default_value);\r\n            });\r\n            this.setState({\r\n                values: values,\r\n                confirm_clicked: false\r\n            });\r\n        }\r\n\r\n        resetConfirmClick() {\r\n            this.setState({\r\n                confirm_clicked: false\r\n            });\r\n        }\r\n\r\n        userConfirmedCB() {\r\n            this.setState({ confirm_clicked: true });\r\n            if (this.confirmCB && this.isValid()) {\r\n                this.confirmCB(this.getValues());\r\n            }\r\n        }\r\n\r\n        inputValueChangeCB(key: string, value: any, cb?: () => void) {\r\n            let values = Object.assign({}, this.state.values);\r\n            values[key] = value;\r\n            this.setState({\r\n                values: values\r\n            }, cb);\r\n        }\r\n\r\n        isValid() {\r\n            return !this.state.inputs.some((input_config) => {\r\n                let valid_error = input_imports[input_config.type].validate(input_config, this.state.values[input_config.key]);\r\n                return valid_error !== null;\r\n            });\r\n        }\r\n\r\n        renderInputs() {\r\n            return this.state.inputs.map((input_request, index) => {\r\n                let InputComponent = input_imports[input_request.type].Input as typeof React.Component;\r\n                let key = input_request.key || \"input_\" + index;\r\n                if (input_request.type === \"confirm\") {\r\n                    return <InputComponent\r\n                        key={key}\r\n                        config={input_request}\r\n                        value={this.state.values[key]}\r\n                        onClick={() => { this.userConfirmedCB(); }}\r\n                    />;\r\n                } else if (input_request.type === \"button\") {\r\n                    return <InputComponent\r\n                        key={key}\r\n                        config={input_request}\r\n                        value={this.state.values[key]}\r\n                        onClick={() => {\r\n                            if (input_request.onClick) {\r\n                                input_request.onClick();\r\n                            }\r\n                        }}\r\n                    />;\r\n                }\r\n                return <InputComponent\r\n                    key={key}\r\n                    config={input_request}\r\n                    value={this.state.values[key]}\r\n                    display_error_message={this.state.confirm_clicked}\r\n                    onChange={(value: any, cb: () => void) => {\r\n                        this.inputValueChangeCB(key, value, cb);\r\n                    }}\r\n                />;\r\n            });\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <div>\r\n                    {this.renderInputs()}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return {\r\n        component: InputWrapper,\r\n        reset: () => {\r\n            if (mounted_form) {\r\n                mounted_form.resetValues();\r\n            }\r\n        },\r\n        resetConfirmClick: () => {\r\n            if (mounted_form) {\r\n                mounted_form.resetConfirmClick();\r\n            }\r\n        },\r\n        getValues: (): LooseObject => {\r\n            if (!mounted_form) {\r\n                return {};\r\n            }\r\n            return mounted_form.getValues();\r\n        },\r\n        setInputConfig: (updated_config: AnyInputConfigWithValue) => {\r\n            if (updated_config.hasOwnProperty(\"key\") === false) {\r\n                throw new Error(\"UserInput: input_config must contain 'key' property.\");\r\n            }\r\n            let inputs = input_configs;\r\n            let input_index = input_configs.findIndex(input => input.key === updated_config.key);\r\n            if (input_index < 0) {\r\n                throw new Error(\"UserInput: Key not found in existing inputs.\");\r\n            }\r\n            input_configs[input_index] = Object.assign({}, input_configs[input_index], updated_config);\r\n            if (mounted_form) {\r\n                mounted_form.setConfig(inputs[input_index]);\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport function validateFormGeneratorInputs(input_configs: FormInputConfigArray, confirmCB?: (value: any) => void): void {\r\n    if (input_configs.length < 1) {\r\n        throw new Error(\"UserInput: GenerateForm requires at least one input.\");\r\n    }\r\n    if (!confirmCB) {\r\n        let inputs_missing_cb = input_configs.filter(input => !input.onValueChange);\r\n        if (inputs_missing_cb.length > 0) {\r\n            throw new Error(\"UserInput: GenerateForm without a confirmCB requires every input to specify a onValueChange callback.\");\r\n        }\r\n    } else {\r\n        let confirm_buttons = input_configs.some(input => input.type === \"confirm\");\r\n        if (!confirm_buttons) {\r\n            throw new Error(\"UserInput: GenerateForm with a confirmCB is required to have at least one input of type 'confirm'.\");\r\n        }\r\n    }\r\n\r\n\r\n    //Check that default_value is set.\r\n    let invalid_inputs = input_configs.some((input) => {\r\n        return (input.type !== \"confirm\" && input.type !== \"button\") && input.hasOwnProperty(\"default_value\") === false;\r\n    });\r\n    if (invalid_inputs) {\r\n        throw new Error(\"UserInput: Every input that is not a 'button' or 'confirm' must be configured with a 'default_value'.\");\r\n    }\r\n\r\n\r\n    //Check that each input has a valid type.\r\n    invalid_inputs = input_configs.some(input => !valid_types.includes(input.type));\r\n    if (invalid_inputs) {\r\n        throw new Error(\"UserInput: Inputs must be configured with a valid 'type'. \" + valid_types.join(','));\r\n    }\r\n\r\n\r\n    //Check that each input has a key property.\r\n    invalid_inputs = input_configs.some(input => (input.type !== 'button' && input.type !== 'confirm') && !input.hasOwnProperty('key'));\r\n    if (invalid_inputs) {\r\n        throw new Error(\"UserInput: Inputs that are not type 'button' or 'confirm' must be configured with a 'key' property. \");\r\n    }\r\n\r\n\r\n    //Duplicate key check.\r\n    let duplicate_keys: Set<string> = new Set();\r\n    invalid_inputs = input_configs.some((input) => {\r\n        if (input.type === 'button' || input.type === 'confirm') {\r\n            return false;\r\n        }\r\n        return duplicate_keys.size === duplicate_keys.add(input.key).size;\r\n    });\r\n\r\n\r\n    //Run each input type's own validation function.\r\n    let errors: string[] = [];\r\n    input_configs.forEach((input) => {\r\n        let valid = input_imports[input.type].validateConfig(input);\r\n        if (valid) { errors.push(valid); }\r\n    });\r\n    if (errors.length > 0) {\r\n        throw new Error(errors.join('\\n'));\r\n    }\r\n}"]}