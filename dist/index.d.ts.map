{"version":3,"sources":["../src/index.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAY/B,oBAAY,SAAS,GAAG,MAAM,GAAG,QAAQ,GAAG,SAAS,GAAG,MAAM,GAAG,MAAM,GAAG,QAAQ,GAAG,QAAQ,GAAG,MAAM,CAAC;AACvG,MAAM,WAAW,WAAW;IACxB,CAAC,GAAG,EAAE,MAAM,GAAG,GAAG,CAAC;IACnB,aAAa,EAAE,GAAG,CAAC;IACnB,IAAI,EAAE,SAAS,CAAC;IAChB,QAAQ,EAAE,CAAC,GAAG,KAAA,KAAK,IAAI,CAAC;CAC3B;AACD,MAAM,WAAW,aAAa;IAC1B,MAAM,EAAE,WAAW,EAAE,CAAC;IACtB,KAAK,CAAC,EAAE,MAAM,CAAC;CAClB;AACD,MAAM,WAAW,WAAW;IACxB,IAAI,CAAC,EAAE,OAAO,CAAC;IACf,WAAW,CAAC,EAAE,GAAG,CAAC;IAClB,MAAM,CAAC,EAAE,GAAG,EAAE,CAAC;IACf,MAAM,CAAC,EAAE,GAAG,EAAE,CAAC;CAClB;AACD,MAAM,WAAW,eAAe;IAC5B,IAAI,CAAC,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC;IAC9B,MAAM,CAAC,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC;IAChC,IAAI,CAAC,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC;IAC9B,IAAI,CAAC,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC;IAC9B,MAAM,CAAC,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC;IAChC,MAAM,CAAC,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC;IAChC,IAAI,CAAC,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC;IAC9B,KAAK,CAAC,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC;IAC/B,OAAO,CAAC,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC;CACpC;AA+GD,wBAAgB,QAAQ,CACpB,gBAAgB,EAAE,OAAO,KAAK,CAAC,SAAS,GACzC,OAAO,KAAK,CAAC,SAAS,CAoJxB;AAGD,yBAAiB,QAAQ,CAAC;IACtB,SAAgB,mBAAmB,CAAC,sBAAsB,EAAE,eAAe,QAE1E;IACD,SAAgB,cAAc,CAAC,aAAa,EAAE,WAAW,EAAE,EAAE,SAAS,CAAC,EAAE,CAAC,GAAG,KAAA,KAAK,IAAI;;;;MA+BrF;CACJ;AAED,eAAe,QAAQ,CAAC","file":"index.d.ts","sourcesContent":["import * as React from 'react';\nimport oh from 'output-helpers';\nimport translations from './translations';\n\n\nimport PromptModal from './PromptModal';\nimport TextInput from './TextInput';\nimport BoolInput from './BoolInput';\nimport GridInput from './GridInput';\nimport Button from './Button';\n\nlet valid_types = [\"bool\", \"button\", \"confirm\", \"date\", \"grid\", \"number\", \"select\", \"text\"];\nexport type InputType = \"bool\" | \"button\" | \"confirm\" | \"date\" | \"grid\" | \"number\" | \"select\" | \"text\";\nexport interface InputConfig {\n    [key: string]: any;\n    default_value: any;\n    type: InputType;\n    onChange: (any) => void;\n}\nexport interface PromptRequest {\n    inputs: InputConfig[];\n    props?: object;\n}\nexport interface PromptState {\n    show?: boolean;\n    modal_props?: any;\n    values?: any[];\n    inputs?: any[];\n}\nexport interface ComponentObject {\n    bool?: typeof React.Component;\n    button?: typeof React.Component;\n    date?: typeof React.Component;\n    grid?: typeof React.Component;\n    number?: typeof React.Component;\n    select?: typeof React.Component;\n    text?: typeof React.Component;\n    modal?: typeof React.Component;\n    confirm?: typeof React.Component;\n}\n\n//Add the translations of this repo to OH. Prefix: \"user_input_hoc_\".\noh.addDictionary(translations);\n\n\n\n\nlet custom_components: ComponentObject = {};\n\n\n\n\nfunction getComponentWithInputs(input_configs: InputConfig[], cb: (any) => void): any {\n    class InputWrapper extends React.Component<any, PromptState> {\n        confirmCB: (any) => void | null;\n        input_components: ComponentObject;\n\n        constructor(props) {\n            super(props);\n\n            this.state = {\n                values: input_configs.map(input => input.default_value),\n                inputs: input_configs\n            };\n            this.confirmCB = cb || null;\n\n            this.input_components = {\n                text: TextInput,\n                grid: GridInput,\n                bool: BoolInput,\n                button: Button,\n                confirm: Button\n            };\n        }\n\n        getValues() {\n            return this.state.values;\n        }\n\n        resetValues() {\n            let default_values = input_configs.map(input => input.default_value);\n            this.setState({ values: default_values });\n        }\n\n        userConfirmedCB() {\n            if (this.confirmCB) {\n                this.confirmCB(this.state.values);\n                this.confirmCB = null;\n            }\n        }\n\n        inputValueChangeCB(index, value) {\n            let all_values = [].concat(this.state.values);\n            all_values[index] = value;\n            this.setState({\n                values: all_values\n            });\n        }\n\n        renderInputs() {\n            return this.state.inputs.map((input_request, index) => {\n                let InputComponent = this.input_components[input_request.type];\n                if (custom_components && custom_components.hasOwnProperty(input_request.type)) {\n                    InputComponent = custom_components[input_request.type];\n                }\n                let input_component_props = input_request.props || {};\n                if (input_request.type === \"confirm\") {\n                    return <InputComponent\n                        key={index}\n                        config={input_request}\n                        value={this.state.values[index]}\n                        onClick={(value) => {\n                            this.userConfirmedCB();\n                        }}\n                        {...input_component_props}\n                    />;\n                }\n                return <InputComponent\n                    key={index}\n                    config={input_request}\n                    value={this.state.values[index]}\n                    onChange={(value) => {\n                        if (input_request.onChange) {\n                            input_request.onChange(value);\n                        }\n                        this.inputValueChangeCB(index, value);\n                    }}\n                    {...input_component_props}\n                />;\n            });\n        }\n\n        render() {\n            return (\n                <div>\n                    { this.renderInputs() }\n                </div>\n            );\n        }\n    }\n\n    return InputWrapper;\n}\n\n\n\n\n\n\n\nexport function InputHOC (\n    WrappedComponent: typeof React.Component\n): typeof React.Component {\n    class Prompt extends React.Component<any, PromptState> {\n        exports: {\n            prompt: (prompt_request: PromptRequest, confirmCB: (any) => void, cancelCB: () => void) => void;\n            cancel: () => void;\n        };\n        confirmCB: any;\n        cancelCB: any;\n        input_components: ComponentObject;\n\n        constructor(props) {\n            super(props);\n\n            this.state = {\n                show: false,\n                modal_props: {},\n                values: []\n            };\n            this.exports = {\n                prompt: (prompt_request, confirmCB, cancelCB) => {\n                    this.initPrompt(prompt_request.inputs, prompt_request.props, confirmCB, cancelCB);\n                },\n                cancel: () => {\n                    this.cancelRequest();\n                }\n            };\n            this.confirmCB = null;\n            this.cancelCB = null;\n\n            this.input_components = {\n                text: TextInput,\n                grid: GridInput,\n                bool: BoolInput\n            };\n        }\n\n        initPrompt(inputs: InputConfig[], props?: object, confirmCB?: (any) => void, cancelCB?: () => void) {\n            let invalid_inputs = inputs.some(input => input.type === \"button\" || input.type === \"confirm\");\n            if (invalid_inputs) {\n                throw new Error(\"UserInput: Inputs of type 'button' OR 'confirm' are not allowed in prompt.\");\n            }\n            invalid_inputs = inputs.some(input => input.hasOwnProperty(\"default_value\") === false);\n            if (invalid_inputs) {\n                throw new Error(\"UserInput: Inputs must be configured with a 'default_value'.\");\n            }\n            invalid_inputs = inputs.some(input => !this.input_components[input.type]);\n            if (invalid_inputs) {\n                throw new Error(\"UserInput: Inputs must be configured with a valid 'type'. \" + valid_types.join(','));\n            }\n            this.confirmCB = confirmCB || null;\n            this.cancelCB = cancelCB || null;\n            let values = inputs.map(input => input.default_value);\n            this.setState({\n                show: true,\n                modal_props: props,\n                inputs: inputs,\n                values: values\n            });\n        }\n\n        cancelRequest() {\n            this.confirmCB = null;\n            this.cancelCB = null;\n            this.setState({\n                show: false,\n                inputs: [],\n                values: []\n            });\n        }\n\n        userConfirmedCB() {\n            this.setState({\n                show: false\n            });\n            if (this.confirmCB) {\n                this.confirmCB(this.state.values);\n                this.confirmCB = null;\n                this.cancelCB = null;\n            }\n        }\n        userCancelledCB() {\n            this.setState({\n                show: false\n            });\n            if (this.cancelCB) {\n                this.cancelCB();\n                this.cancelCB = null;\n                this.confirmCB = null;\n            }\n        }\n\n        inputValueChangeCB(index, value) {\n            let all_values = [].concat(this.state.values);\n            all_values[index] = value;\n            this.setState({\n                values: all_values\n            });\n        }\n\n        renderInputs() {\n            if (!this.state.inputs) { return null; }\n            return this.state.inputs.map((input_request, index) => {\n                let InputComponent = this.input_components[input_request.type];\n                if (custom_components && custom_components.hasOwnProperty(input_request.type)) {\n                    InputComponent = custom_components[input_request.type];\n                }\n                let input_component_props = input_request.props || {};\n                return <InputComponent\n                    key={index}\n                    config={input_request}\n                    value={this.state.values[index]}\n                    onChange={(value) => {\n                        if (input_request.onChange) {\n                            input_request.onChange(value);\n                        }\n                        this.inputValueChangeCB(index, value);\n                    }}\n                    {...input_component_props}\n                />;\n            });\n        }\n\n        renderPrompt() {\n            if (!this.state.show) { return null; }\n            let Modal: typeof React.Component = PromptModal;\n            if (custom_components && custom_components.hasOwnProperty(\"modal\")) {\n                Modal = custom_components.modal;\n            }\n            return (\n                <Modal\n                    confirmCB={() => { this.userConfirmedCB(); }}\n                    cancelCB={() => { this.userCancelledCB(); }}\n                    renderInputs={() => { return this.renderInputs(); }}\n                    {...this.state.modal_props}\n                />\n            );\n        }\n\n\n        render() {\n            return (<div>\n                <WrappedComponent userPrompt={this.exports} {...this.props} />\n                { this.renderPrompt() }\n            </div>);\n        }\n    }\n\n    return Prompt;\n}\n\n\nexport namespace InputHOC {\n    export function setCustomComponents(object_with_components: ComponentObject) {\n        custom_components = object_with_components;\n    }\n    export function generateInputs(input_configs: InputConfig[], confirmCB?: (any) => void) {\n        if (input_configs.length < 1) {\n            throw new Error(\"UserInput: GenerateInputs requires at least one input.\");\n        }\n        if (!confirmCB) {\n            let inputs_missing_cb = input_configs.filter(input => !input.onChange);\n            if (inputs_missing_cb.length > 0) {\n                throw new Error(\"UserInput: GenerateInputs without a confirmCB requires every input to specify a onChange callback.\");\n            }\n        } else {\n            let confirm_buttons = input_configs.some(input => input.type === \"confirm\");\n            if (!confirm_buttons) {\n                throw new Error(\"UserInput: GenerateInputs with a confirmCB is required to have at least one input of type 'confirm'.\");\n            }\n        }\n        let invalid_inputs = input_configs.some((input) => {\n            return (input.type !== \"confirm\" && input.type !== \"button\") && input.hasOwnProperty(\"default_value\") === false;\n        });\n        if (invalid_inputs) {\n            throw new Error(\"UserInput: Every input that is not a 'button' or 'confirm' must be configured with a 'default_value'.\");\n        }\n        invalid_inputs = input_configs.some(input => !valid_types.includes(input.type));\n        if (invalid_inputs) {\n            throw new Error(\"UserInput: Inputs must be configured with a valid 'type'. \" + valid_types.join(','));\n        }\n        let componentWithInputs = getComponentWithInputs(input_configs, confirmCB);\n        return {\n            getValues: () => { return componentWithInputs.getValues(); },\n            reset: () => {},\n            component: componentWithInputs\n        };\n    }\n}\n\nexport default InputHOC;\n"],"sourceRoot":"/source/"}