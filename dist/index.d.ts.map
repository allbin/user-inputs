{"version":3,"sources":["../src/index.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAoC/B,wBAAgB,QAAQ,CACpB,gBAAgB,EAAE,OAAO,KAAK,CAAC,SAAS,GACzC,OAAO,KAAK,CAAC,SAAS,CA0KxB;AAGD,yBAAiB,QAAQ,CAAC;IACtB,SAAgB,mBAAmB,CAAC,sBAAsB,EAAE,eAAe,QAE1E;IACD,SAAgB,YAAY,CAAC,aAAa,EAAE,WAAW,EAAE,EAAE,SAAS,CAAC,EAAE,CAAC,GAAG,KAAA,KAAK,IAAI,OA8BnF;CACJ;AAED,eAAe,QAAQ,CAAC","file":"index.d.ts","sourcesContent":["import * as React from 'react';\nimport oh from 'output-helpers';\nimport translations from './translations';\n\nimport * as formGenerator from './formGenerator';\n\nimport PromptModal from './PromptModal';\nimport TextInput from './input_components/TextInput';\nimport BoolInput from './input_components/BoolInput';\nimport GridInput from './input_components/GridInput';\nimport Button from './input_components/Button';\n\nlet valid_types = [\"bool\", \"button\", \"confirm\", \"date\", \"grid\", \"number\", \"multi_select\", \"select\", \"text\"];\n\n\n//Add translations of this repo to OH. Prefix: \"user_input_hoc_\".\noh.addDictionary(translations);\n\n\n\nlet default_components: ComponentObject = {\n    text: TextInput,\n    bool: BoolInput,\n    grid: GridInput,\n    button: Button,\n    select: TextInput,\n    multi_select: TextInput\n};\nlet custom_components: ComponentObject = {};\n\n\n\n\n\n\n\nexport function InputHOC (\n    WrappedComponent: typeof React.Component\n): typeof React.Component {\n    class Prompt extends React.Component<any, PromptState> {\n        exports: {\n            prompt: (prompt_request: PromptRequest, confirmCB: (any) => void, cancelCB: () => void) => void;\n            cancel: () => void;\n            setConfig: (input_config: InputConfig) => void;\n        };\n        confirmCB: any;\n        cancelCB: any;\n        input_components: ComponentObject;\n\n        constructor(props) {\n            super(props);\n\n            this.state = {\n                show: false,\n                modal_props: {},\n                values: {}\n            };\n            this.exports = {\n                prompt: (prompt_request, confirmCB, cancelCB) => {\n                    this.initPrompt(prompt_request.inputs, prompt_request.props, confirmCB, cancelCB);\n                },\n                cancel: () => {\n                    this.cancelRequest();\n                },\n                setConfig: (input_config: InputConfig) => {\n                    if (input_config.hasOwnProperty(\"key\") === false) {\n                        throw new Error(\"UserInput: input_config must contain 'key' property.\");\n                    }\n                    let inputs = this.state.inputs;\n                    let input_index = inputs.findIndex(input => input.key === input_config.key);\n                    if (input_index < 0) {\n                        throw new Error(\"UserInput: Key not found in existing inputs. Key must match an input created with 'promp()'.\");\n                    }\n                    let values = this.state.values;\n                    if (input_config.hasOwnProperty(\"value\")) {\n                        values[input_config.key] = input_config.value;\n                    }\n                    inputs[input_index] = Object.assign({}, inputs[input_index], input_config);\n                    this.setState({\n                        inputs: inputs,\n                        values: values\n                    });\n                }\n            };\n            this.confirmCB = null;\n            this.cancelCB = null;\n\n            this.input_components = {\n                text: TextInput,\n                grid: GridInput,\n                bool: BoolInput\n            };\n        }\n\n        initPrompt(inputs: InputConfig[], props?: object, confirmCB?: (any) => void, cancelCB?: () => void) {\n            let invalid_inputs = inputs.some(input => input.type === \"button\" || input.type === \"confirm\");\n            if (invalid_inputs) {\n                throw new Error(\"UserInput: Inputs of type 'button' OR 'confirm' are not allowed in prompt.\");\n            }\n            invalid_inputs = inputs.some(input => input.hasOwnProperty(\"default_value\") === false);\n            if (invalid_inputs) {\n                throw new Error(\"UserInput: Inputs must be configured with a 'default_value'.\");\n            }\n            invalid_inputs = inputs.some(input => !this.input_components[input.type]);\n            if (invalid_inputs) {\n                throw new Error(\"UserInput: Inputs must be configured with a valid 'type'. \" + valid_types.join(','));\n            }\n            this.confirmCB = confirmCB || null;\n            this.cancelCB = cancelCB || null;\n            let values = {};\n            inputs.forEach(input => values[input.key] = input.default_value);\n            this.setState({\n                show: true,\n                modal_props: props,\n                inputs: inputs,\n                values: values\n            });\n        }\n\n        cancelRequest() {\n            this.confirmCB = null;\n            this.cancelCB = null;\n            this.setState({\n                show: false,\n                inputs: [],\n                values: []\n            });\n        }\n\n        userConfirmedCB() {\n            this.setState({\n                show: false\n            });\n            if (this.confirmCB) {\n                this.confirmCB(this.state.values);\n                this.confirmCB = null;\n                this.cancelCB = null;\n            }\n        }\n        userCancelledCB() {\n            this.setState({\n                show: false\n            });\n            if (this.cancelCB) {\n                this.cancelCB();\n                this.cancelCB = null;\n                this.confirmCB = null;\n            }\n        }\n\n        inputValueChangeCB(key, value) {\n            let values = Object.assign({}, this.props.values);\n            values[key] = value;\n            this.setState({\n                values: values\n            });\n        }\n\n        renderInputs() {\n            if (!this.state.inputs) { return null; }\n            return this.state.inputs.map((input_request) => {\n                let InputComponent = this.input_components[input_request.type];\n                if (custom_components && custom_components.hasOwnProperty(input_request.type)) {\n                    InputComponent = custom_components[input_request.type];\n                }\n                let input_component_props = input_request.props || {};\n                let key = input_request.key;\n                return <InputComponent\n                    key={key}\n                    config={input_request}\n                    value={this.state.values[key]}\n                    onChange={(value) => {\n                        if (input_request.onChange) {\n                            input_request.onChange(value);\n                        }\n                        this.inputValueChangeCB(key, value);\n                    }}\n                    {...input_component_props}\n                />;\n            });\n        }\n\n        renderPrompt() {\n            if (!this.state.show) { return null; }\n            let Modal: typeof React.Component = PromptModal;\n            if (custom_components && custom_components.hasOwnProperty(\"modal\")) {\n                Modal = custom_components.modal;\n            }\n            return (\n                <Modal\n                    confirmCB={() => { this.userConfirmedCB(); }}\n                    cancelCB={() => { this.userCancelledCB(); }}\n                    renderInputs={() => { return this.renderInputs(); }}\n                    {...this.state.modal_props}\n                />\n            );\n        }\n\n\n        render() {\n            return (<div>\n                <WrappedComponent userPrompt={this.exports} {...this.props} />\n                { this.renderPrompt() }\n            </div>);\n        }\n    }\n\n    return Prompt;\n}\n\n\nexport namespace InputHOC {\n    export function setCustomComponents(object_with_components: ComponentObject) {\n        custom_components = object_with_components;\n    }\n    export function generateForm(input_configs: InputConfig[], confirmCB?: (any) => void) {\n        if (input_configs.length < 1) {\n            throw new Error(\"UserInput: GenerateInputs requires at least one input.\");\n        }\n        if (!confirmCB) {\n            let inputs_missing_cb = input_configs.filter(input => !input.onChange);\n            if (inputs_missing_cb.length > 0) {\n                throw new Error(\"UserInput: GenerateInputs without a confirmCB requires every input to specify a onChange callback.\");\n            }\n        } else {\n            let confirm_buttons = input_configs.some(input => input.type === \"confirm\");\n            if (!confirm_buttons) {\n                throw new Error(\"UserInput: GenerateInputs with a confirmCB is required to have at least one input of type 'confirm'.\");\n            }\n        }\n        let invalid_inputs = input_configs.some((input) => {\n            return (input.type !== \"confirm\" && input.type !== \"button\") && input.hasOwnProperty(\"default_value\") === false;\n        });\n        if (invalid_inputs) {\n            throw new Error(\"UserInput: Every input that is not a 'button' or 'confirm' must be configured with a 'default_value'.\");\n        }\n        invalid_inputs = input_configs.some(input => !valid_types.includes(input.type));\n        if (invalid_inputs) {\n            throw new Error(\"UserInput: Inputs must be configured with a valid 'type'. \" + valid_types.join(','));\n        }\n        invalid_inputs = input_configs.some(input => (input.type !== 'button' && input.type !== 'confirm') && !input.hasOwnProperty('key'));\n        if (invalid_inputs) {\n            throw new Error(\"UserInput: Inputs that are not type 'button' or 'confirm' must be configured with a 'key' property. \");\n        }\n        return formGenerator.getInputForm(default_components, custom_components, input_configs, confirmCB);\n    }\n}\n\nexport default InputHOC;\n"],"sourceRoot":"/source/"}