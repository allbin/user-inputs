{"version":3,"sources":["../src/index.tsx"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as React from 'react';\nimport oh from 'output-helpers';\nimport translations from './translations';\n\nimport * as formGenerator from './formGenerator';\n\nimport PromptModal from './PromptModal';\nimport TextInput from './input_components/TextInput';\nimport BoolInput from './input_components/BoolInput';\nimport GridInput from './input_components/GridInput';\nimport SelectInput from './input_components/SelectInput';\nimport MultiSelectInput from './input_components/MultiSelectInput';\nimport TextareaInput from './input_components/TextareaInput';\nimport TriStateInput from './input_components/TriStateInput';\nimport Button from './input_components/Button';\n\n\nexport type InputType = \"bool\" | \"button\" | \"confirm\" | \"date\" | \"grid\" | \"number\" | \"multi_select\" | \"select\" | \"text\" | \"textarea\" | \"tri_state\";\nexport interface LooseObject {\n    [key: string]: any;\n}\nexport interface InputConfig {\n    [key: string]: any;\n    default_value: any;\n    type: InputType;\n    key: string;\n    onChange?: (any) => void;\n    props: {\n        [key: string]: any;\n    };\n}\nexport interface InputConfigUpdate {\n    [key: string]: any;\n    default_value: any;\n    type: InputType;\n    key: string;\n    onChange?: (any) => void;\n    props?: {\n        [key: string]: any;\n    };\n}\nexport interface PromptRequest {\n    inputs: InputConfig[];\n    props?: {\n        [key: string]: any\n    };\n}\nexport interface ComponentObject {\n    bool?: typeof React.Component;\n    button?: typeof React.Component;\n    date?: typeof React.Component;\n    grid?: typeof React.Component;\n    number?: typeof React.Component;\n    select?: typeof React.Component;\n    text?: typeof React.Component;\n    textarea?: typeof React.Component;\n    multi_select?: typeof React.Component;\n    modal?: typeof React.Component;\n    confirm?: typeof React.Component;\n    tri_state?: typeof React.Component;\n}\nexport interface PromptState {\n    show?: boolean;\n    modal_props?: any;\n    values?: {\n        [key: string]: any\n    };\n    inputs?: any[];\n    prompt_request: PromptRequest | null;\n    tag: string | null;\n}\n\nexport interface HOCProperties {\n    confirm: (prompt_request: PromptRequest, confirmCB?: (LooseObject) => void, cancelCB?: () => void) => void;\n    alert: (prompt_request: PromptRequest, confirmCB?: (LooseObject) => void) => void;\n    cancel: () => void;\n    isOpen: () => boolean;\n    setTag: (tag: string) => void;\n    getTag: () => string | null;\n    setConfig: (input_config: InputConfig) => void;\n}\n\n\n\n\n\nlet valid_types = [\"bool\", \"button\", \"confirm\", \"date\", \"grid\", \"number\", \"multi_select\", \"select\", \"text\", \"textarea\", \"tri_state\"];\n\n\n//Add translations of this repo to OH. Prefixed with \"user_input_hoc_\".\noh.addDictionary(translations);\n\n\n\nlet default_components: ComponentObject = {\n    text: TextInput,\n    bool: BoolInput,\n    grid: GridInput,\n    button: Button,\n    select: SelectInput,\n    multi_select: MultiSelectInput,\n    textarea: TextareaInput,\n    tri_state: TriStateInput,\n    confirm: Button,\n};\nlet custom_components: ComponentObject = {};\n\n\n\n\n\n\n\nexport function InputHOC (\n    WrappedComponent: typeof React.Component\n): typeof React.Component {\n    class Prompt extends React.Component<any, PromptState> {\n        exports: {\n            confirm: (prompt_request: PromptRequest, confirmCB: (any) => void, cancelCB: () => void) => void;\n            cancel: () => void;\n            setConfig: (input_config: InputConfig) => void;\n            isOpen: () => boolean;\n            alert: (prompt_request: PromptRequest, confirmCB: (any) => void) => void;\n            setTag: (tag: string) => void;\n            getTag: () => string | null;\n        };\n        confirmCB: any;\n        cancelCB: any;\n        input_components: ComponentObject;\n\n        constructor(props) {\n            super(props);\n\n            this.state = {\n                show: false,\n                modal_props: {},\n                values: {},\n                prompt_request: null,\n                tag: null\n            };\n\n            this.exports = {\n                confirm: (prompt_request, confirmCB, cancelCB) => {\n                    if (prompt_request.hasOwnProperty(\"inputs\") === false) {\n                        prompt_request.inputs = [];\n                    }\n                    if (prompt_request.hasOwnProperty(\"props\") === false) {\n                        prompt_request.props = {};\n                    }\n                    let default_props = {\n                        show_cancel_btn: true,\n                        show_confirm_btn: true\n                    };\n                    prompt_request.props = Object.assign(\n                        {},\n                        default_props,\n                        prompt_request.props\n                    );\n                    this.initPrompt(prompt_request, confirmCB, cancelCB);\n                },\n                alert: (prompt_request, confirmCB) => {\n                    if (prompt_request.hasOwnProperty(\"inputs\") === false) {\n                        prompt_request.inputs = [];\n                    }\n                    if (prompt_request.hasOwnProperty(\"props\") === false) {\n                        prompt_request.props = {};\n                    }\n                    let default_props = {\n                        show_cancel_btn: false,\n                        show_confirm_btn: true\n                    };\n                    prompt_request.props = Object.assign(\n                        {},\n                        default_props,\n                        prompt_request.props\n                    );\n                    this.initPrompt(prompt_request, confirmCB);\n                },\n                cancel: () => {\n                    this.cancelRequest();\n                },\n                isOpen: () => {\n                    return this.state.show;\n                },\n                setTag: (tag) => {\n                    this.setState({\n                        tag: tag\n                    });\n                },\n                getTag: () => {\n                    return this.state.tag;\n                },\n                setConfig: (input_config: InputConfig) => {\n                    if (input_config.hasOwnProperty(\"key\") === false) {\n                        throw new Error(\"UserInput: input_config must contain 'key' property.\");\n                    }\n                    let inputs = this.state.inputs;\n                    let input_index = inputs.findIndex(input => input.key === input_config.key);\n                    if (input_index < 0) {\n                        throw new Error(\"UserInput: Key not found in existing inputs. Key must match an input created with 'promp()'.\");\n                    }\n                    let values = this.state.values;\n                    if (input_config.hasOwnProperty(\"value\")) {\n                        if (input_config.type === \"multi_select\") {\n                            let selected_options = input_config.options.filter(option => input_config.value.includes(option.value));\n                            if (selected_options.length !== input_config.value.length) {\n                                throw new Error(\"UserInput: Values for multiselect not present in options.\");\n                            }\n                            values[input_config.key] = selected_options;\n                        } else if (input_config.type === \"select\") {\n                            let selected_option = input_config.options.find(option => input_config.value === option.value);\n                            if (!selected_option) {\n                                throw new Error(\"UserInput: Value for select not present in options.\");\n                            }\n                            values[input_config.key] = selected_option;\n                        } else {\n                            values[input_config.key] = input_config.value;\n                        }\n                    }\n                    inputs[input_index] = Object.assign({}, inputs[input_index], input_config);\n                    this.setState({\n                        inputs: inputs,\n                        values: values\n                    });\n                }\n            };\n            this.confirmCB = null;\n            this.cancelCB = null;\n\n            this.input_components = {\n                text: TextInput,\n                grid: GridInput,\n                bool: BoolInput,\n                select: SelectInput,\n                multi_select: MultiSelectInput,\n                textarea: TextareaInput,\n                tri_state: TriStateInput,\n                button: Button,\n                confirm: Button\n            };\n        }\n\n        initPrompt(prompt_request: PromptRequest, confirmCB?: (any) => void, cancelCB?: () => void) {\n            let inputs = prompt_request.inputs;\n            let props = prompt_request.props;\n            let invalid_inputs = inputs.some(input => input.hasOwnProperty(\"default_value\") === false);\n            if (invalid_inputs) {\n                throw new Error(\"UserInput: Inputs must be configured with a 'default_value'.\");\n            }\n            invalid_inputs = inputs.some(input => !this.input_components[input.type]);\n            if (invalid_inputs) {\n                throw new Error(\"UserInput: Inputs must be configured with a valid 'type'. \" + valid_types.join(','));\n            }\n            this.confirmCB = confirmCB || null;\n            this.cancelCB = cancelCB || null;\n            let values = {};\n            inputs.forEach((input) => {\n                if (input.type === \"multi_select\") {\n                    let selected_options = input.options.filter(option => input.default_value.includes(option.value));\n                    if (selected_options.length !== input.default_value.length) {\n                        throw new Error(\"UserInput: Default values for multiselect not present in options.\");\n                    }\n                    values[input.key] = selected_options;\n                } else if (input.type === \"select\") {\n                    let selected_option = input.options.find(option => input.default_value === option.value);\n                    if (!selected_option) {\n                        throw new Error(\"UserInput: Default value for select not present in options.\");\n                    }\n                    values[input.key] = selected_option;\n                } else {\n                    values[input.key] = input.default_value;\n                }\n            });\n            this.setState({\n                show: true,\n                modal_props: props,\n                inputs: inputs,\n                values: values,\n                prompt_request: prompt_request\n            });\n        }\n\n        cancelRequest() {\n            this.confirmCB = null;\n            this.cancelCB = null;\n            this.setState({\n                show: false,\n                inputs: [],\n                values: [],\n                prompt_request: null,\n                tag: null\n            });\n        }\n\n        userConfirmedCB() {\n            this.setState({\n                show: false\n            });\n            let values = Object.assign({}, this.state.values);\n            this.state.inputs.forEach((input) => {\n                if ((input.type === \"text\" || input.type === \"textarea\") && (!input.hasOwnProperty(\"trim\") || input.trim === true)) {\n                    if (typeof values[input.key] === \"string\") {\n                        values[input.key] = values[input.key].trim();\n                    }\n                }\n                if (input.type === \"select\") {\n                    values[input.key] = values[input.key].value;\n                }\n                if (input.type === \"multi_select\") {\n                    values[input.key] = values[input.key].map(option => option.value);\n                }\n            });\n            if (this.confirmCB) {\n                this.confirmCB(values);\n                this.confirmCB = null;\n                this.cancelCB = null;\n            }\n        }\n        userCancelledCB() {\n            this.setState({\n                show: false\n            });\n            if (this.cancelCB) {\n                this.cancelCB();\n                this.cancelCB = null;\n                this.confirmCB = null;\n            }\n        }\n\n        inputValueChangeCB(key, value) {\n            let values = Object.assign({}, this.state.values);\n            values[key] = value;\n            this.setState({\n                values: values\n            });\n        }\n\n        renderInputs() {\n            if (!this.state.inputs) { return null; }\n            return this.state.inputs.map((input_request, index) => {\n                let InputComponent = this.input_components[input_request.type];\n                if (custom_components && custom_components.hasOwnProperty(input_request.type)) {\n                    InputComponent = custom_components[input_request.type];\n                }\n                let input_component_props = input_request.props || {};\n                let key = input_request.key || \"input_\" + index;\n                if (input_request.type === \"confirm\") {\n                    let suppliedOnClickCB = null;\n                    if (input_component_props.hasOwnProperty(\"onClick\")) {\n                        suppliedOnClickCB = input_component_props.onClick;\n                        delete input_component_props.suppliedOnClickCB;\n                    }\n                    return <InputComponent\n                        key={key}\n                        config={input_request}\n                        value={this.state.values[key]}\n                        onClick={(value) => {\n                            this.userConfirmedCB();\n                            if (suppliedOnClickCB) {\n                                suppliedOnClickCB();\n                            }\n                        }}\n                        {...input_component_props}\n                    />;\n                }\n                return <InputComponent\n                    key={key}\n                    config={input_request}\n                    value={this.state.values[key]}\n                    onChange={(value) => {\n                        if (input_request.onChange) {\n                            input_request.onChange(value);\n                        }\n                        this.inputValueChangeCB(key, value);\n                    }}\n                    {...input_component_props}\n                />;\n            });\n        }\n\n        renderPrompt() {\n            if (!this.state.show) { return null; }\n            let Modal: typeof React.Component = PromptModal;\n            if (custom_components && custom_components.hasOwnProperty(\"modal\")) {\n                Modal = custom_components.modal;\n            }\n            return (\n                <Modal\n                    confirmCB={() => { this.userConfirmedCB(); }}\n                    cancelCB={() => { this.userCancelledCB(); }}\n                    renderInputs={() => { return this.renderInputs(); }}\n                    {...this.state.modal_props}\n                />\n            );\n        }\n\n        render() {\n            return (<div>\n                <WrappedComponent userPrompt={this.exports} {...this.props} />\n                { this.renderPrompt() }\n            </div>);\n        }\n    }\n\n    return Prompt;\n}\n\n\nexport namespace InputHOC {\n    export function setCustomComponents(object_with_components: ComponentObject) {\n        custom_components = object_with_components;\n    }\n    export function generateForm(input_configs: InputConfig[], confirmCB?: (any) => void) {\n        if (input_configs.length < 1) {\n            throw new Error(\"UserInput: GenerateInputs requires at least one input.\");\n        }\n        if (!confirmCB) {\n            let inputs_missing_cb = input_configs.filter(input => !input.onChange);\n            if (inputs_missing_cb.length > 0) {\n                throw new Error(\"UserInput: GenerateInputs without a confirmCB requires every input to specify a onChange callback.\");\n            }\n        } else {\n            let confirm_buttons = input_configs.some(input => input.type === \"confirm\");\n            if (!confirm_buttons) {\n                throw new Error(\"UserInput: GenerateInputs with a confirmCB is required to have at least one input of type 'confirm'.\");\n            }\n        }\n        let invalid_inputs = input_configs.some((input) => {\n            return (input.type !== \"confirm\" && input.type !== \"button\") && input.hasOwnProperty(\"default_value\") === false;\n        });\n        if (invalid_inputs) {\n            throw new Error(\"UserInput: Every input that is not a 'button' or 'confirm' must be configured with a 'default_value'.\");\n        }\n        invalid_inputs = input_configs.some(input => !valid_types.includes(input.type));\n        if (invalid_inputs) {\n            throw new Error(\"UserInput: Inputs must be configured with a valid 'type'. \" + valid_types.join(','));\n        }\n        invalid_inputs = input_configs.some(input => (input.type !== 'button' && input.type !== 'confirm') && !input.hasOwnProperty('key'));\n        if (invalid_inputs) {\n            throw new Error(\"UserInput: Inputs that are not type 'button' or 'confirm' must be configured with a 'key' property. \");\n        }\n        return formGenerator.getInputForm(default_components, custom_components, input_configs, confirmCB);\n    }\n}\n\nexport default InputHOC;\n"]}