{"version":3,"sources":["../src/formGenerator.tsx"],"names":[],"mappings":"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","file":"formGenerator.js","sourcesContent":["import * as React from 'react';\n\n\nexport function getInputForm(default_components: ComponentObject, custom_components: ComponentObject, input_configs: InputConfig[], cb: (any) => void): any {\n    let mounted_forms: InputWrapper[] = [];\n\n    class InputWrapper extends React.Component<any, PromptState> {\n        confirmCB: (any) => void | null;\n        input_components: ComponentObject;\n\n        constructor(props) {\n            super(props);\n\n            let values = {};\n            input_configs.forEach(input => values[input.key] = input.default_value);\n\n            this.state = {\n                values: values,\n                inputs: input_configs\n            };\n            this.confirmCB = cb || null;\n\n            this.input_components = {\n                text: default_components.text,\n                grid: default_components.grid,\n                bool: default_components.bool,\n                button: default_components.button,\n                confirm: default_components.button\n            };\n        }\n\n        componentDidMount() {\n            mounted_forms.push(this);\n        }\n\n        componentWillUnmount() {\n            let mount_index = mounted_forms.findIndex(form => form === this);\n            mounted_forms.splice(mount_index, 1);\n        }\n\n        setConfig(input_config: InputConfig) {\n            let inputs = this.state.inputs;\n            let input_index = inputs.findIndex(input => input.key === input_config.key);\n            if (input_index < 0) {\n                throw new Error(\"UserInput: Key not found in existing inputs. Key must match an input created with 'generateForm()'.\");\n            }\n            let values = this.state.values;\n            if (input_config.hasOwnProperty(\"value\")) {\n                values[input_config.key] = input_config.value;\n            }\n            inputs[input_index] = Object.assign({}, inputs[input_index], input_config);\n            this.setState({\n                inputs: inputs,\n                values: values\n            });\n        }\n\n        getValues() {\n            return this.state.values;\n        }\n\n        resetValues() {\n            let default_values = input_configs.map(input => input.default_value);\n            this.setState({ values: default_values });\n        }\n\n        userConfirmedCB() {\n            if (this.confirmCB) {\n                this.confirmCB(this.state.values);\n                this.confirmCB = null;\n            }\n        }\n\n        inputValueChangeCB(key, value) {\n            let values = Object.assign({}, this.props.values);\n            values[key] = value;\n            this.setState({\n                values: values\n            });\n        }\n\n        renderInputs() {\n            return this.state.inputs.map((input_request, index) => {\n                let InputComponent = this.input_components[input_request.type];\n                if (custom_components && custom_components.hasOwnProperty(input_request.type)) {\n                    InputComponent = custom_components[input_request.type];\n                }\n                let input_component_props = input_request.props || {};\n                let key = input_request.key;\n                if (input_request.type === \"confirm\") {\n                    return <InputComponent\n                        key={key}\n                        config={input_request}\n                        value={this.state.values[key]}\n                        onClick={(value) => {\n                            this.userConfirmedCB();\n                        }}\n                        {...input_component_props}\n                    />;\n                }\n                return <InputComponent\n                    key={key}\n                    config={input_request}\n                    value={this.state.values[key]}\n                    onChange={(value) => {\n                        if (input_request.onChange) {\n                            input_request.onChange(value);\n                        }\n                        this.inputValueChangeCB(key, value);\n                    }}\n                    {...input_component_props}\n                />;\n            });\n        }\n\n        render() {\n            return (\n                <div>\n                    { this.renderInputs() }\n                </div>\n            );\n        }\n    }\n\n    return {\n        component: InputWrapper,\n        reset: () => {\n            mounted_forms.forEach((form) => {\n                form.resetValues();\n            });\n        },\n        getForms: () => {\n            return mounted_forms;\n        },\n        getValues: () => {\n            return mounted_forms.map((form) => {\n                return {\n                    values: form.getValues(),\n                    ref: form\n                };\n            });\n        },\n        setInputConfig: (updated_config: InputConfig) => {\n            if (updated_config.hasOwnProperty(\"key\") === false) {\n                throw new Error(\"UserInput: input_config must contain 'key' property.\");\n            }\n            let inputs = input_configs;\n            let input_index = inputs.findIndex(input => input.key === updated_config.key);\n            if (input_index < 0) {\n                throw new Error(\"UserInput: Key not found in existing inputs. Key must match an input created with 'generateForm()'.\");\n            }\n            inputs[input_index] = Object.assign({}, inputs[input_index], updated_config);\n\n            mounted_forms.forEach((form) => {\n                form.setConfig(updated_config);\n            });\n        }\n    };\n}"],"sourceRoot":"/source/"}