{"version":3,"sources":["../src/input_components/Button.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAQ/B,MAAM,CAAC,OAAO,OAAO,MAAO,SAAQ,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC;IACzD,SAAS,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC;gBAEtB,KAAK,KAAA;IAoEjB,MAAM;CAwBT","file":"input_components/Button.d.ts","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\n\ninterface ContainerStyleProps {\n    filled: boolean;\n    block: boolean;\n}\n\nexport default class Button extends React.Component<any, any> {\n    container: typeof React.Component;\n\n    constructor(props) {\n        super(props);\n\n        this.container = styled.button<ContainerStyleProps>`\n            font-size: 14px;\n            user-select: none;\n            border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.brand[0]};\n            display: ${props => props.block ? 'block' : 'inline-block'};\n            width: ${props => props.block ? '100%' : 'unset'};\n            cursor: pointer;\n            border-radius: 200px;\n            background-color: ${props => props.filled ? props.theme.colors.brand[0] : 'transparent'};\n            color: #fff;\n            text-align: center;\n            padding: 12px 20px;\n            font-weight: bold;\n            transition: all 0.3s;\n            &.big{\n                padding: 20px 44px;\n            }\n            &.disabled{\n                pointer-events: none;\n                opacity: 0.4;\n            }\n            &.light{\n                background-color: ${props => props.filled ? props.theme.colors.brand[1] : 'transparent'};\n                border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.brand[1]};\n            }\n            &.dark{\n                background-color: ${props => props.filled ? props.theme.colors.dark[0] : 'transparent'};\n                border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.dark[0]};\n                &:HOVER{\n                    background-color: ${props => props.filled ? props.theme.colors.dark[2] : props.theme.colors.dark[2]};\n                    border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.dark[2]};\n                }\n            }\n            &.red{\n                background-color: ${props => props.filled ? props.theme.colors.red[1] : 'transparent'};\n                border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.red[1]};\n                &:HOVER{\n                    background-color: ${props => props.filled ? props.theme.colors.red[3] : props.theme.colors.red[0]};\n                    border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.red[0]};\n                }\n            }\n            &.green{\n                background-color: ${props => props.filled ? props.theme.colors.green[1] : 'transparent'};\n                border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.green[1]};\n                &:HOVER{\n                    background-color: ${props => props.filled ? props.theme.colors.green[2] : props.theme.colors.green[2]};\n                    border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.green[2]};\n                }\n            }\n            &.teal{\n                background-color: ${props => props.filled ? props.theme.colors.teal[1] : 'transparent'};\n                border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.teal[1]};\n                &:HOVER{\n                    background-color: ${props => props.filled ? props.theme.colors.teal[2] : props.theme.colors.teal[2]};\n                    border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.teal[2]};\n                }\n            }\n            &:HOVER{\n                background-color: ${props => props.filled ? props.theme.colors.brand[2] : props.theme.colors.brand[0]};\n                border: ${props => props.filled ? 'none' : '1px solid ' + props.theme.colors.brand[0]};\n                box-shadow: 0 4px 5px rgba(0,0,0,0.1);\n            }\n        `;\n    }\n\n    render() {\n        let cfg = this.props.config;\n        let classes = [];\n        if (this.props.dark) { classes.push('dark'); }\n        if (this.props.light) { classes.push('light'); }\n        if (this.props.red) { classes.push('red'); }\n        if (this.props.green) { classes.push('green'); }\n        if (this.props.teal) { classes.push('teal'); }\n        if (this.props.disabled) { classes.push('disabled'); }\n        if (this.props.big) { classes.push('big'); }\n\n        return (\n            <this.container\n                onMouseEnter={e => this.props.onMouseEnter ? this.props.onMouseEnter(e) : null}\n                onMouseLeave={e => this.props.onMouseEnter ? this.props.onMouseLeave(e) : null}\n                block={this.props.block}\n                filled={this.props.filled}\n                className={`button ${classes.join(' ')}`}\n                onClick={e => this.props.onClick ? this.props.onClick(e) : null}\n            >\n                {cfg.label}\n            </this.container>\n        );\n    }\n}\n"],"sourceRoot":"/source/"}