{"version":3,"sources":["../src/input_components/GridInput.tsx"],"names":[],"mappings":"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","file":"input_components/GridInput.js","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\n\nexport type GridType = \"icons\" | \"colors\";\ninterface GridInputStyleProps {\n    grid_type: GridType;\n    presentation: string;\n}\nexport interface GridInputConfig {\n    label: string;\n    grid_type: GridType;\n    options: any;\n}\nexport interface GridInputProps {\n    value: any;\n    config: GridInputConfig;\n    onChange: (any) => void;\n}\n\n\nclass GridInput extends React.Component<GridInputProps, any> {\n    container: typeof React.Component;\n    gridItem: typeof React.Component;\n\n    constructor(props) {\n        super(props);\n        this.container = styled.div<GridInputStyleProps>`\n            text-align: left;\n            padding: 16px 20px !important;\n            p, .bool_block, .bool_input{\n                vertical-align: middle;\n                display: inline-block;\n            }\n            p{\n                color: ${props => props.theme.colors.dark[1]};\n                font-size: 14px;\n                margin-bottom: 12px;\n                font-weight: bold;\n            }\n            .grid_block{\n                border-radius: 4px;\n                background-color: ${props => props.theme.colors.border};\n                padding: 4px;\n                display: grid;\n                grid-template-columns: ${props => props.grid_type === 'colors' || props.grid_type === 'icons' ? 'repeat(6, 1fr)' : 'repeat(4, 1fr)'};\n                grid-gap: 4px 4px;\n            }\n        `;\n\n        this.gridItem = styled.div<GridInputStyleProps>`\n            box-shadow: 0 2px 3px rgba(38, 38, 38, 0.12);\n            background-color: #fff;\n            cursor: pointer;\n            border-radius: 4px;\n            padding: ${props => props.grid_type === 'icons' ? '6px 0' : '12px 0'};\n            height: ${props => props.grid_type === 'colors' || props.grid_type === 'icons' ? '44px' : 'unset'};\n            text-align: center;\n            font-size: 12px;\n            &:HOVER{\n                background-color: ${props => props.grid_type === 'colors' ? props.presentation : props.theme.colors.dark[1]};\n                opacity: 0.5;\n                color: #fff;\n            }\n            &.active{\n                background-color: ${props => props.grid_type === 'colors' ? props.presentation : props.theme.colors.dark[1]};\n                color: #fff;\n                font-weight: bold;\n                &:HOVER{\n                    opacity: 1;\n                }\n            }\n            span{\n                display: ${props => props.grid_type === 'colors' || props.grid_type === 'icons' ? 'none' : 'inline-block'};\n            }\n            svg{\n                width: 30px;\n                height: 30px;\n            }\n        `;\n\n    }\n\n    render() {\n        let cfg = this.props.config;\n        return (\n            <this.container\n                grid_type={cfg.grid_type}\n                className=\"user_input bool_input\">\n                { cfg.label ? <p>{ cfg.label }</p> : null }\n                <div className=\"grid_block\">\n                    {\n                        cfg.options.map((item, i) => {\n                            return (\n                                <this.gridItem\n                                    presentation={item.presentation}\n                                    grid_type={cfg.grid_type}\n                                    key={i}\n                                    className={`grid_item ${this.props.value === item.value ? 'active' : ''}`}\n                                    onClick={() => {\n                                        this.props.onChange(item.value);\n                                    }}\n                                    >\n                                    { cfg.grid_type === 'icons' ? null : <span>{item.presentation}</span> }\n\n                                </this.gridItem>\n                            );\n                        })\n                    }\n                </div>\n            </this.container>\n        );\n    }\n}\n\nexport default GridInput;\n"],"sourceRoot":"/source/"}