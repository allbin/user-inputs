{"version":3,"sources":["../src/input_components/TextInput.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAK/B,OAAO,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AAEvC,MAAM,WAAW,eAAe;IAC5B,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,OAAO,CAAC,EAAE,OAAO,CAAC;IAClB,sBAAsB,EAAE,OAAO,CAAC;IAChC,qBAAqB,EAAE,OAAO,CAAC;CAClC;AACD,MAAM,WAAW,cAAc;IAC3B,KAAK,EAAE,MAAM,CAAC;IACd,MAAM,EAAE,eAAe,CAAC;IACxB,QAAQ,EAAE,CAAC,MAAM,KAAA,KAAK,IAAI,CAAC;IAC3B,SAAS,CAAC,EAAE,OAAO,CAAC;CACvB;AAaD,cAAM,SAAU,SAAQ,KAAK,CAAC,SAAS,CAAC,cAAc,EAAE,eAAe,CAAC;IACpE,SAAS,EAAE,OAAO,KAAK,CAAC,SAAS,CAAC;IAClC,qBAAqB,EAAE,cAAc,GAAC,IAAI,CAAC;IAC3C,qBAAqB,EAAE,OAAO,CAAC;IAC/B,UAAU,EAAE,CAAC,IAAI,EAAE,WAAW,KAAK,IAAI,CAAC;gBAE5B,KAAK,KAAA;IAkGjB,mBAAmB;IAgDnB,gBAAgB,CAAC,GAAG,KAAA;IAmDpB,MAAM;CA0BT;AAED,eAAe,SAAS,CAAC","file":"TextInput.d.ts","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nconst Quagga = require('quagga');\nimport { FaBarcode } from 'react-icons/fa';\nimport oh from 'output-helpers';\nimport { LooseObject } from '../index';\n\nexport interface TextInputConfig {\n    label?: string;\n    class_name?: string;\n    barcode?: boolean;\n    barcode_stream_visible: boolean;\n    barcode_stream_failed: boolean;\n}\nexport interface TextInputProps {\n    value: string;\n    config: TextInputConfig;\n    onChange: (string) => void;\n    autofocus?: boolean;\n}\n\nconst CameraError = styled(\"div\")`\n    position: absolute;\n    left: 5%;\n    top: 5%;\n    right: 5%;\n    padding: 20px;\n    background-color: #c12a22;\n    color: #fff;\n    font-size: 16px;\n`;\n\nclass TextInput extends React.Component<TextInputProps, TextInputConfig> {\n    container: typeof React.Component;\n    barcode_stream_target: HTMLDivElement|null;\n    barcode_stream_failed: boolean;\n    detectedCB: (data: LooseObject) => void;\n\n    constructor(props) {\n        super(props);\n\n        this.container = styled.div `\n            text-align: left;\n            p{\n                color: ${props => props.theme.colors.dark[1]};\n                font-size: 14px;\n                margin-bottom: 12px;\n                font-weight: bold;\n            }\n            input{\n                border: 2px solid ${props => props.theme.colors.gray[2]};\n                border-radius: 4px;\n                font-size: 16px;\n                padding: 8px 12px;\n                width: 100%;\n                transition: all 0.3s;\n                &:HOVER, &:FOCUS{\n                    border-color: ${props => props.theme.colors.brand[2]};\n                }\n                &.small{\n                    width: calc(100% - 80px);\n                    display: inline-block;\n                    vertical-align: middle;\n                }\n            }\n            .barcode_reader{\n                display: inline-block;\n                width: 70px;\n                .barcode_btn{\n                    background-color: #1378ef;\n                    margin-left: 10px;\n                    width: 70px;\n                    text-align: center;\n                    height: 50px;\n                    vertical-align: middle;\n                    border-radius: 4px;\n                    svg{\n                        height: 50px;\n                        width: 36px;\n                        vertical-align: middle;\n                        fill: #fff;\n                    }\n                }\n            }\n\n            .barcode_stream_target{\n                display: none;\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 93%;\n                z-index: 1000000;\n                &.show {\n                    display: block;\n                }\n            }\n            .barcode_stream_target_close_btn{\n                text-align: center;\n                padding: 20px;\n                background-color: #EB4D44;\n                color: #fff;\n                font-weight: bold;\n                border-radius: 4px;\n                box-shadow: 0 5px 10px rgba(0,0,0,0.2);\n                /* width: 100%; */\n                bottom: 20px;\n                left: 20px;\n                right: 20px;\n                z-index: 16000000;\n                position: absolute;\n                &:HOVER{\n                    background-color: #c12a22;\n                }\n            }\n        `;\n\n        this.barcode_stream_target = null;\n\n        this.state = {\n            barcode_stream_visible: false,\n            barcode_stream_failed: false\n        };\n\n        this.detectedCB = (data) => {\n            Quagga.offDetected(this.detectedCB);\n            Quagga.stop();\n            let result = data.codeResult.code;\n            this.props.onChange(result);\n            this.setState({\n                barcode_stream_visible: false\n            });\n        };\n\n    }\n\n    startBarcodeReading() {\n        if (!this.barcode_stream_target) {\n            return;\n        }\n        let quagga_config = {\n            numOfWorkers: navigator.hardwareConcurrency,\n            locate: true,\n            inputStream: {\n                name: \"Live\",\n                type: \"LiveStream\",\n                constraints: {\n                    width: 1280,\n                    height: 720,\n                    facingMode: \"environment\"\n                },\n                target: this.barcode_stream_target\n            },\n            frequency: 5,\n            decoder: {\n                readers: [\"code_128_reader\", \"code_39_reader\", \"ean_reader\"]\n            },\n            locator: {\n                halfSample: true,\n                patchSize: \"medium\"\n            }\n        };\n\n        this.setState({\n            barcode_stream_visible: true\n        });\n\n        Quagga.init(quagga_config, (err) => {\n            if (err) {\n                console.error(err);\n                this.setState({\n                    barcode_stream_failed: true\n                });\n                return;\n            }\n\n            Quagga.onDetected(this.detectedCB);\n\n            Quagga.start();\n        });\n    }\n\n\n\n    renderBarcodeBtn(cfg) {\n        if (cfg.barcode !== true) {\n            return null;\n        }\n\n        let barcode_stream_classes = [\"barcode_stream_target\"];\n\n        if (this.state.barcode_stream_visible) {\n            barcode_stream_classes.push(\"show\");\n        }\n\n        return (\n            <div className=\"barcode_reader\">\n                <div className=\"barcode_btn\"\n                    onClick={() => {\n                        this.startBarcodeReading();\n                    }}\n                >\n                    <FaBarcode />\n                </div>\n                {\n                    this.state.barcode_stream_failed === true ?\n                    <CameraError>\n                        <p>{ oh.translate(\"camera_error\") }</p>\n                    </CameraError>\n                    :\n                    null\n                }\n                <div\n                    className={barcode_stream_classes.join(\" \")}\n                    ref={(ref) => { this.barcode_stream_target = ref; }}\n                >\n                    <div\n                        className={\"barcode_stream_target_close_btn\"}\n                        onClick={() => {\n                            Quagga.offDetected(this.detectedCB);\n                            Quagga.stop();\n                            this.setState({\n                                barcode_stream_visible: false\n                            });\n                        }}\n                    >\n                        { oh.translate(\"user_input_hoc_cancel\") }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n\n\n    render() {\n        let cfg = this.props.config;\n        let class_names = \"user_input text_input\";\n        if (cfg.class_name) {\n            class_names += \" \" + cfg.class_name;\n        }\n\n        let input_class_name = \"full\";\n        if (cfg.barcode === true) {\n            input_class_name = \"small\";\n        }\n\n        return (\n            <this.container className={class_names}>\n                { cfg.label ? <p>{ cfg.label }</p> : null }\n                <input\n                    className={input_class_name}\n                    autoFocus={this.props.autofocus || false}\n                    type=\"text\"\n                    value={this.props.value}\n                    onChange={e => this.props.onChange(e.target.value)}\n                />\n                { this.renderBarcodeBtn(cfg) }\n            </this.container>\n        );\n    }\n}\n\nexport default TextInput;\n"]}