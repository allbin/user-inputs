{"version":3,"sources":["../src/input_components/TextInput.tsx"],"names":[],"mappings":"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","file":"input_components/TextInput.js","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport Quagga from 'quagga';\nimport { FaBarcode } from 'react-icons/fa';\n\nexport interface TextInputConfig {\n    label?: string;\n    class_name?: string;\n    barcode?: boolean;\n    barcode_stream_visible: boolean;\n}\nexport interface TextInputProps {\n    value: string;\n    config: TextInputConfig;\n    onChange: (string) => void;\n    autofocus?: boolean;\n}\n\nclass TextInput extends React.Component<TextInputProps, TextInputConfig> {\n    container: typeof React.Component;\n    barcode_stream_target: HTMLDivElement|null;\n\n    constructor(props) {\n        super(props);\n\n        this.container = styled.div `\n            text-align: left;\n            p{\n                color: ${props => props.theme.colors.dark[1]};\n                font-size: 14px;\n                margin-bottom: 12px;\n                font-weight: bold;\n            }\n            input{\n                border: 2px solid ${props => props.theme.colors.gray[2]};\n                border-radius: 4px;\n                font-size: 16px;\n                padding: 8px 12px;\n                width: 100%;\n                transition: all 0.3s;\n                &:HOVER, &:FOCUS{\n                    border-color: ${props => props.theme.colors.brand[2]};\n                }\n            }\n            .barcode_btn{\n                width: 20px;\n                height: 20px;\n            }\n            .barcode_stream_target{\n                display: none;\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                z-index: 100000000;\n                &.show {\n                    display: block;\n                }\n            }\n        `;\n\n        this.barcode_stream_target = null;\n\n        this.state = {\n            barcode_stream_visible: false\n        };\n\n    }\n\n    startBarcodeReading() {\n        if (!this.barcode_stream_target) {\n            return;\n        }\n        let quagga_config = {\n            numOfWorkers: navigator.hardwareConcurrency,\n            locate: true,\n            inputStream: {\n                name: \"Live\",\n                type: \"LiveStream\",\n                constraints: {\n                    width: 1280,\n                    height: 720,\n                    facingMode: \"environment\"\n                },\n                target: this.barcode_stream_target\n            },\n            frequency: 5,\n            decoder: {\n                readers: [\"ean_reader\"]\n            },\n            locator: {\n                halfSample: true,\n                patchSize: \"medium\"\n            }\n        };\n\n        Quagga.init(quagga_config, (err) => {\n            if (err) {\n                throw err;\n            }\n\n            Quagga.onDetected(this.detectedCB);\n\n            Quagga.start();\n        });\n    }\n\n    detectedCB(data) {\n        Quagga.offDetected(this.detectedCB);\n        Quagga.stop();\n\n        let result = data.codeResult.code;\n        this.props.onChange(result);\n    }\n\n    renderBarcodeBtn(cfg) {\n        if (cfg.barcode !== true) {\n            return null;\n        }\n\n        let barcode_stream_classes = [\"barcode_stream_target\"];\n\n        if (this.state.barcode_stream_visible) {\n            barcode_stream_classes.push(\"show\");\n        }\n\n        return (\n            <div\n                className=\"barcode_btn\"\n                onClick={() => {\n                    this.startBarcodeReading();\n                }}\n            >\n                <FaBarcode />\n                <div\n                    className={barcode_stream_classes.join(\" \")}\n                    ref={(ref) => { this.barcode_stream_target = ref; }}\n                />\n            </div>\n        );\n    }\n\n\n\n    render() {\n        let cfg = this.props.config;\n        let class_names = \"user_input text_input\";\n        if (cfg.class_name) {\n            class_names += \" \" + cfg.class_name;\n        }\n\n        let input_class_name = \"full\";\n        if (cfg.barcode === true) {\n            input_class_name = \"small\";\n        }\n\n        return (\n            <this.container className={class_names}>\n                { cfg.label ? <p>{ cfg.label }</p> : null }\n                <input\n                    className={input_class_name}\n                    autoFocus={this.props.autofocus || false}\n                    type=\"text\"\n                    value={this.props.value}\n                    onChange={e => this.props.onChange(e.target.value)}\n                />\n                { this.renderBarcodeBtn(cfg) }\n            </this.container>\n        );\n    }\n}\n\nexport default TextInput;\n"],"sourceRoot":"/source/"}