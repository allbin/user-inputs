{"version":3,"sources":["../src/formGenerator.tsx"],"names":[],"mappings":"AAGA,wBAAgB,YAAY,CAAC,kBAAkB,EAAE,eAAe,EAAE,iBAAiB,EAAE,eAAe,EAAE,aAAa,EAAE,WAAW,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,KAAA,KAAK,IAAI,GAAG,GAAG,CA2N1J","file":"formGenerator.d.ts","sourcesContent":["import * as React from 'react';\n\n\nexport function getInputForm(default_components: ComponentObject, custom_components: ComponentObject, input_configs: InputConfig[], cb: (any) => void): any {\n    let mounted_forms: InputWrapper[] = [];\n\n    class InputWrapper extends React.Component<any, PromptState> {\n        confirmCB: (any) => void | null;\n        input_components: ComponentObject;\n\n        constructor(props) {\n            super(props);\n\n            let values = {};\n            input_configs.forEach((input) => {\n                if (input.type === \"multi_select\") {\n                    let selected_options = input.options.filter(option => input.default_value.includes(option.value));\n                    if (selected_options.length !== input.default_value.length) {\n                        throw new Error(\"UserInput: Default values for multiselect not present in options.\");\n                    }\n                    values[input.key] = selected_options;\n                } else if (input.type === \"select\") {\n                    let selected_option = input.options.find(option => input.default_value === option.value);\n                    if (!selected_option) {\n                        throw new Error(\"UserInput: Default value for select not present in options.\");\n                    }\n                    values[input.key] = selected_option;\n                } else {\n                    values[input.key] = input.default_value;\n                }\n            });\n\n            this.state = {\n                values: values,\n                inputs: input_configs,\n                prompt_request: null,\n                tag: null\n            };\n            this.confirmCB = cb || null;\n\n            this.input_components = {\n                text: default_components.text,\n                textarea: default_components.textarea,\n                grid: default_components.grid,\n                bool: default_components.bool,\n                multi_select: default_components.multi_select,\n                select: default_components.select,\n                button: default_components.button,\n                confirm: default_components.button,\n                tri_state: default_components.tri_state\n            };\n        }\n\n        componentDidMount() {\n            mounted_forms.push(this);\n        }\n\n        componentWillUnmount() {\n            let mount_index = mounted_forms.findIndex(form => form === this);\n            mounted_forms.splice(mount_index, 1);\n        }\n\n        setConfig(input_config: InputConfig) {\n            let inputs = this.state.inputs;\n            let input_index = inputs.findIndex(input => input.key === input_config.key);\n            if (input_index < 0) {\n                throw new Error(\"UserInput: Key not found in existing inputs. Key must match an input created with 'generateForm()'.\");\n            }\n            let values = this.state.values;\n            if (input_config.hasOwnProperty(\"value\")) {\n                if (input_config.type === \"multi_select\") {\n                    let selected_options = input_config.options.filter(option => input_config.value.includes(option.value));\n                    if (selected_options.length !== input_config.value.length) {\n                        throw new Error(\"UserInput: Values for multiselect not present in options.\");\n                    }\n                    values[input_config.key] = selected_options;\n                } else if (input_config.type === \"select\") {\n                    let selected_option = input_config.options.find(option => input_config.value === option.value);\n                    if (!selected_option) {\n                        throw new Error(\"UserInput: Value for select not present in options.\");\n                    }\n                    values[input_config.key] = selected_option;\n                } else {\n                    values[input_config.key] = input_config.value;\n                }\n            }\n            inputs[input_index] = Object.assign({}, inputs[input_index], input_config);\n            this.setState({\n                inputs: inputs,\n                values: values\n            });\n        }\n\n        getValues() {\n            let values = Object.assign({}, this.state.values);\n            this.state.inputs.forEach((input) => {\n                if ((input.type === \"text\" || input.type === \"textarea\") && (!input.hasOwnProperty(\"trim\") || input.trim === true)) {\n                    if (typeof values[input.key] === \"string\") {\n                        values[input.key] = values[input.key].trim();\n                    }\n                }\n                if (input.type === \"select\" && values[input.key] !== input.default_value) {\n                    values[input.key] = values[input.key].value;\n                }\n                if (input.type === \"multi_select\" && values[input.key] !== input.default_value) {\n                    values[input.key] = values[input.key].map(option => option.value);\n                }\n            });\n            return values;\n        }\n\n        resetValues() {\n            let default_values = input_configs.map(input => input.default_value);\n            this.setState({ values: default_values });\n        }\n\n        userConfirmedCB() {\n            let values = Object.assign({}, this.state.values);\n            this.state.inputs.forEach((input) => {\n                if ((input.type === \"text\" || input.type === \"textarea\") && (!input.hasOwnProperty(\"trim\") || input.trim === true)) {\n                    if (typeof values[input.key] === \"string\") {\n                        values[input.key] = values[input.key].trim();\n                    }\n                }\n                if (input.type === \"select\" && values[input.key] !== input.default_value) {\n                    values[input.key] = values[input.key].value;\n                }\n                if (input.type === \"multi_select\" && values[input.key] !== input.default_value) {\n                    values[input.key] = values[input.key].map(option => option.value);\n                }\n            });\n            if (this.confirmCB) {\n                this.confirmCB(values);\n                this.confirmCB = null;\n            }\n        }\n\n        inputValueChangeCB(key, value) {\n            let values = Object.assign({}, this.state.values);\n            values[key] = value;\n            this.setState({\n                values: values\n            });\n        }\n\n        renderInputs() {\n            return this.state.inputs.map((input_request, index) => {\n                let InputComponent = this.input_components[input_request.type];\n                if (custom_components && custom_components.hasOwnProperty(input_request.type)) {\n                    InputComponent = custom_components[input_request.type];\n                }\n                let input_component_props = input_request.props || {};\n                let key = input_request.key || \"input_\" + index;\n                if (input_request.type === \"confirm\") {\n                    return <InputComponent\n                        key={key}\n                        config={input_request}\n                        value={this.state.values[key]}\n                        onClick={(value) => {\n                            this.userConfirmedCB();\n                        }}\n                        {...input_component_props}\n                    />;\n                }\n                return <InputComponent\n                    key={key}\n                    config={input_request}\n                    value={this.state.values[key]}\n                    onChange={(value) => {\n                        if (input_request.onChange) {\n                            input_request.onChange(value);\n                        }\n                        this.inputValueChangeCB(key, value);\n                    }}\n                    {...input_component_props}\n                />;\n            });\n        }\n\n        render() {\n            return (\n                <div>\n                    { this.renderInputs() }\n                </div>\n            );\n        }\n    }\n\n    return {\n        component: InputWrapper,\n        reset: () => {\n            mounted_forms.forEach((form) => {\n                form.resetValues();\n            });\n        },\n        getForms: () => {\n            return mounted_forms;\n        },\n        getValues: () => {\n            return mounted_forms.map((form) => {\n                return {\n                    values: form.getValues(),\n                    ref: form\n                };\n            });\n        },\n        setInputConfig: (updated_config: InputConfig) => {\n            if (updated_config.hasOwnProperty(\"key\") === false) {\n                throw new Error(\"UserInput: input_config must contain 'key' property.\");\n            }\n            let inputs = input_configs;\n            let input_index = inputs.findIndex(input => input.key === updated_config.key);\n            if (input_index < 0) {\n                throw new Error(\"UserInput: Key not found in existing inputs. Key must match an input created with 'generateForm()'.\");\n            }\n            inputs[input_index] = Object.assign({}, inputs[input_index], updated_config);\n\n            mounted_forms.forEach((form) => {\n                form.setConfig(updated_config);\n            });\n        }\n    };\n}"],"sourceRoot":"/source/"}